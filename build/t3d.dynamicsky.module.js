// t3d-dynamic-sky
import * as t3d from 't3d';

const SkyDomeData = {
	vertices: [
		-0.03504532, 0.4964324, 0.04823573,
		-0.0567045, 0.4964324, -0.01842443,
		0, 0.5, 0,
		-0.09768943, 0.4893355, 0.03174119,
		-0.07381047, 0.4839744, 0.1015913,
		-0.1194278, 0.4839744, -0.03880448,
		-0.1414529, 0.4716036, 0.08706941,
		-0.1656159, 0.4716036, 0.01270325,
		-0.1145225, 0.4604763, 0.1576266,
		-0.1853012, 0.4604763, -0.06020803,
		-0.1851341, 0.4414262, 0.1444586,
		-0.2126627, 0.4472136, 0.06909828,
		-0.2346872, 0.4414262, -0.008050382,
		-0.1545085, 0.4253255, 0.2126627,
		-0.2499999, 0.4253255, -0.08122998,
		-0.2252235, 0.3992738, 0.1996368,
		-0.2566878, 0.4099547, 0.1266829,
		-0.2821271, 0.4099547, 0.04838858,
		-0.2995532, 0.3992738, -0.02912664,
		-0.1908708, 0.380199, 0.262711,
		-0.3088352, 0.380199, -0.1003467,
		-0.2587428, 0.3482778, 0.248505,
		-0.2938927, 0.3618034, 0.1809016,
		-0.3232889, 0.3666746, 0.1050429,
		-0.3440955, 0.3618034, 0.0263932,
		-0.3553949, 0.3482778, -0.04895964,
		-0.2214314, 0.3287566, 0.304774,
		-0.3582834, 0.3287566, -0.1164134,
		-0.2842597, 0.2931641, 0.2885329,
		-0.3220025, 0.3071692, 0.2279507,
		-0.3549554, 0.3149689, 0.1574844,
		-0.379732, 0.3149689, 0.08122992,
		-0.3944916, 0.3071692, 0.004852206,
		-0.3995663, 0.2931641, -0.06634454,
		-0.2453173, 0.2753395, 0.3376501,
		-0.3969315, 0.2753395, -0.128971,
		-0.3020217, 0.2384906, 0.3192257,
		-0.3408591, 0.2511477, 0.2659696,
		-0.376172, 0.259783, 0.202503,
		-0.4045085, 0.2628656, 0.1314328,
		-0.4233578, 0.259783, 0.05727997,
		-0.4320939, 0.2511477, -0.0148219,
		-0.4319769, 0.2384906, -0.08073506,
		-0.2628655, 0.2236068, 0.3618034,
		-0.4253254, 0.2236068, -0.1381966,
		-0.3969316, 0.2384906, -0.1885936,
		-0.3622522, 0.2931641, -0.1811855,
		-0.3162982, 0.3482778, -0.1692868,
		-0.2594638, 0.3992738, -0.1525091,
		-0.1945978, 0.4414262, -0.1314328,
		-0.1265193, 0.4716036, -0.1076238,
		-0.06037536, 0.4893355, -0.08309958,
		1.117587E-08, 0.4964324, -0.05962265,
		0, 0.5, 0,
		2.980232E-08, 0.4839744, -0.1255738,
		-0.06325964, 0.4716036, -0.1535846,
		2.607703E-08, 0.4604763, -0.1948372,
		-0.1314328, 0.4472136, -0.1809017,
		-0.06486594, 0.4414262, -0.2256885,
		2.980232E-08, 0.4253255, -0.2628655,
		-0.1998035, 0.4099547, -0.2049774,
		-0.1332023, 0.4099547, -0.2533659,
		-0.06486595, 0.3992738, -0.2938926,
		5.960464E-08, 0.380199, -0.3247286,
		-0.1998035, 0.3666746, -0.2750059,
		-0.1314328, 0.3618034, -0.3190983,
		-0.06325965, 0.3482778, -0.35313,
		-0.2628655, 0.3618034, -0.2236069,
		7.450581E-08, 0.3287566, -0.3767215,
		-0.3162982, 0.3071692, -0.2358019,
		-0.2594637, 0.3149689, -0.2889172,
		-0.1945978, 0.3149689, -0.3360451,
		-0.1265193, 0.3071692, -0.3736843,
		-0.06037539, 0.2931641, -0.4005117,
		5.960464E-08, 0.2753395, -0.4173586,
		-0.3582835, 0.2511477, -0.2419873,
		-0.3088354, 0.259783, -0.2951839,
		-0.25, 0.2628656, -0.3440955,
		-0.1853012, 0.259783, -0.3849366,
		-0.1194279, 0.2511477, -0.4155259,
		-0.05670463, 0.2384906, -0.435783,
		-0.09768955, 0.1904473, -0.4518701,
		-0.165616, 0.1995454, -0.4274961,
		-0.141453, 0.1330303, -0.4607537,
		-0.07381051, 0.1255738, -0.4783129,
		-0.1145225, 0.06494574, -0.4823553,
		-0.1851342, 0.06820413, -0.4594274,
		-0.1545085, 0, -0.4755283,
		-0.08017868, 0, -0.4935295,
		-0.2252235, 0, -0.4464016,
		-0.2566878, 0.0700286, -0.4233289,
		-0.2938927, -7.450581E-09, -0.4045085,
		-0.323289, 0.07002861, -0.3749403,
		-0.3549554, -4.097819E-08, -0.3521459,
		-0.379732, 0.06820408, -0.3180439,
		-0.4045085, 0, -0.2938926,
		-0.4233578, 0.06494573, -0.2579733,
		-0.4445979, 4.097819E-08, -0.2287635,
		-0.4577511, 0.06651513, -0.1898409,
		-0.4320939, 0.1255738, -0.2180047,
		-0.4599417, 0.1269649, -0.1494441,
		-0.431977, 0.1788679, -0.1772067,
		-0.4536361, 0.178868, -0.1105464,
		-0.4777113, 0.1255738, -0.07760882,
		-0.4819142, 0.06651513, -0.1154748,
		-0.4941365, 0.06494574, -0.04013863,
		-0.4941511, 0, -0.07625456,
		-0.4755282, 7.450581E-09, -0.1545085,
		-0.5, 0, 0,
		-0.4941511, 0.06820413, 0.03410213,
		-0.4941511, 0, 0.07625456,
		-0.4819306, 0.0700286, 0.1133088,
		-0.4755282, -7.450581E-09, 0.1545085,
		-0.4564913, 0.07002861, 0.1916031,
		-0.4445978, -4.097819E-08, 0.2287635,
		-0.4198212, 0.06820408, 0.2628655,
		-0.4045085, 0, 0.2938926,
		-0.3761719, 0.06494573, 0.322919,
		-0.3549554, 4.097819E-08, 0.3521459,
		-0.3220024, 0.06651513, 0.3766831,
		-0.3408592, 0.1255738, 0.3435786,
		-0.2842597, 0.1269649, 0.3912497,
		-0.3020218, 0.1788679, 0.3560746,
		-0.2453171, 0.178868, 0.3972729,
		-0.2214313, 0.1255738, 0.430348,
		-0.2587428, 0.06651513, 0.4226439,
		-0.1908707, 0.06494574, 0.4575483,
		-0.2252235, 0, 0.4464017,
		-0.2938927, 7.450581E-09, 0.4045085,
		-0.1545085, 0, 0.4755282,
		-0.120268, 0.06820413, 0.4805037,
		-0.08017866, 0, 0.4935295,
		-0.04116167, 0.0700286, 0.4933576,
		4.470348E-08, -7.450581E-09, 0.4999999,
		0.04116186, 0.07002861, 0.4933577,
		0.08017875, -4.097819E-08, 0.4935295,
		0.1202681, 0.06820408, 0.4805037,
		0.1545085, 0, 0.4755283,
		0.1908708, 0.06494573, 0.4575482,
		0.2252235, 4.097819E-08, 0.4464016,
		0.2587427, 0.06651513, 0.422644,
		0.2214314, 0.1255738, 0.430348,
		0.2842596, 0.1269649, 0.3912497,
		0.2453172, 0.1788679, 0.3972729,
		0.3020218, 0.178868, 0.3560745,
		0.2628655, 0.2236068, 0.3618034,
		0.3408592, 0.1255738, 0.3435785,
		0.3220024, 0.06651513, 0.3766832,
		0.376172, 0.06494574, 0.322919,
		0.3549553, 0, 0.3521459,
		0.2938926, 7.450581E-09, 0.4045085,
		0.4045085, 0, 0.2938927,
		0.4198214, 0.06820413, 0.2628655,
		0.4445979, 0, 0.2287634,
		0.4564914, 0.0700286, 0.191603,
		0.4755283, -7.450581E-09, 0.1545085,
		0.4819306, 0.07002861, 0.1133086,
		0.4941511, -4.097819E-08, 0.07625447,
		0.4941511, 0.06820408, 0.03410202,
		0.5000001, 0, -1.490116E-08,
		0.4941365, 0.06494573, -0.04013865,
		0.4941511, 4.097819E-08, -0.07625453,
		0.4819142, 0.06651513, -0.1154748,
		0.4777113, 0.1255738, -0.07760891,
		0.4599417, 0.1269649, -0.1494441,
		0.4536361, 0.1788679, -0.1105465,
		0.4319769, 0.178868, -0.1772067,
		0.4253254, 0.2236068, -0.1381966,
		0.4320938, 0.1255738, -0.2180047,
		0.4577512, 0.06651513, -0.1898409,
		0.4233577, 0.06494574, -0.2579733,
		0.4445979, 0, -0.2287634,
		0.4755282, 7.450581E-09, -0.1545085,
		0.4045085, 0, -0.2938926,
		0.4819142, 0.1330303, -0.007851079,
		0.4755283, 0.1381966, 0.06909825,
		0.4564912, 0.1400572, 0.1483229,
		0.4253255, 0.1381966, 0.2236067,
		0.3852621, 0.1330303, 0.2896136,
		0.3446351, 0.1904473, 0.3081501,
		0.3852621, 0.1995454, 0.248505,
		0.4198213, 0.2046123, 0.1785606,
		0.4445979, 0.2046123, 0.1023061,
		0.4577512, 0.1995454, 0.02540648,
		0.3020218, 0.2384906, 0.3192257,
		0.3408592, 0.2511477, 0.2659696,
		0.2842596, 0.2931641, 0.2885331,
		0.3220024, 0.3071692, 0.2279508,
		0.2587427, 0.3482778, 0.2485051,
		0.2938926, 0.3618034, 0.1809017,
		0.2252234, 0.3992738, 0.1996369,
		0.2566877, 0.4099547, 0.126683,
		0.185134, 0.4414262, 0.1444586,
		0.2126627, 0.4472136, 0.06909832,
		0.1414529, 0.4716036, 0.08706944,
		0.1656159, 0.4716036, 0.01270329,
		0.09768942, 0.4893355, 0.03174124,
		0.1194278, 0.4839744, -0.03880444,
		0.05670452, 0.4964324, -0.0184244,
		0.06037539, 0.4893355, -0.08309957,
		1.117587E-08, 0.4964324, -0.05962265,
		0, 0.5, 0,
		2.980232E-08, 0.4839744, -0.1255738,
		0.06325969, 0.4716036, -0.1535846,
		0.1265193, 0.4716036, -0.1076237,
		2.607703E-08, 0.4604763, -0.1948372,
		0.1853012, 0.4604763, -0.06020798,
		0.06486601, 0.4414262, -0.2256885,
		0.1314328, 0.4472136, -0.1809017,
		0.1945978, 0.4414262, -0.1314328,
		2.980232E-08, 0.4253255, -0.2628655,
		0.25, 0.4253255, -0.0812299,
		0.06486606, 0.3992738, -0.2938926,
		0.1332024, 0.4099547, -0.2533659,
		0.1998035, 0.4099547, -0.2049773,
		0.2594638, 0.3992738, -0.152509,
		5.960464E-08, 0.380199, -0.3247286,
		0.3088353, 0.380199, -0.1003466,
		0.06325974, 0.3482778, -0.35313,
		0.1314328, 0.3618034, -0.3190983,
		0.1998035, 0.3666746, -0.2750059,
		0.2628655, 0.3618034, -0.2236068,
		0.3162983, 0.3482778, -0.1692867,
		7.450581E-08, 0.3287566, -0.3767215,
		0.3582835, 0.3287566, -0.1164133,
		0.06037552, 0.2931641, -0.4005117,
		0.1265194, 0.3071692, -0.3736843,
		0.1945979, 0.3149689, -0.3360451,
		0.2594638, 0.3149689, -0.2889172,
		0.3162983, 0.3071692, -0.2358018,
		0.3622523, 0.2931641, -0.1811853,
		5.960464E-08, 0.2753395, -0.4173586,
		0.3969316, 0.2753395, -0.1289708,
		0.05670461, 0.2384906, -0.435783,
		0.1194279, 0.2511477, -0.4155259,
		0.1853012, 0.259783, -0.3849367,
		0.2499999, 0.2628656, -0.3440955,
		0.3088353, 0.259783, -0.295184,
		0.3582835, 0.2511477, -0.2419872,
		0.3969315, 0.2384906, -0.1885936,
		0.4319769, 0.2384906, -0.08073507,
		0.3995663, 0.2931641, -0.0663444,
		0.3553949, 0.3482778, -0.04895957,
		0.2995532, 0.3992738, -0.02912654,
		0.2346872, 0.4414262, -0.008050337,
		0.2821271, 0.4099547, 0.04838863,
		0.3440955, 0.3618034, 0.02639326,
		0.3232889, 0.3666746, 0.1050429,
		0.3944916, 0.3071692, 0.004852302,
		0.3797319, 0.3149689, 0.08123002,
		0.3549553, 0.3149689, 0.1574845,
		0.4233578, 0.259783, 0.05727994,
		0.4045085, 0.2628656, 0.1314328,
		0.3761719, 0.259783, 0.202503,
		0.4320939, 0.2511477, -0.01482192,
		0.4599417, 0.1904473, -0.0467274,
		0.3995663, 0.1904473, -0.2325438,
		0.3944915, 0.1330303, -0.2769105,
		0.3797319, 0.06820413, -0.3180439,
		0.3549553, 0, -0.352146,
		0.3232889, 0.0700286, -0.3749404,
		0.2938926, -7.450581E-09, -0.4045085,
		0.2566877, 0.07002861, -0.423329,
		0.2252234, -4.097819E-08, -0.4464017,
		0.1851341, 0.06820408, -0.4594275,
		0.1545085, 0, -0.4755283,
		0.1145225, 0.06494573, -0.4823553,
		0.3440955, 0.1381966, -0.3354103,
		0.2821271, 0.1400572, -0.3883147,
		0.2126627, 0.1381966, -0.4309017,
		0.1414529, 0.1330303, -0.4607537,
		0.3553948, 0.1995454, -0.2896138,
		0.2995531, 0.2046123, -0.3440955,
		0.2346872, 0.2046123, -0.3912234,
		0.1656159, 0.1995454, -0.4274963,
		0.09768943, 0.1904473, -0.4518701,
		0.07381047, 0.1255738, -0.4783128,
		0.03909664, 0.06651513, -0.4940113,
		2.980232E-08, 0.1269649, -0.4836114,
		0.03504534, 0.1788679, -0.4655943,
		-0.0001689643, 0.178868, -0.4655943,
		0, 0.2236068, -0.4472136,
		-0.0003032982, 0.06651513, -0.4940113,
		1.490116E-08, 7.450581E-09, -0.5,
		0.08017874, 4.097819E-08, -0.4935295,
		0.03504531, 0.4964324, 0.04823574,
		0, 0.5, 0,
		0.07381043, 0.4839744, 0.1015914,
		0.1145224, 0.4604763, 0.1576266,
		0.1545084, 0.4253255, 0.2126627,
		0.1908707, 0.380199, 0.262711,
		0.2214313, 0.3287566, 0.3047741,
		0.2453172, 0.2753395, 0.3376502,
		-2.235174E-08, 0.4893355, 0.1027167,
		0, 0.5, 0,
		-0.03909664, 0.4716036, 0.1614356,
		0.03909659, 0.4716036, 0.1614356,
		0.08017866, 0.4414262, 0.2207131,
		-3.72529E-08, 0.4472136, 0.2236068,
		-0.08017873, 0.4414262, 0.2207131,
		0.120268, 0.3992738, 0.2758915,
		0.04116175, 0.4099547, 0.2832717,
		-0.04116186, 0.4099547, 0.2832717,
		-0.1202681, 0.3992738, 0.2758913,
		0.1563864, 0.3482778, 0.3228713,
		0.08122984, 0.3618034, 0.3354101,
		-5.960464E-08, 0.3666746, 0.339926,
		-0.08122993, 0.3618034, 0.3354102,
		-0.1563865, 0.3482778, 0.3228713,
		0.18657, 0.2931641, 0.3595086,
		0.1172897, 0.3071692, 0.3766831,
		0.04008927, 0.3149689, 0.3862479,
		-0.04008941, 0.3149689, 0.3862479,
		-0.1172899, 0.3071692, 0.3766831,
		-0.1865702, 0.2931641, 0.3595085,
		0.2102718, 0.2384906, 0.3858859,
		0.1476209, 0.2511477, 0.4063655,
		0.0763483, 0.259783, 0.4203376,
		-1.490116E-08, 0.2628656, 0.4253254,
		-0.07634826, 0.259783, 0.4203376,
		-0.1476209, 0.2511477, 0.4063655,
		-0.2102718, 0.2384906, 0.385886,
		-0.18657, 0.1904473, 0.422991,
		-0.1563863, 0.1330303, 0.4559016,
		-0.08122984, 0.1381966, 0.4736069,
		7.450581E-08, 0.1400572, 0.4799833,
		0.08122994, 0.1381966, 0.4736067,
		0.1563865, 0.1330303, 0.4559015,
		-0.1172897, 0.1995454, 0.4431984,
		-0.04008928, 0.2046123, 0.4544521,
		0.04008942, 0.2046123, 0.4544521,
		0.1172899, 0.1995454, 0.4431983,
		0.1865701, 0.1904473, 0.422991,
		-0.4819142, 0.1330303, -0.007850945,
		-0.4755282, 0.1381966, 0.06909838,
		-0.4564912, 0.1400572, 0.148323,
		-0.4253254, 0.1381966, 0.2236068,
		-0.385262, 0.1330303, 0.2896137,
		-0.4599417, 0.1904473, -0.04672723,
		-0.4577512, 0.1995454, 0.02540663,
		-0.4445978, 0.2046123, 0.1023062,
		-0.4198212, 0.2046123, 0.1785607,
		-0.385262, 0.1995454, 0.2485051,
		-0.344635, 0.1904473, 0.3081503,
		-0.3995663, 0.1904473, -0.2325437,
		-0.3944916, 0.1330303, -0.2769104,
		-0.3440955, 0.1381966, -0.3354101,
		-0.2821271, 0.1400572, -0.3883146,
		-0.2126628, 0.1381966, -0.4309016,
		-0.2346873, 0.2046123, -0.3912234,
		-0.2995532, 0.2046123, -0.3440955,
		-0.355395, 0.1995454, -0.2896137,
		0, 0.2236068, -0.4472136,
		-0.0350454, 0.178868, -0.4655943,
		2.980232E-08, 0.1269649, -0.4836114,
		-0.03909657, 0.06651513, -0.4940113,
		1.490116E-08, 7.450581E-09, -0.5,
		-0.0001689643, 0.178868, -0.4655943,
		-0.0003032982, 0.06651513, -0.4940113
	],
	UV0: [
		0.3999997, 0.9239051,
		0.2, 0.9239051,
		0.3, 1,
		0.2999999, 0.8682792,
		0.3999997, 0.8383842,
		0.2, 0.8383842,
		0.337816, 0.7844151,
		0.2621837, 0.7844151,
		0.3999997, 0.7451752,
		0.2, 0.7451752,
		0.3554571, 0.68876,
		0.3, 0.7048329,
		0.2445426, 0.68876,
		0.3999998, 0.6475838,
		0.2, 0.6475838,
		0.3654265, 0.5887959,
		0.3229657, 0.6119527,
		0.2770341, 0.6119527,
		0.2345732, 0.588796,
		0.3999998, 0.5499923,
		0.2, 0.5499923,
		0.371788, 0.4905702,
		0.337816, 0.5150341,
		0.2999999, 0.524088,
		0.2621837, 0.5150343,
		0.2282117, 0.4905702,
		0.3999997, 0.4567834,
		0.2, 0.4567834,
		0.3761872, 0.3988542,
		0.3480423, 0.4211541,
		0.3164599, 0.4338392,
		0.2835399, 0.4338393,
		0.2519574, 0.4211541,
		0.2238126, 0.3988542,
		0.3999998, 0.3712624,
		0.2, 0.3712624,
		0.3794061, 0.3165382,
		0.3554571, 0.3350221,
		0.3285963, 0.3478128,
		0.3, 0.3524165,
		0.2714034, 0.3478128,
		0.2445427, 0.3350221,
		0.2205937, 0.3165382,
		0.3999998, 0.2951673,
		0.2, 0.2951673,
		0.1794063, 0.3165382,
		0.1761873, 0.3988542,
		0.1717882, 0.4905702,
		0.1654267, 0.5887959,
		0.1554573, 0.68876,
		0.1378161, 0.7844151,
		0.09999996, 0.8682793,
		1.192093E-07, 0.9239051,
		0.1, 1,
		0, 0.8383842,
		0.06218386, 0.7844151,
		0, 0.7451752,
		0.09999996, 0.7048329,
		0.04454279, 0.68876,
		0, 0.6475838,
		0.1229658, 0.6119525,
		0.07703424, 0.6119527,
		0.03457332, 0.588796,
		0, 0.5499924,
		0.09999996, 0.524088,
		0.06218386, 0.5150343,
		0.02821183, 0.4905702,
		0.1378161, 0.5150341,
		0, 0.4567834,
		0.1480424, 0.4211541,
		0.1164601, 0.4338393,
		0.08353996, 0.4338393,
		0.05195755, 0.4211541,
		0.02381265, 0.3988542,
		0, 0.3712624,
		0.1554573, 0.3350221,
		0.1285965, 0.3478128,
		0.09999996, 0.3524165,
		0.07140356, 0.3478128,
		0.04454279, 0.3350221,
		0.02059376, 0.3165382,
		0.03388619, 0.248768,
		0.05882466, 0.2613485,
		0.04740751, 0.1714443,
		0.02436781, 0.161616,
		0.03710026, 0.08292592,
		0.06096619, 0.08711183,
		0.05000007, 5.960464E-08,
		0.02563244, 5.960464E-08,
		0.0743677, 5.960464E-08,
		0.08675212, 0.08945736,
		0.1, 5.960464E-08,
		0.1132479, 0.08945736,
		0.1256323, 0,
		0.1390339, 0.08711183,
		0.15, 5.960464E-08,
		0.1628998, 0.08292592,
		0.1743676, 5.960464E-08,
		0.1874304, 0.08494151,
		0.1756323, 0.161616,
		0.2, 0.1634465,
		0.1880429, 0.2329024,
		0.211957, 0.2329025,
		0.2243676, 0.161616,
		0.2125695, 0.08494151,
		0.2371001, 0.08292592,
		0.2256323, 5.960464E-08,
		0.2, 5.960464E-08,
		0.2499999, 5.960464E-08,
		0.2609661, 0.08711183,
		0.2743676, 5.960464E-08,
		0.286752, 0.08945736,
		0.3, 5.960464E-08,
		0.3132478, 0.08945736,
		0.3256322, 0,
		0.3390338, 0.08711183,
		0.3499998, 5.960464E-08,
		0.3628997, 0.08292592,
		0.3743675, 5.960464E-08,
		0.3874304, 0.08494151,
		0.3756322, 0.161616,
		0.3999998, 0.1634465,
		0.3880428, 0.2329024,
		0.4119569, 0.2329025,
		0.4243675, 0.161616,
		0.4125693, 0.08494151,
		0.4370999, 0.08292592,
		0.4256321, 5.960464E-08,
		0.3999998, 5.960464E-08,
		0.4499997, 5.960464E-08,
		0.4609659, 0.08711183,
		0.4743674, 5.960464E-08,
		0.4867519, 0.08945736,
		0.4999998, 5.960464E-08,
		0.5132477, 0.08945736,
		0.5256321, 0,
		0.5390337, 0.08711183,
		0.5499997, 5.960464E-08,
		0.5628995, 0.08292592,
		0.5743674, 5.960464E-08,
		0.5874302, 0.08494151,
		0.5756321, 0.161616,
		0.5999997, 0.1634465,
		0.5880426, 0.2329025,
		0.6119568, 0.2329025,
		0.5999997, 0.2951673,
		0.6243674, 0.161616,
		0.6125692, 0.08494151,
		0.6370999, 0.08292592,
		0.625632, 5.960464E-08,
		0.5999997, 5.960464E-08,
		0.6499997, 5.960464E-08,
		0.6609658, 0.08711183,
		0.6743673, 5.960464E-08,
		0.6867517, 0.08945736,
		0.6999996, 5.960464E-08,
		0.7132476, 0.08945736,
		0.725632, 0,
		0.7390335, 0.08711183,
		0.7499996, 5.960464E-08,
		0.7628994, 0.08292592,
		0.7743673, 5.960464E-08,
		0.7874301, 0.08494151,
		0.775632, 0.161616,
		0.7999996, 0.1634465,
		0.7880425, 0.2329025,
		0.8119566, 0.2329025,
		0.7999996, 0.2951673,
		0.8243673, 0.161616,
		0.8125691, 0.08494151,
		0.8370998, 0.08292592,
		0.8256319, 5.960464E-08,
		0.7999996, 5.960464E-08,
		0.8499996, 5.960464E-08,
		0.7525922, 0.1714442,
		0.7270338, 0.1782785,
		0.6999997, 0.1807449,
		0.6729655, 0.1782785,
		0.6474071, 0.1714443,
		0.6338857, 0.248768,
		0.6588242, 0.2613485,
		0.6859961, 0.2684016,
		0.7140032, 0.2684016,
		0.7411751, 0.2613485,
		0.6205934, 0.3165382,
		0.6445423, 0.3350221,
		0.6238123, 0.3988542,
		0.6519572, 0.4211541,
		0.6282114, 0.4905702,
		0.6621835, 0.5150343,
		0.634573, 0.588796,
		0.6770338, 0.6119527,
		0.6445423, 0.68876,
		0.6999996, 0.7048329,
		0.6621835, 0.7844151,
		0.7378157, 0.7844151,
		0.6999996, 0.8682793,
		0.7999996, 0.8383842,
		0.7999996, 0.9239052,
		0.8999995, 0.8682793,
		0.9999995, 0.9239051,
		0.9, 1,
		0.9999995, 0.8383842,
		0.9378157, 0.7844151,
		0.8621834, 0.7844151,
		0.9999995, 0.7451752,
		0.7999996, 0.7451752,
		0.9554567, 0.68876,
		0.8999995, 0.7048329,
		0.8445423, 0.68876,
		0.9999995, 0.6475838,
		0.7999996, 0.6475838,
		0.9654262, 0.588796,
		0.9229653, 0.6119527,
		0.8770337, 0.6119527,
		0.8345729, 0.588796,
		0.9999995, 0.5499924,
		0.7999996, 0.5499924,
		0.9717877, 0.4905702,
		0.9378157, 0.5150343,
		0.8999995, 0.524088,
		0.8621834, 0.5150343,
		0.8282113, 0.4905702,
		0.9999994, 0.4567834,
		0.7999995, 0.4567834,
		0.9761868, 0.3988542,
		0.948042, 0.4211541,
		0.9164596, 0.4338393,
		0.8835395, 0.4338393,
		0.851957, 0.4211541,
		0.8238122, 0.3988542,
		0.9999995, 0.3712624,
		0.7999996, 0.3712624,
		0.9794058, 0.3165382,
		0.9554568, 0.3350221,
		0.928596, 0.3478128,
		0.8999995, 0.3524165,
		0.8714031, 0.3478128,
		0.8445423, 0.3350221,
		0.8205933, 0.3165382,
		0.7794059, 0.3165382,
		0.7761869, 0.3988542,
		0.7717878, 0.4905702,
		0.7654263, 0.588796,
		0.7554569, 0.68876,
		0.7229654, 0.6119527,
		0.7378158, 0.5150343,
		0.6999996, 0.524088,
		0.7480421, 0.4211541,
		0.7164596, 0.4338393,
		0.6835396, 0.4338393,
		0.7285961, 0.3478128,
		0.6999996, 0.3524165,
		0.6714032, 0.3478128,
		0.7554569, 0.3350221,
		0.7661135, 0.248768,
		0.8338857, 0.248768,
		0.847407, 0.1714443,
		0.8609657, 0.08711183,
		0.8743672, 5.960464E-08,
		0.8867517, 0.08945736,
		0.8999995, 5.960464E-08,
		0.9132475, 0.08945736,
		0.9256318, 0,
		0.9390334, 0.08711183,
		0.9499995, 5.960464E-08,
		0.9628993, 0.08292592,
		0.8729655, 0.1782785,
		0.8999995, 0.1807449,
		0.9270337, 0.1782785,
		0.9525921, 0.1714442,
		0.8588241, 0.2613485,
		0.885996, 0.2684016,
		0.9140031, 0.2684016,
		0.941175, 0.2613484,
		0.9661134, 0.248768,
		0.9756318, 0.161616,
		0.98743, 0.08494151,
		0.9999994, 0.1634465,
		0.9880424, 0.2329025,
		0.9999994, 0.2335038,
		0.9999994, 0.2951673,
		0.9999994, 0.08520389,
		0.9999994, 5.960464E-08,
		0.9743671, 5.960464E-08,
		0.5999995, 0.9239051,
		0.7, 1,
		0.5999997, 0.8383842,
		0.5999997, 0.7451752,
		0.5999997, 0.6475838,
		0.5999997, 0.5499924,
		0.5999997, 0.4567834,
		0.5999997, 0.3712624,
		0.4999997, 0.8682793,
		0.5, 1,
		0.4621836, 0.7844151,
		0.5378159, 0.7844151,
		0.555457, 0.68876,
		0.4999997, 0.7048329,
		0.4445425, 0.68876,
		0.5654263, 0.588796,
		0.5229656, 0.6119527,
		0.4770339, 0.6119527,
		0.4345731, 0.588796,
		0.571788, 0.4905702,
		0.5378159, 0.5150343,
		0.4999997, 0.524088,
		0.4621837, 0.5150343,
		0.4282115, 0.4905702,
		0.576187, 0.3988542,
		0.5480422, 0.4211541,
		0.5164598, 0.4338393,
		0.4835397, 0.4338393,
		0.4519573, 0.4211541,
		0.4238124, 0.3988542,
		0.579406, 0.3165382,
		0.555457, 0.3350221,
		0.5285962, 0.3478128,
		0.4999998, 0.3524165,
		0.4714033, 0.3478128,
		0.4445425, 0.3350221,
		0.4205936, 0.3165382,
		0.4338859, 0.248768,
		0.4474072, 0.1714443,
		0.4729656, 0.1782785,
		0.4999998, 0.1807449,
		0.5270339, 0.1782785,
		0.5525923, 0.1714442,
		0.4588243, 0.2613485,
		0.4859962, 0.2684016,
		0.5140033, 0.2684016,
		0.5411752, 0.2613485,
		0.5661136, 0.248768,
		0.2474073, 0.1714443,
		0.2729658, 0.1782785,
		0.3, 0.1807448,
		0.327034, 0.1782784,
		0.3525925, 0.1714442,
		0.2338861, 0.248768,
		0.2588244, 0.2613485,
		0.2859964, 0.2684016,
		0.3140035, 0.2684014,
		0.3411754, 0.2613484,
		0.3661138, 0.248768,
		0.1661139, 0.2487679,
		0.1525926, 0.1714442,
		0.1270342, 0.1782785,
		0.1, 0.1807448,
		0.07296592, 0.1782785,
		0.08599645, 0.2684016,
		0.1140036, 0.2684014,
		0.1411755, 0.2613484,
		0, 0.2951673,
		0.01195723, 0.2329025,
		0, 0.1634465,
		0.01256955, 0.08494151,
		0, 5.960464E-08,
		5.781651E-05, 0.2335038,
		9.781122E-05, 0.08520389
	],
	UV2: [
		0.4744145, 0.4653202,
		0.4586085, 0.5140159,
		0.4999891, 0.5005543,
		0.4287522, 0.4773859,
		0.4461189, 0.4263453,
		0.4128253, 0.5289108,
		0.396718, 0.4368698,
		0.3790406, 0.4913216,
		0.4160786, 0.3849725,
		0.3642192, 0.5447221,
		0.3639458, 0.3941231,
		0.3440939, 0.449855,
		0.3274182, 0.5066306,
		0.3856257, 0.3430345,
		0.3149452, 0.5607456,
		0.3321322, 0.3512924,
		0.3098452, 0.4064474,
		0.2908899, 0.4648253,
		0.2765194, 0.5225708,
		0.3562192, 0.3025399,
		0.2673647, 0.5762112,
		0.3029833, 0.3106619,
		0.2783189, 0.3635357,
		0.2568934, 0.4214995,
		0.2401759, 0.4809996,
		0.2290669, 0.538298,
		0.3293082, 0.2654849,
		0.2238216, 0.5903598,
		0.2776997, 0.2741355,
		0.2509418, 0.3233991,
		0.2271454, 0.3791126,
		0.2079255, 0.4382977,
		0.1944458, 0.4973733,
		0.1871499, 0.5529818,
		0.3056277, 0.2328808,
		0.1855057, 0.602807,
		0.2567453, 0.242637,
		0.2285687, 0.2877679,
		0.2028839, 0.3399386,
		0.1813396, 0.3969444,
		0.1652786, 0.455735,
		0.155407, 0.5130539,
		0.1516865, 0.5661501,
		0.2860221, 0.2058965,
		0.1537827, 0.6131191,
		0.1796673, 0.6523679,
		0.2160939, 0.6421815,
		0.2586335, 0.6294287,
		0.3062645, 0.6142576,
		0.3568067, 0.5972167,
		0.4075614, 0.5792244,
		0.4559623, 0.5612377,
		0.4999891, 0.5441217,
		0.4999891, 0.5005543,
		0.4999891, 0.5923516,
		0.4538414, 0.6129285,
		0.4999891, 0.6435976,
		0.4036405, 0.633408,
		0.4524373, 0.6669188,
		0.499989, 0.6956112,
		0.3518032, 0.6526051,
		0.4014289, 0.6888154,
		0.4518604, 0.7204915,
		0.499989, 0.7459266,
		0.3497474, 0.7077917,
		0.4011322, 0.7422957,
		0.4521489, 0.7708251,
		0.3012725, 0.6693382,
		0.4999888, 0.7921945,
		0.2546566, 0.6829576,
		0.3002637, 0.7229671,
		0.3505819, 0.7597759,
		0.402565, 0.791208,
		0.453156, 0.8158292,
		0.4999887, 0.8329797,
		0.2138636, 0.6931991,
		0.2555206, 0.7338856,
		0.3030521, 0.7722138,
		0.3539725, 0.8060094,
		0.4054027, 0.8335887,
		0.4547144, 0.8540132,
		0.4196923, 0.8767549,
		0.3648051, 0.8523726,
		0.3785513, 0.8994026,
		0.4361689, 0.9166187,
		0.3947154, 0.9447848,
		0.3304847, 0.9224421,
		0.3453683, 0.9763327,
		0.4199131, 0.9935543,
		0.2744859, 0.9475493,
		0.2654358, 0.8880352,
		0.2058651, 0.9056157,
		0.2044129, 0.8435607,
		0.1448048, 0.8532765,
		0.1519212, 0.7921164,
		0.09555638, 0.7947226,
		0.1103346, 0.7380317,
		0.0561654, 0.7291135,
		0.07925677, 0.6751003,
		0.1246076, 0.6897808,
		0.1007779, 0.6303582,
		0.1384667, 0.6487014,
		0.1204962, 0.593339,
		0.08516264, 0.5682791,
		0.05708915, 0.6068309,
		0.04527265, 0.5376574,
		0.00667733, 0.5767336,
		0.0254029, 0.6548797,
		0, 0.5004919,
		0.04716617, 0.469478,
		0.005443811, 0.4241623,
		0.05945641, 0.397055,
		0.02409524, 0.3459173,
		0.0827651, 0.3252867,
		0.05497742, 0.271648,
		0.1153715, 0.2594704,
		0.09541976, 0.206695,
		0.1538955, 0.2032016,
		0.1456166, 0.1489405,
		0.2040942, 0.1541895,
		0.2041668, 0.2018478,
		0.2532635, 0.1608203,
		0.247479, 0.2023241,
		0.2945273, 0.1681264,
		0.3074374, 0.1267839,
		0.2621314, 0.1120041,
		0.3242349, 0.07938693,
		0.275182, 0.05476303,
		0.2066795, 0.09673015,
		0.3455981, 0.02484682,
		0.3896317, 0.06011856,
		0.4198436, 0.006435299,
		0.4622766, 0.04943065,
		0.4999917, 0,
		0.5377054, 0.04943008,
		0.5801395, 0.006433568,
		0.6103503, 0.06011685,
		0.6543849, 0.02484386,
		0.6757478, 0.0793844,
		0.7248019, 0.05475901,
		0.7378523, 0.1120008,
		0.6925445, 0.1267818,
		0.7467195, 0.1608177,
		0.7054535, 0.168125,
		0.7525029, 0.2023224,
		0.7139583, 0.2058954,
		0.7958184, 0.2018448,
		0.7958918, 0.1541855,
		0.8460944, 0.2031969,
		0.8543736, 0.1489346,
		0.7933068, 0.09672513,
		0.9045768, 0.206688,
		0.8846225, 0.2594651,
		0.9450274, 0.2716396,
		0.9172325, 0.3252813,
		0.9759144, 0.3459088,
		0.9405419, 0.3970504,
		0.9945632, 0.4241561,
		0.9528299, 0.469475,
		0.9999999, 0.500489,
		0.9547203, 0.5376565,
		0.9933176, 0.5767339,
		0.9429008, 0.606832,
		0.9148251, 0.5682793,
		0.8992084, 0.6303596,
		0.8794874, 0.5933394,
		0.8615162, 0.6487027,
		0.846199, 0.6131196,
		0.8753778, 0.6897836,
		0.9207317, 0.6751034,
		0.8896536, 0.7380369,
		0.9438256, 0.7291191,
		0.9745895, 0.6548827,
		0.9044351, 0.7947316,
		0.9152422, 0.5078015,
		0.9069695, 0.4417291,
		0.8896173, 0.3739048,
		0.8638076, 0.3088309,
		0.8316828, 0.2505153,
		0.7848107, 0.2450122,
		0.8154552, 0.2962364,
		0.8419746, 0.3547303,
		0.8623261, 0.4173955,
		0.8752384, 0.4803178,
		0.7432352, 0.242636,
		0.7714125, 0.2877668,
		0.7222796, 0.2741348,
		0.7490377, 0.3233985,
		0.6969954, 0.3106615,
		0.7216599, 0.3635354,
		0.6678462, 0.3512922,
		0.6901333, 0.4064472,
		0.6360325, 0.394123,
		0.6558845, 0.4498549,
		0.6032603, 0.4368697,
		0.6209376, 0.4913214,
		0.5712261, 0.4773858,
		0.587153, 0.5289106,
		0.5413697, 0.5140159,
		0.5440159, 0.5612376,
		0.4999891, 0.5441217,
		0.4999891, 0.5005543,
		0.4999891, 0.5923516,
		0.5461368, 0.6129284,
		0.5924168, 0.5792242,
		0.4999891, 0.6435976,
		0.6357592, 0.544722,
		0.5475408, 0.6669186,
		0.5963377, 0.6334078,
		0.6431717, 0.5972165,
		0.499989, 0.6956112,
		0.6850333, 0.5607454,
		0.5481176, 0.7204912,
		0.5985492, 0.6888151,
		0.648175, 0.6526048,
		0.693714, 0.6142573,
		0.499989, 0.7459266,
		0.732614, 0.576211,
		0.5478289, 0.7708246,
		0.598846, 0.7422951,
		0.6502309, 0.7077914,
		0.6987061, 0.669338,
		0.7413454, 0.6294286,
		0.4999888, 0.7921945,
		0.7761576, 0.5903597,
		0.5468216, 0.815828,
		0.5974132, 0.7912068,
		0.6493968, 0.7597754,
		0.6997153, 0.722967,
		0.7453226, 0.6829576,
		0.7838857, 0.6421816,
		0.4999887, 0.8329797,
		0.8144743, 0.602807,
		0.5452639, 0.8540125,
		0.5945756, 0.8335871,
		0.6460066, 0.8060086,
		0.6969277, 0.772214,
		0.7444595, 0.7338865,
		0.7861168, 0.6931999,
		0.8203134, 0.6523686,
		0.8482949, 0.5661501,
		0.81283, 0.5529816,
		0.7709122, 0.5382978,
		0.7234591, 0.5225707,
		0.6725602, 0.5066304,
		0.7090886, 0.4648251,
		0.7598032, 0.4809993,
		0.7430856, 0.4214992,
		0.8055341, 0.497373,
		0.7920544, 0.4382973,
		0.7728344, 0.379112,
		0.8347036, 0.4557343,
		0.8186425, 0.3969434,
		0.7970978, 0.3399374,
		0.8445747, 0.5130535,
		0.8805431, 0.5397907,
		0.8309166, 0.692686,
		0.8401887, 0.7389992,
		0.8480671, 0.7921235,
		0.8551883, 0.8532891,
		0.7955753, 0.8435687,
		0.7941281, 0.9056293,
		0.7345513, 0.888043,
		0.7255043, 0.9475606,
		0.6694993, 0.9224431,
		0.6546177, 0.9763395,
		0.6052729, 0.9448104,
		0.7946787, 0.7876892,
		0.7407929, 0.8325343,
		0.6816802, 0.8702805,
		0.6214271, 0.8993934,
		0.7916889, 0.7377635,
		0.7442772, 0.7812417,
		0.6909962, 0.8202505,
		0.6351751, 0.8523728,
		0.5802859, 0.8767506,
		0.5638211, 0.9166511,
		0.5358393, 0.9618179,
		0.4999848, 0.9248993,
		0.5290646, 0.8938679,
		0.4998515, 0.893566,
		0.499988, 0.8679984,
		0.4997451, 0.9627932,
		0.4999913, 0.9999999,
		0.5800703, 0.9935572,
		0.5255637, 0.4653202,
		0.4999891, 0.5005543,
		0.5538594, 0.4263452,
		0.5838996, 0.3849724,
		0.6143526, 0.3430344,
		0.6437591, 0.3025397,
		0.6706704, 0.2654845,
		0.6943514, 0.2328801,
		0.4999891, 0.4255874,
		0.4999891, 0.5005543,
		0.4713865, 0.3825844,
		0.5285918, 0.3825844,
		0.5590922, 0.3381916,
		0.4999891, 0.3365209,
		0.4408861, 0.3381917,
		0.5899725, 0.2946858,
		0.5306595, 0.2905219,
		0.4693187, 0.2905219,
		0.4100057, 0.2946859,
		0.6195886, 0.2543964,
		0.5617059, 0.247267,
		0.4999892, 0.2447909,
		0.4382724, 0.2472671,
		0.3803898, 0.2543967,
		0.6465024, 0.2190554,
		0.5914019, 0.2088184,
		0.5310877, 0.2033922,
		0.4688908, 0.2033923,
		0.4085766, 0.2088187,
		0.3534764, 0.2190559,
		0.6699789, 0.1893896,
		0.6183678, 0.1765258,
		0.5608364, 0.1682088,
		0.4999895, 0.165325,
		0.4391426, 0.1682091,
		0.3816114, 0.1765263,
		0.3300007, 0.1893903,
		0.3450935, 0.1505791,
		0.3647906, 0.1076991,
		0.430154, 0.09515526,
		0.4999904, 0.09070719,
		0.5698268, 0.09515451,
		0.6351905, 0.1076977,
		0.4032599, 0.1372501,
		0.4670607, 0.130093,
		0.532919, 0.1300928,
		0.5967201, 0.1372494,
		0.6548869, 0.150578,
		0.08474654, 0.5078027,
		0.09302092, 0.4417314,
		0.1103735, 0.373908,
		0.136182, 0.3088343,
		0.1683044, 0.2505186,
		0.1194413, 0.5397909,
		0.1247466, 0.4803187,
		0.1376591, 0.417397,
		0.1580104, 0.3547321,
		0.1845288, 0.2962383,
		0.2151725, 0.245014,
		0.1690658, 0.6926841,
		0.159796, 0.7389954,
		0.2053059, 0.7876849,
		0.2591912, 0.8325303,
		0.3183031, 0.8702771,
		0.3089845, 0.8202496,
		0.2557043, 0.78124,
		0.2082931, 0.7377614,
		0.499988, 0.8679984,
		0.4709088, 0.8938975,
		0.4999848, 0.9248993,
		0.4640987, 0.9620078,
		0.4999913, 0.9999999,
		0.4998515, 0.893566,
		0.4997451, 0.9627932
	],
	triangles: [
		0, 1, 2,
		3, 1, 0,
		4, 3, 0,
		3, 5, 1,
		6, 3, 4,
		7, 5, 3,
		6, 7, 3,
		8, 6, 4,
		7, 9, 5,
		10, 6, 8,
		11, 7, 6,
		10, 11, 6,
		12, 9, 7,
		11, 12, 7,
		13, 10, 8,
		12, 14, 9,
		15, 10, 13,
		16, 11, 10,
		15, 16, 10,
		17, 12, 11,
		16, 17, 11,
		18, 14, 12,
		17, 18, 12,
		19, 15, 13,
		18, 20, 14,
		21, 15, 19,
		22, 16, 15,
		21, 22, 15,
		23, 17, 16,
		22, 23, 16,
		24, 18, 17,
		23, 24, 17,
		25, 20, 18,
		24, 25, 18,
		26, 21, 19,
		25, 27, 20,
		28, 21, 26,
		29, 22, 21,
		28, 29, 21,
		30, 23, 22,
		29, 30, 22,
		31, 24, 23,
		30, 31, 23,
		32, 25, 24,
		31, 32, 24,
		33, 27, 25,
		32, 33, 25,
		34, 28, 26,
		33, 35, 27,
		36, 28, 34,
		37, 29, 28,
		36, 37, 28,
		38, 30, 29,
		37, 38, 29,
		39, 31, 30,
		38, 39, 30,
		40, 32, 31,
		39, 40, 31,
		41, 33, 32,
		40, 41, 32,
		42, 35, 33,
		41, 42, 33,
		43, 36, 34,
		42, 44, 35,
		44, 45, 35,
		45, 46, 35,
		35, 46, 27,
		46, 47, 27,
		27, 47, 20,
		47, 48, 20,
		20, 48, 14,
		48, 49, 14,
		14, 49, 9,
		49, 50, 9,
		9, 50, 5,
		50, 51, 5,
		5, 51, 1,
		51, 52, 1,
		1, 52, 53,
		51, 54, 52,
		55, 54, 51,
		50, 55, 51,
		55, 56, 54,
		57, 55, 50,
		49, 57, 50,
		58, 56, 55,
		57, 58, 55,
		58, 59, 56,
		60, 57, 49,
		61, 58, 57,
		60, 61, 57,
		62, 59, 58,
		61, 62, 58,
		62, 63, 59,
		64, 61, 60,
		65, 62, 61,
		64, 65, 61,
		66, 63, 62,
		65, 66, 62,
		67, 64, 60,
		67, 60, 48,
		48, 60, 49,
		47, 67, 48,
		66, 68, 63,
		69, 67, 47,
		70, 64, 67,
		69, 70, 67,
		71, 65, 64,
		70, 71, 64,
		72, 66, 65,
		71, 72, 65,
		73, 68, 66,
		72, 73, 66,
		46, 69, 47,
		73, 74, 68,
		75, 69, 46,
		76, 70, 69,
		75, 76, 69,
		77, 71, 70,
		76, 77, 70,
		78, 72, 71,
		77, 78, 71,
		79, 73, 72,
		78, 79, 72,
		80, 74, 73,
		79, 80, 73,
		45, 75, 46,
		80, 79, 81,
		79, 82, 81,
		79, 78, 82,
		81, 82, 83,
		81, 83, 84,
		84, 83, 85,
		83, 86, 85,
		85, 86, 87,
		87, 88, 85,
		86, 89, 87,
		86, 90, 89,
		90, 91, 89,
		90, 92, 91,
		92, 93, 91,
		92, 94, 93,
		94, 95, 93,
		94, 96, 95,
		97, 95, 96,
		97, 96, 98,
		98, 96, 99,
		98, 99, 100,
		100, 99, 101,
		100, 101, 102,
		102, 101, 44,
		103, 100, 102,
		104, 100, 103,
		104, 98, 100,
		105, 104, 103,
		106, 104, 105,
		107, 98, 104,
		106, 107, 104,
		107, 97, 98,
		108, 106, 105,
		105, 109, 108,
		109, 110, 108,
		109, 111, 110,
		111, 112, 110,
		111, 113, 112,
		113, 114, 112,
		113, 115, 114,
		115, 116, 114,
		115, 117, 116,
		118, 116, 117,
		118, 117, 119,
		119, 117, 120,
		119, 120, 121,
		121, 120, 122,
		121, 122, 123,
		123, 122, 43,
		124, 121, 123,
		125, 121, 124,
		125, 119, 121,
		126, 125, 124,
		127, 125, 126,
		128, 119, 125,
		127, 128, 125,
		128, 118, 119,
		129, 127, 126,
		126, 130, 129,
		130, 131, 129,
		130, 132, 131,
		132, 133, 131,
		132, 134, 133,
		134, 135, 133,
		134, 136, 135,
		136, 137, 135,
		136, 138, 137,
		139, 137, 138,
		139, 138, 140,
		140, 138, 141,
		140, 141, 142,
		142, 141, 143,
		142, 143, 144,
		144, 143, 145,
		146, 142, 144,
		147, 142, 146,
		147, 140, 142,
		148, 147, 146,
		149, 147, 148,
		150, 140, 147,
		149, 150, 147,
		150, 139, 140,
		151, 149, 148,
		148, 152, 151,
		152, 153, 151,
		152, 154, 153,
		154, 155, 153,
		154, 156, 155,
		156, 157, 155,
		156, 158, 157,
		158, 159, 157,
		158, 160, 159,
		161, 159, 160,
		161, 160, 162,
		162, 160, 163,
		162, 163, 164,
		164, 163, 165,
		164, 165, 166,
		166, 165, 167,
		168, 164, 166,
		169, 164, 168,
		169, 162, 164,
		170, 169, 168,
		171, 169, 170,
		172, 162, 169,
		171, 172, 169,
		172, 161, 162,
		173, 171, 170,
		174, 160, 158,
		174, 163, 160,
		175, 174, 158,
		175, 158, 156,
		176, 175, 156,
		176, 156, 154,
		177, 176, 154,
		177, 154, 152,
		178, 177, 152,
		178, 152, 148,
		146, 178, 148,
		179, 178, 146,
		180, 177, 178,
		179, 180, 178,
		181, 176, 177,
		180, 181, 177,
		182, 175, 176,
		181, 182, 176,
		183, 174, 175,
		182, 183, 175,
		144, 179, 146,
		184, 179, 144,
		185, 180, 179,
		184, 185, 179,
		185, 184, 186,
		185, 186, 187,
		187, 186, 188,
		187, 188, 189,
		189, 188, 190,
		189, 190, 191,
		191, 190, 192,
		191, 192, 193,
		193, 192, 194,
		193, 194, 195,
		195, 194, 196,
		195, 196, 197,
		197, 196, 198,
		199, 197, 198,
		199, 198, 200,
		200, 198, 201,
		202, 199, 200,
		203, 199, 202,
		204, 197, 199,
		203, 204, 199,
		205, 203, 202,
		204, 206, 197,
		206, 195, 197,
		207, 203, 205,
		208, 204, 203,
		207, 208, 203,
		209, 206, 204,
		208, 209, 204,
		210, 207, 205,
		209, 211, 206,
		212, 207, 210,
		213, 208, 207,
		212, 213, 207,
		214, 209, 208,
		213, 214, 208,
		215, 211, 209,
		214, 215, 209,
		216, 212, 210,
		215, 217, 211,
		218, 212, 216,
		219, 213, 212,
		218, 219, 212,
		220, 214, 213,
		219, 220, 213,
		221, 215, 214,
		220, 221, 214,
		222, 217, 215,
		221, 222, 215,
		223, 218, 216,
		222, 224, 217,
		225, 218, 223,
		226, 219, 218,
		225, 226, 218,
		227, 220, 219,
		226, 227, 219,
		228, 221, 220,
		227, 228, 220,
		229, 222, 221,
		228, 229, 221,
		230, 224, 222,
		229, 230, 222,
		231, 225, 223,
		230, 232, 224,
		233, 225, 231,
		234, 226, 225,
		233, 234, 225,
		235, 227, 226,
		234, 235, 226,
		236, 228, 227,
		235, 236, 227,
		237, 229, 228,
		236, 237, 228,
		238, 230, 229,
		237, 238, 229,
		239, 232, 230,
		238, 239, 230,
		239, 167, 232,
		167, 240, 232,
		240, 241, 232,
		232, 241, 224,
		241, 242, 224,
		224, 242, 217,
		242, 243, 217,
		217, 243, 211,
		243, 244, 211,
		211, 244, 206,
		244, 195, 206,
		244, 193, 195,
		245, 193, 244,
		243, 245, 244,
		245, 191, 193,
		246, 245, 243,
		242, 246, 243,
		247, 191, 245,
		246, 247, 245,
		247, 189, 191,
		248, 246, 242,
		241, 248, 242,
		249, 247, 246,
		248, 249, 246,
		250, 189, 247,
		249, 250, 247,
		250, 187, 189,
		251, 249, 248,
		252, 250, 249,
		251, 252, 249,
		253, 187, 250,
		252, 253, 250,
		254, 251, 248,
		254, 248, 241,
		240, 254, 241,
		253, 185, 187,
		185, 253, 180,
		253, 181, 180,
		253, 252, 181,
		252, 182, 181,
		252, 251, 182,
		251, 183, 182,
		251, 254, 183,
		254, 255, 183,
		254, 240, 255,
		183, 255, 174,
		255, 163, 174,
		255, 165, 163,
		240, 165, 255,
		240, 167, 165,
		167, 239, 166,
		239, 256, 166,
		166, 256, 168,
		256, 257, 168,
		168, 257, 170,
		257, 258, 170,
		170, 258, 173,
		258, 259, 173,
		258, 260, 259,
		260, 261, 259,
		260, 262, 261,
		262, 263, 261,
		262, 264, 263,
		264, 265, 263,
		264, 266, 265,
		267, 260, 258,
		257, 267, 258,
		268, 262, 260,
		267, 268, 260,
		269, 264, 262,
		268, 269, 262,
		270, 266, 264,
		269, 270, 264,
		271, 267, 257,
		272, 268, 267,
		271, 272, 267,
		273, 269, 268,
		272, 273, 268,
		274, 270, 269,
		273, 274, 269,
		256, 271, 257,
		274, 275, 270,
		238, 271, 256,
		237, 272, 271,
		238, 237, 271,
		236, 273, 272,
		237, 236, 272,
		235, 274, 273,
		236, 235, 273,
		234, 275, 274,
		235, 234, 274,
		239, 238, 256,
		234, 233, 275,
		275, 276, 270,
		270, 276, 266,
		277, 266, 276,
		277, 276, 278,
		278, 276, 279,
		275, 279, 276,
		233, 279, 275,
		280, 278, 279,
		281, 280, 279,
		233, 281, 279,
		281, 233, 231,
		278, 282, 277,
		282, 283, 277,
		284, 266, 277,
		283, 284, 277,
		284, 265, 266,
		198, 285, 286,
		196, 285, 198,
		196, 287, 285,
		194, 287, 196,
		194, 288, 287,
		192, 288, 194,
		192, 289, 288,
		190, 289, 192,
		190, 290, 289,
		188, 290, 190,
		188, 291, 290,
		186, 291, 188,
		186, 292, 291,
		184, 292, 186,
		184, 145, 292,
		287, 293, 285,
		293, 0, 285,
		285, 0, 294,
		293, 4, 0,
		295, 4, 293,
		296, 295, 293,
		296, 293, 287,
		288, 296, 287,
		295, 8, 4,
		297, 296, 288,
		298, 295, 296,
		297, 298, 296,
		299, 8, 295,
		298, 299, 295,
		289, 297, 288,
		299, 13, 8,
		300, 297, 289,
		301, 298, 297,
		300, 301, 297,
		302, 299, 298,
		301, 302, 298,
		303, 13, 299,
		302, 303, 299,
		290, 300, 289,
		303, 19, 13,
		304, 300, 290,
		305, 301, 300,
		304, 305, 300,
		306, 302, 301,
		305, 306, 301,
		307, 303, 302,
		306, 307, 302,
		308, 19, 303,
		307, 308, 303,
		291, 304, 290,
		308, 26, 19,
		309, 304, 291,
		310, 305, 304,
		309, 310, 304,
		311, 306, 305,
		310, 311, 305,
		312, 307, 306,
		311, 312, 306,
		313, 308, 307,
		312, 313, 307,
		314, 26, 308,
		313, 314, 308,
		292, 309, 291,
		314, 34, 26,
		315, 309, 292,
		316, 310, 309,
		315, 316, 309,
		317, 311, 310,
		316, 317, 310,
		318, 312, 311,
		317, 318, 311,
		319, 313, 312,
		318, 319, 312,
		320, 314, 313,
		319, 320, 313,
		321, 34, 314,
		320, 321, 314,
		145, 315, 292,
		321, 43, 34,
		43, 321, 123,
		321, 322, 123,
		321, 320, 322,
		123, 322, 124,
		322, 323, 124,
		124, 323, 126,
		323, 130, 126,
		323, 324, 130,
		324, 132, 130,
		324, 325, 132,
		325, 134, 132,
		325, 326, 134,
		326, 136, 134,
		326, 327, 136,
		327, 138, 136,
		327, 141, 138,
		328, 324, 323,
		322, 328, 323,
		329, 325, 324,
		328, 329, 324,
		330, 326, 325,
		329, 330, 325,
		331, 327, 326,
		330, 331, 326,
		332, 141, 327,
		331, 332, 327,
		332, 143, 141,
		319, 329, 328,
		318, 330, 329,
		319, 318, 329,
		317, 331, 330,
		318, 317, 330,
		316, 332, 331,
		317, 316, 331,
		315, 143, 332,
		316, 315, 332,
		320, 319, 328,
		320, 328, 322,
		315, 145, 143,
		145, 184, 144,
		333, 109, 105,
		103, 333, 105,
		333, 334, 109,
		334, 111, 109,
		334, 335, 111,
		335, 113, 111,
		335, 336, 113,
		336, 115, 113,
		336, 337, 115,
		337, 117, 115,
		337, 120, 117,
		338, 333, 103,
		339, 334, 333,
		338, 339, 333,
		340, 335, 334,
		339, 340, 334,
		341, 336, 335,
		340, 341, 335,
		342, 337, 336,
		341, 342, 336,
		343, 120, 337,
		342, 343, 337,
		102, 338, 103,
		343, 122, 120,
		42, 338, 102,
		41, 339, 338,
		42, 41, 338,
		40, 340, 339,
		41, 40, 339,
		39, 341, 340,
		40, 39, 340,
		38, 342, 341,
		39, 38, 341,
		37, 343, 342,
		38, 37, 342,
		36, 122, 343,
		37, 36, 343,
		44, 42, 102,
		36, 43, 122,
		45, 44, 101,
		45, 101, 344,
		344, 101, 99,
		344, 99, 345,
		345, 99, 96,
		345, 96, 94,
		346, 345, 94,
		346, 94, 92,
		347, 346, 92,
		347, 92, 90,
		348, 347, 90,
		348, 90, 86,
		83, 348, 86,
		82, 348, 83,
		349, 347, 348,
		82, 349, 348,
		350, 346, 347,
		349, 350, 347,
		351, 345, 346,
		350, 351, 346,
		351, 344, 345,
		78, 349, 82,
		77, 350, 349,
		78, 77, 349,
		76, 351, 350,
		77, 76, 350,
		76, 75, 351,
		75, 344, 351,
		75, 45, 344,
		80, 352, 74,
		352, 80, 353,
		80, 81, 353,
		353, 81, 84,
		84, 354, 353,
		355, 354, 84,
		85, 355, 84,
		88, 355, 85,
		88, 356, 355,
		357, 352, 353,
		354, 357, 353,
		358, 354, 355,
		356, 358, 355
	],
	normals: [
		0.07383534, -0.9920789, -0.1016258,
		0.1194681, -0.992079, 0.03881736,
		0, -1, 0,
		0.2037204, -0.9767888, -0.06619292,
		0.1504572, -0.966684, -0.2070859,
		0.2434447, -0.9666839, 0.0791003,
		0.2900958, -0.9409217, -0.1746732,
		0.3373627, -0.9409217, -0.02920019,
		0.2305321, -0.919878, -0.3173001,
		0.3730088, -0.919878, 0.1211979,
		0.3756484, -0.8813244, -0.2866278,
		0.4293835, -0.8922809, -0.1395151,
		0.4723814, -0.8813245, 0.01108592,
		0.3090169, -0.850651, -0.4253252,
		0.4999999, -0.8506509, 0.1624597,
		0.4539095, -0.7990363, -0.3943441,
		0.5151172, -0.8193403, -0.2516658,
		0.5646641, -0.8193403, -0.09917583,
		0.5990102, -0.7990361, 0.05223009,
		0.3805115, -0.7621806, -0.5237287,
		0.6156803, -0.7621804, 0.2000468,
		0.5195113, -0.6997002, -0.4904362,
		0.5877785, -0.7257348, -0.3575267,
		0.6448326, -0.7350462, -0.2095186,
		0.6856718, -0.7257349, -0.05624226,
		0.7085645, -0.6997002, 0.09141054,
		0.4409293, -0.6612632, -0.6068874,
		0.7134386, -0.6612635, 0.2318105,
		0.5698355, -0.5918328, -0.5701066,
		0.6432576, -0.6192846, -0.4502289,
		0.7071597, -0.6344642, -0.312058,
		0.7555274, -0.6344643, -0.1631975,
		0.7850443, -0.6192847, -0.01385426,
		0.7961066, -0.5918329, 0.1262858,
		0.4885464, -0.5560256, -0.6724269,
		0.790485, -0.5560258, 0.2568438,
		0.6080147, -0.4783907, -0.633609,
		0.6843741, -0.5030631, -0.5277874,
		0.7535205, -0.5197842, -0.4025312,
		0.8090176, -0.5257301, -0.2628656,
		0.8462127, -0.5197841, -0.1172539,
		0.8638958, -0.5030633, 0.02472432,
		0.86432, -0.4783912, 0.1552182,
		0.5257309, -0.4472135, -0.7236069,
		0.8506507, -0.4472141, 0.2763926,
		0.7904849, -0.4783909, 0.3824601,
		0.7182924, -0.5918331, 0.3657726,
		0.6269704, -0.6997002, 0.3425314,
		0.5153098, -0.799036, 0.3098342,
		0.3886807, -0.8813245, 0.26869,
		0.2557685, -0.9409218, 0.2219202,
		0.1259061, -0.9767888, 0.1732951,
		0, -0.9920789, 0.1256161,
		0, -1, 0,
		0, -0.966684, 0.255973,
		0.1320221, -0.9409218, 0.3118274,
		0, -0.9198779, 0.3922047,
		0.2653735, -0.8922809, 0.3652555,
		0.1354306, -0.8813244, 0.4526872,
		0, -0.8506508, 0.5257311,
		0.3985283, -0.8193403, 0.4121366,
		0.2688128, -0.8193404, 0.5063803,
		0.1354305, -0.7990362, 0.5858325,
		0, -0.7621806, 0.6473644,
		0.3985285, -0.7350458, 0.5485277,
		0.2653741, -0.7257347, 0.6347328,
		0.132022, -0.6997001, 0.7021324,
		0.5216618, -0.7257344, 0.4485293,
		0, -0.6612634, 0.7501538,
		0.6269701, -0.6192849, 0.4726465,
		0.5153089, -0.6344645, 0.5761176,
		0.3886809, -0.6344643, 0.6681184,
		0.2557688, -0.6192848, 0.74234,
		0.1259061, -0.5918331, 0.7961667,
		0, -0.5560257, 0.8311651,
		0.7134389, -0.5030631, 0.4877832,
		0.61568, -0.5197847, 0.5922515,
		0.4999999, -0.5257314, 0.6881908,
		0.3730086, -0.5197847, 0.7685626,
		0.2434453, -0.5030632, 0.8292537,
		0.1194682, -0.4783905, 0.8699827,
		0.2037207, -0.3776288, 0.9032687,
		0.3373629, -0.3946754, 0.8546447,
		0.2900963, -0.2645607, 0.9197021,
		0.1504574, -0.2470904, 0.9572402,
		0.2305323, -0.1275797, 0.9646649,
		0.3756488, -0.1377726, 0.9164642,
		0.3105723, -0.05870957, 0.948735,
		0.1560722, -0.05762485, 0.9860633,
		0.4528624, -0.06275863, 0.889369,
		0.5151171, -0.1413235, 0.8453887,
		0.5865949, -0.06361663, 0.807378,
		0.6448326, -0.1413234, 0.7511449,
		0.7058983, -0.06275776, 0.7055275,
		0.7555274, -0.1377726, 0.6404662,
		0.8063285, -0.05870892, 0.5885471,
		0.8462126, -0.1275803, 0.5173464,
		0.8895732, -0.05762486, 0.4531434,
		0.9170663, -0.1257444, 0.3783884,
		0.8638959, -0.2470903, 0.4388966,
		0.9220127, -0.2452428, 0.2995803,
		0.8643205, -0.3527738, 0.3584701,
		0.909953, -0.3527749, 0.218026,
		0.9568835, -0.2470904, 0.1527098,
		0.9643334, -0.1257441, 0.2329155,
		0.9886892, -0.12758, 0.07884855,
		0.986031, -0.0576253, 0.1562763,
		0.9494396, -0.05828413, 0.3084921,
		0.9982727, -0.05870948, -0.002196348,
		0.9876912, -0.1377726, -0.07405968,
		0.9857823, -0.06275877, -0.1558674,
		0.9631924, -0.1413234, -0.2286658,
		0.9491301, -0.06361575, -0.3083912,
		0.9136453, -0.141323, -0.3811562,
		0.8891309, -0.06275786, -0.4533295,
		0.84259, -0.1377723, -0.520635,
		0.8089109, -0.05871004, -0.5849926,
		0.7535205, -0.1275803, -0.6449265,
		0.7058588, -0.05762572, -0.7060047,
		0.6432578, -0.1257444, -0.7552534,
		0.6843743, -0.2470902, -0.6859871,
		0.5698351, -0.2452432, -0.784311,
		0.6080144, -0.3527747, -0.7112444,
		0.4885461, -0.3527746, -0.7980431,
		0.4409297, -0.2470906, -0.8628599,
		0.5195113, -0.1257445, -0.8451605,
		0.380511, -0.1275799, -0.9159338,
		0.453328, -0.0576251, -0.889479,
		0.5867859, -0.05828448, -0.8076417,
		0.3063933, -0.05870904, -0.9500929,
		0.2347779, -0.137772, -0.962236,
		0.1563848, -0.06275778, -0.9857004,
		0.0801688, -0.1413228, -0.9867122,
		0, -0.06361541, -0.9979745,
		-0.08016872, -0.1413235, -0.986712,
		-0.156385, -0.06275786, -0.9857004,
		-0.2347783, -0.137773, -0.9622357,
		-0.3063947, -0.05870939, -0.9500924,
		-0.3805109, -0.1275798, -0.9159339,
		-0.4533277, -0.05762381, -0.8894793,
		-0.5195113, -0.1257442, -0.8451605,
		-0.4409293, -0.247091, -0.86286,
		-0.5698356, -0.2452437, -0.7843105,
		-0.4885466, -0.3527746, -0.7980428,
		-0.6080146, -0.352774, -0.7112445,
		-0.525731, -0.4472135, -0.7236069,
		-0.6843736, -0.2470907, -0.6859876,
		-0.643258, -0.1257447, -0.7552533,
		-0.75352, -0.1275801, -0.6449271,
		-0.7058586, -0.05762467, -0.706005,
		-0.5867863, -0.05828337, -0.8076416,
		-0.8089109, -0.05870899, -0.5849926,
		-0.8425904, -0.1377725, -0.5206344,
		-0.8891312, -0.06275763, -0.4533289,
		-0.9136457, -0.1413233, -0.3811553,
		-0.9491302, -0.06361639, -0.3083909,
		-0.9631924, -0.1413236, -0.2286656,
		-0.9857823, -0.06275856, -0.1558676,
		-0.9876911, -0.1377729, -0.07405999,
		-0.9982727, -0.0587093, -0.002196471,
		-0.9886891, -0.12758, 0.07884901,
		-0.9860309, -0.05762414, 0.1562771,
		-0.9643332, -0.1257444, 0.2329157,
		-0.9568834, -0.2470905, 0.1527106,
		-0.9220126, -0.2452434, 0.2995803,
		-0.9099531, -0.3527742, 0.2180271,
		-0.8643204, -0.3527742, 0.3584699,
		-0.8506508, -0.4472132, 0.2763937,
		-0.8638959, -0.2470903, 0.4388966,
		-0.9170662, -0.1257447, 0.3783885,
		-0.8462127, -0.1275797, 0.5173466,
		-0.8895729, -0.05762456, 0.453144,
		-0.9494397, -0.05828345, 0.3084919,
		-0.8063288, -0.05870874, 0.5885466,
		-0.9643334, -0.2645605, 0.00830608,
		-0.9510455, -0.2742542, -0.1424676,
		-0.9136455, -0.2777144, -0.2968613,
		-0.8531526, -0.2742543, -0.4437513,
		-0.7752798, -0.2645606, -0.5735407,
		-0.6957413, -0.3776284, -0.6110162,
		-0.7752802, -0.3946756, -0.4931246,
		-0.8425907, -0.4040553, -0.3560621,
		-0.8909584, -0.404055, -0.2072019,
		-0.9170664, -0.3946752, -0.05675122,
		-0.6080144, -0.4783906, -0.6336095,
		-0.6843741, -0.5030635, -0.5277871,
		-0.569835, -0.591833, -0.5701069,
		-0.6432578, -0.6192848, -0.4502285,
		-0.5195112, -0.6997002, -0.4904361,
		-0.5877786, -0.7257348, -0.3575267,
		-0.4539092, -0.7990363, -0.3943442,
		-0.515117, -0.8193403, -0.2516661,
		-0.3756483, -0.8813245, -0.2866277,
		-0.4293834, -0.8922811, -0.1395151,
		-0.2900958, -0.9409217, -0.1746734,
		-0.3373627, -0.9409217, -0.02920049,
		-0.2037204, -0.9767889, -0.06619295,
		-0.2434447, -0.966684, 0.07910019,
		-0.1194681, -0.992079, 0.03881734,
		-0.1259061, -0.9767889, 0.1732947,
		0, -0.9920789, 0.1256161,
		0, -1, 0,
		0, -0.966684, 0.255973,
		-0.1320222, -0.9409218, 0.3118273,
		-0.2557686, -0.9409217, 0.2219205,
		0, -0.9198779, 0.3922047,
		-0.3730087, -0.9198781, 0.1211977,
		-0.1354306, -0.8813245, 0.4526872,
		-0.2653737, -0.8922809, 0.3652555,
		-0.3886806, -0.8813245, 0.2686903,
		0, -0.8506508, 0.5257311,
		-0.4999997, -0.8506509, 0.1624599,
		-0.1354305, -0.7990363, 0.5858324,
		-0.2688131, -0.8193404, 0.5063801,
		-0.3985286, -0.8193404, 0.4121362,
		-0.5153093, -0.7990363, 0.3098344,
		0, -0.7621806, 0.6473644,
		-0.6156805, -0.7621804, 0.2000465,
		-0.1320222, -0.6997002, 0.7021322,
		-0.265374, -0.7257347, 0.6347328,
		-0.3985288, -0.7350459, 0.5485274,
		-0.5216618, -0.7257347, 0.448529,
		-0.6269705, -0.6997002, 0.3425312,
		0, -0.6612634, 0.7501538,
		-0.7134389, -0.6612632, 0.2318101,
		-0.1259064, -0.5918328, 0.7961668,
		-0.255769, -0.6192845, 0.7423401,
		-0.3886814, -0.6344642, 0.6681182,
		-0.5153095, -0.6344643, 0.5761173,
		-0.6269702, -0.619285, 0.4726461,
		-0.7182927, -0.5918326, 0.3657728,
		0, -0.5560257, 0.8311651,
		-0.7904851, -0.5560254, 0.2568441,
		-0.1194686, -0.4783902, 0.8699828,
		-0.2434446, -0.5030632, 0.8292539,
		-0.3730088, -0.5197845, 0.7685626,
		-0.5, -0.5257309, 0.6881911,
		-0.6156801, -0.5197845, 0.5922518,
		-0.7134389, -0.5030633, 0.4877831,
		-0.7904852, -0.4783903, 0.3824602,
		-0.8643205, -0.4783902, 0.1552184,
		-0.7961067, -0.5918329, 0.126285,
		-0.7085648, -0.6997001, 0.0914103,
		-0.5990103, -0.7990361, 0.05222997,
		-0.4723813, -0.8813246, 0.01108577,
		-0.564664, -0.8193404, -0.09917613,
		-0.685672, -0.7257346, -0.05624252,
		-0.6448327, -0.7350459, -0.2095191,
		-0.7850443, -0.6192848, -0.0138546,
		-0.7555272, -0.6344644, -0.1631979,
		-0.7071595, -0.6344644, -0.3120585,
		-0.8462128, -0.519784, -0.1172536,
		-0.809017, -0.5257309, -0.262866,
		-0.7535204, -0.5197844, -0.4025309,
		-0.8638961, -0.503063, 0.02472395,
		-0.9220127, -0.3776288, 0.08537602,
		-0.7961069, -0.3776287, 0.4728748,
		-0.7850446, -0.2645605, 0.5601007,
		-0.7555277, -0.1377725, 0.6404659,
		-0.7058978, -0.06275869, 0.7055278,
		-0.6448325, -0.1413231, 0.751145,
		-0.5865945, -0.06361668, 0.8073783,
		-0.515117, -0.1413231, 0.8453888,
		-0.4528619, -0.06275808, 0.8893692,
		-0.3756483, -0.1377727, 0.9164644,
		-0.3105718, -0.05870966, 0.9487351,
		-0.2305323, -0.1275802, 0.9646648,
		-0.6856716, -0.2742544, 0.6742694,
		-0.5646639, -0.2777148, 0.7771932,
		-0.4293835, -0.2742541, 0.8604734,
		-0.2900954, -0.2645603, 0.9197024,
		-0.7085644, -0.3946753, 0.5849513,
		-0.5990097, -0.404056, 0.691322,
		-0.4723816, -0.404056, 0.7833227,
		-0.3373626, -0.3946755, 0.8546448,
		-0.20372, -0.3776286, 0.903269,
		-0.1504575, -0.2470907, 0.9572402,
		-0.09155693, -0.1253532, 0.9878784,
		0, -0.246208, 0.9692171,
		-0.08664479, -0.3527703, 0.9316897,
		0, -0.3524564, 0.9358283,
		0, -0.4545479, 0.8907223,
		0, -0.1280179, 0.9917719,
		0, -0.05199641, 0.9986473,
		-0.1560723, -0.05762475, 0.9860633,
		-0.07383531, -0.9920789, -0.101626,
		0, -1, 0,
		-0.1504571, -0.966684, -0.2070862,
		-0.2305321, -0.919878, -0.3173001,
		-0.3090168, -0.8506511, -0.4253251,
		-0.3805113, -0.7621805, -0.523729,
		-0.4409291, -0.6612633, -0.6068875,
		-0.488546, -0.5560257, -0.6724271,
		0, -0.9767888, -0.2142046,
		0, -1, 0,
		0.0764796, -0.9409218, -0.3298741,
		-0.07647949, -0.9409218, -0.3298743,
		-0.1565172, -0.8813246, -0.4458356,
		0, -0.892281, -0.4514804,
		0.1565174, -0.8813246, -0.4458354,
		-0.2347777, -0.7990362, -0.5535526,
		-0.08016851, -0.8193405, -0.5676744,
		0.08016878, -0.8193405, -0.5676743,
		0.2347782, -0.7990363, -0.5535522,
		-0.3058945, -0.6996999, -0.6456382,
		-0.1583942, -0.7257345, -0.6694928,
		0, -0.735046, -0.6780173,
		0.1583945, -0.7257347, -0.6694927,
		0.305895, -0.6997, -0.6456379,
		-0.3661147, -0.5918328, -0.7181184,
		-0.2294151, -0.6192848, -0.7509028,
		-0.07826076, -0.6344644, -0.76898,
		0.07826071, -0.6344644, -0.76898,
		0.2294153, -0.6192849, -0.7509028,
		0.3661148, -0.5918329, -0.7181182,
		-0.4147108, -0.4783907, -0.7740525,
		-0.2904726, -0.5030632, -0.8139736,
		-0.1499795, -0.5197846, -0.8410292,
		0, -0.5257313, -0.8506507,
		0.149979, -0.5197849, -0.8410292,
		0.2904725, -0.5030635, -0.8139734,
		0.4147112, -0.4783907, -0.7740523,
		0.3661152, -0.3776287, -0.8505036,
		0.3058952, -0.2645605, -0.9145687,
		0.1583943, -0.2742537, -0.9485232,
		0, -0.2777145, -0.9606637,
		-0.1583948, -0.2742542, -0.9485229,
		-0.3058944, -0.2645607, -0.9145689,
		0.2294151, -0.3946754, -0.8897191,
		0.07826041, -0.4040557, -0.9113804,
		-0.07826109, -0.4040554, -0.9113805,
		-0.2294156, -0.394675, -0.8897191,
		-0.3661148, -0.3776291, -0.8505036,
		0.9643334, -0.2645604, 0.008306011,
		0.9510456, -0.2742538, -0.1424677,
		0.9136453, -0.2777153, -0.2968611,
		0.8531522, -0.2742542, -0.4437523,
		0.7752801, -0.26456, -0.5735406,
		0.9220126, -0.3776291, 0.08537588,
		0.9170663, -0.3946753, -0.0567517,
		0.890958, -0.4040557, -0.2072022,
		0.8425903, -0.404056, -0.3560622,
		0.7752799, -0.3946752, -0.4931253,
		0.6957415, -0.3776286, -0.6110159,
		0.7961069, -0.3776283, 0.4728749,
		0.7850443, -0.2645608, 0.560101,
		0.6856716, -0.2742541, 0.6742693,
		0.5646642, -0.2777142, 0.7771931,
		0.4293841, -0.274254, 0.8604732,
		0.4723815, -0.4040556, 0.7833229,
		0.5990105, -0.4040555, 0.6913217,
		0.7085645, -0.3946751, 0.5849512,
		0, -0.4545479, 0.8907223,
		0.08679011, -0.3527701, 0.9316763,
		0, -0.246208, 0.9692171,
		0.09183914, -0.1253453, 0.9878533,
		0, -0.05199641, 0.9986473,
		0, -0.3524564, 0.9358283,
		0, -0.1280179, 0.9917719
	],
	tangents: [
		0.8090167, -1.772035E-07, 0.5877857, -1,
		-0.309017, -1.598021E-07, 0.9510565, -1,
		0.3090168, 0, 0.9510566, -1,
		0.3090168, -2.054037E-07, 0.9510566, -1,
		0.8090166, 2.194861E-07, 0.5877857, -1,
		-0.3090171, 2.844524E-07, 0.9510565, -1,
		0.5214649, 0.002371611, 0.8532694, -1,
		0.07966477, -0.002371477, 0.9968189, -1,
		0.809017, 4.180679E-08, 0.5877852, -1,
		-0.3090171, -5.213506E-08, 0.9510565, -1,
		0.6090305, 0.001638359, 0.7931451, -1,
		0.3090166, -1.33309E-07, 0.9510567, -1,
		-0.02651667, -0.001638416, 0.999647, -1,
		0.8090168, -1.576775E-07, 0.5877855, -1,
		-0.3090173, -2.887304E-07, 0.9510564, -1,
		0.6571877, 0.00134717, 0.7537258, -1,
		0.4401566, 0.0009230899, 0.8979205, -1,
		0.17169, -0.0009226262, 0.9851506, -1,
		-0.08864778, -0.001347263, 0.9960621, -1,
		0.8090167, -1.241591E-07, 0.5877857, -1,
		-0.3090175, -2.781455E-07, 0.9510564, -1,
		0.6872451, 0.001095545, 0.7264248, -1,
		0.5206223, 0.001046075, 0.8537865, -1,
		0.3090171, 3.413262E-07, 0.9510565, -1,
		0.08065062, -0.00104605, 0.9967419, -1,
		-0.129012, -0.001095892, 0.9916424, -1,
		0.8090171, -7.390614E-08, 0.5877851, -1,
		-0.3090173, -9.977684E-09, 0.9510564, -1,
		0.7076952, 0.0008103058, 0.7065174, -1,
		0.5740014, 0.0009028488, 0.8188538, -1,
		0.4040465, 0.0004318513, 0.9147383, -1,
		0.2107892, -0.0004313958, 0.9775314, -1,
		0.01693263, -0.0009033067, 0.9998562, -1,
		-0.1572579, -0.0008103165, 0.9875572, -1,
		0.8090172, -2.816926E-09, 0.5877849, -1,
		-0.3090167, -1.162015E-07, 0.9510566, -1,
		0.7218264, 0.0007878023, 0.6920738, -1,
		0.6110167, 0.0007123207, 0.7916174, -1,
		0.4714346, 0.0004675435, 0.8819009, -1,
		0.309017, 2.646714E-07, 0.9510565, -1,
		0.1369698, -0.0004678827, 0.9905751, -1,
		-0.02902235, -0.0007124201, 0.9995785, -1,
		-0.1771787, -0.0007873942, 0.9841784, -1,
		0.8090171, -1.833069E-07, 0.5877851, -1,
		-0.3090165, -1.955647E-07, 0.9510567, -1,
		-0.4351445, 0.0007875568, 0.9003603, -1,
		-0.4532475, 0.0008105151, 0.8913843, -1,
		-0.4785004, 0.001095655, 0.8780866, -1,
		-0.5137534, 0.001346674, 0.8579369, -1,
		-0.5661255, 0.001638269, 0.8243175, -1,
		-0.6503657, 0.002371577, 0.7596176, -1,
		-0.8090171, 1.105686E-07, 0.5877852, -1,
		-0.8599924, 0.06410277, 0.5062646, -1,
		-0.8090171, 0, 0.5877851, -1,
		-0.9672929, 0.06493065, 0.2452111, -1,
		-0.9234133, -0.002371895, 0.3837996, -1,
		-0.9875819, 0.06161731, 0.1445174, -1,
		-0.809017, 1.607895E-07, 0.5877853, -1,
		-0.9589149, -0.001638537, 0.2836889, -1,
		-0.9941782, 0.05664644, 0.09165588, -1,
		-0.7179574, 0.0009230545, 0.6960864, -1,
		-0.8838785, -0.0009226151, 0.4677156, -1,
		-0.974705, -0.001346963, 0.2234914, -1,
		-0.9970434, 0.04974377, 0.05856629, -1,
		-0.8090169, 3.717521E-07, 0.5877854, -1,
		-0.9230353, -0.001046067, 0.3847138, -1,
		-0.9829748, -0.001095724, 0.1837369, -1,
		-0.6511182, 0.001046263, 0.7589756, -1,
		-0.9984644, 0.04155652, 0.03663223, -1,
		-0.6014005, 0.0009034062, 0.7989472, -1,
		-0.7451108, 0.0004317168, 0.6669405, -1,
		-0.8645502, -0.0004315363, 0.5025462, -1,
		-0.9456871, -0.000903391, 0.3250772, -1,
		-0.987818, -0.000810309, 0.1556115, -1,
		-0.9992066, 0.03310233, 0.02214452, -1,
		-0.5640584, 0.000712347, 0.8257346, -1,
		-0.6930565, 0.0004676504, 0.7208831, -1,
		-0.8090169, 1.520382E-07, 0.5877854, -1,
		-0.8997672, -0.0004678831, 0.4363701, -1,
		-0.9596238, -0.0007125275, 0.281286, -1,
		-0.9907605, -0.0007873037, 0.1356208, -1,
		-0.975531, -0.0003751622, 0.2198617, -1,
		-0.9301946, -0.0002570875, 0.3670668, -1,
		-0.9537034, -0.0002518377, 0.3007486, -1,
		-0.987892, -0.000515704, 0.1551421, -1,
		-0.9726185, -0.0001941664, 0.2324073, -1,
		-0.9252938, -0.0001125285, 0.379251, -1,
		-0.9503758, -8.43643E-05, 0.3111042, -1,
		-0.9877042, 3.867977E-05, 0.1563342, -1,
		-0.891127, -5.124163E-05, 0.4537539, -1,
		-0.8539627, -4.293762E-05, 0.5203343, -1,
		-0.8090168, 8.52706E-08, 0.5877856, -1,
		-0.7587562, 4.277971E-05, 0.6513747, -1,
		-0.7069187, 5.097046E-05, 0.7072948, -1,
		-0.6466206, 0.0001125343, 0.7628117, -1,
		-0.58956, 8.469694E-05, 0.8077246, -1,
		-0.5215876, 0.0001943524, 0.8531977, -1,
		-0.4538997, -3.863412E-05, 0.8910528, -1,
		-0.3814186, -2.386664E-05, 0.9244024, -1,
		-0.452824, 0.0005155603, 0.8915998, -1,
		-0.3090172, -2.417923E-08, 0.9510565, -1,
		-0.3827485, 0.001009116, 0.923852, -1,
		-0.2333764, -0.001009395, 0.9723859, -1,
		-0.1577263, -0.0005156379, 0.9874827, -1,
		-0.2347761, 2.392456E-05, 0.9720495, -1,
		-0.07952308, -0.0001941465, 0.996833, -1,
		-0.1565342, 3.867892E-05, 0.9876725, -1,
		-0.3090174, -1.430976E-07, 0.9510564, -1,
		0.002195181, -8.436573E-05, 0.9999976, -1,
		0.07475711, -0.0001125325, 0.9972017, -1,
		0.1561721, -5.12331E-05, 0.9877298, -1,
		0.2309781, -4.292931E-05, 0.9729589, -1,
		0.3090172, 9.234374E-08, 0.9510565, -1,
		0.3850261, 4.297249E-05, 0.9229057, -1,
		0.4542277, 5.0991E-05, 0.8908857, -1,
		0.5256609, 0.0001123482, 0.8506942, -1,
		0.5860074, 8.471196E-05, 0.8103057, -1,
		0.6502591, 0.0001943574, 0.7597125, -1,
		0.7071783, -3.866211E-05, 0.7070352, -1,
		0.7612941, -2.390673E-05, 0.6484067, -1,
		0.7080312, 0.0005156869, 0.7061809, -1,
		0.8090171, 3.433978E-08, 0.5877851, -1,
		0.7603602, 0.001009566, 0.6495008, -1,
		0.8526767, -0.001009368, 0.5224379, -1,
		0.8904114, -0.0005155559, 0.4551564, -1,
		0.8519241, 2.394572E-05, 0.5236652, -1,
		0.9234706, -0.0001941807, 0.3836691, -1,
		0.8909606, 3.866481E-05, 0.4540806, -1,
		0.8090171, -1.429941E-07, 0.5877851, -1,
		0.9517329, -8.437348E-05, 0.3069274, -1,
		0.9714966, -0.0001125346, 0.2370535, -1,
		0.9876468, -5.12263E-05, 0.1566969, -1,
		0.9967151, -4.309916E-05, 0.08098769, -1,
		1, 7.012397E-08, -4.470045E-09, -1,
		0.9967151, 4.296394E-05, -0.08098761, -1,
		0.9876467, 5.097192E-05, -0.1566971, -1,
		0.9714965, 0.0001125075, -0.237054, -1,
		0.9517325, 8.467354E-05, -0.3069288, -1,
		0.9234707, 0.0001943713, -0.383669, -1,
		0.8909608, -3.862768E-05, -0.4540803, -1,
		0.8519241, -2.387499E-05, -0.5236652, -1,
		0.8904116, 0.0005154741, -0.455156, -1,
		0.8090166, 2.446626E-07, -0.5877858, -1,
		0.8526764, 0.001009572, -0.5224385, -1,
		0.76036, -0.001009028, -0.6495011, -1,
		0.8090171, 1.539653E-07, -0.5877852, -1,
		0.7080318, -0.000515586, -0.7061803, -1,
		0.7612939, 2.389718E-05, -0.6484069, -1,
		0.6502597, -0.0001941357, -0.759712, -1,
		0.7071785, 3.866815E-05, -0.7070351, -1,
		0.8090168, -1.323969E-07, -0.5877855, -1,
		0.5860074, -8.436578E-05, -0.8103057, -1,
		0.5256603, -0.0001125172, -0.8506945, -1,
		0.4542272, -5.12398E-05, -0.8908859, -1,
		0.3850252, -4.311812E-05, -0.922906, -1,
		0.3090168, 9.449892E-08, -0.9510566, -1,
		0.2309779, 4.293818E-05, -0.972959, -1,
		0.1561723, 5.098818E-05, -0.9877298, -1,
		0.07475743, 0.0001125454, -0.9972017, -1,
		0.002195284, 8.470789E-05, -0.9999976, -1,
		-0.07952357, 0.0001943485, -0.996833, -1,
		-0.156535, -3.863925E-05, -0.9876724, -1,
		-0.2347763, -2.38911E-05, -0.9720494, -1,
		-0.1577271, 0.0005154738, -0.9874826, -1,
		-0.3090173, 2.329734E-07, -0.9510564, -1,
		-0.2333775, 0.001009521, -0.9723857, -1,
		-0.3827483, -0.001008986, -0.9238521, -1,
		-0.3090175, 1.328172E-07, -0.9510564, -1,
		-0.4528239, -0.0005156593, -0.8915998, -1,
		-0.3814188, 2.393875E-05, -0.9244024, -1,
		-0.5215877, -0.0001941625, -0.8531976, -1,
		-0.4539002, 3.867687E-05, -0.8910525, -1,
		-0.3090172, -1.393415E-07, -0.9510564, -1,
		-0.5895595, -8.437037E-05, -0.807725, -1,
		-0.008682054, 0.0002518443, -0.9999623, -1,
		0.1481059, 0.0001494472, -0.9889715, -1,
		0.3090169, -1.162989E-07, -0.9510565, -1,
		0.4614822, -0.0001495196, -0.8871495, -1,
		0.5947871, -0.0002518047, -0.8038832, -1,
		0.6599901, -0.0003751829, -0.7512742, -1,
		0.5367862, -0.0002570914, -0.8437183, -1,
		0.3892892, -9.184163E-05, -0.9211156, -1,
		0.2264765, 9.141333E-05, -0.9740166, -1,
		0.06165513, 0.0002569306, -0.9980975, -1,
		0.7218266, -0.000787347, -0.6920735, -1,
		0.6110165, -0.0007123564, -0.7916175, -1,
		0.7076957, -0.0008103602, -0.7065169, -1,
		0.5740013, -0.0009033754, -0.8188539, -1,
		0.6872452, -0.001095762, -0.7264246, -1,
		0.5206224, -0.001046134, -0.8537864, -1,
		0.6571879, -0.001347014, -0.7537256, -1,
		0.4401568, -0.0009228487, -0.8979204, -1,
		0.6090305, -0.001638384, -0.7931451, -1,
		0.3090171, -3.414422E-08, -0.9510565, -1,
		0.5214655, -0.002371628, -0.8532691, -1,
		0.07966485, 0.002371774, -0.9968189, -1,
		0.3090177, 2.594789E-08, -0.9510563, -1,
		-0.3090169, -2.481009E-07, -0.9510565, -1,
		-0.3090167, 1.456801E-07, -0.9510566, -1,
		-0.8090172, 1.9219E-07, -0.587785, -1,
		-0.8599928, -0.0641027, -0.506264, -1,
		-0.8090175, 0, -0.5877845, -1,
		-0.9672928, -0.06493073, -0.2452114, -1,
		-0.9234132, 0.002371873, -0.3838, -1,
		-0.6503656, -0.002371781, -0.7596176, -1,
		-0.9875818, -0.06161742, -0.1445177, -1,
		-0.3090168, 4.744629E-08, -0.9510566, -1,
		-0.9589149, 0.001638475, -0.2836891, -1,
		-0.8090168, -1.289034E-07, -0.5877855, -1,
		-0.5661255, -0.001638499, -0.8243174, -1,
		-0.9941782, -0.05664657, -0.09165609, -1,
		-0.3090171, -1.151727E-07, -0.9510565, -1,
		-0.9747049, 0.001346903, -0.2234915, -1,
		-0.8838785, 0.0009228633, -0.4677158, -1,
		-0.7179572, -0.000922675, -0.6960866, -1,
		-0.5137537, -0.001346893, -0.8579367, -1,
		-0.9970434, -0.04974392, -0.05856647, -1,
		-0.3090168, 2.212302E-08, -0.9510566, -1,
		-0.9829748, 0.001095794, -0.1837372, -1,
		-0.9230353, 0.00104598, -0.3847139, -1,
		-0.8090168, 8.032119E-08, -0.5877855, -1,
		-0.6511181, -0.001046106, -0.7589757, -1,
		-0.4785003, -0.001095573, -0.8780867, -1,
		-0.9984644, -0.04155654, -0.03663225, -1,
		-0.3090167, -4.628924E-08, -0.9510566, -1,
		-0.9878179, 0.0008104551, -0.1556118, -1,
		-0.945687, 0.0009033507, -0.3250773, -1,
		-0.8645499, 0.0004317216, -0.5025467, -1,
		-0.7451103, -0.0004315524, -0.666941, -1,
		-0.6014002, -0.0009033678, -0.7989475, -1,
		-0.4532478, -0.0008103373, -0.8913842, -1,
		-0.9992066, -0.03310243, -0.02214459, -1,
		-0.3090169, -2.639655E-09, -0.9510565, -1,
		-0.9907605, 0.0007876734, -0.135621, -1,
		-0.9596239, 0.0007121411, -0.2812854, -1,
		-0.8997671, 0.0004679198, -0.4363703, -1,
		-0.8090171, 4.224801E-08, -0.5877851, -1,
		-0.6930565, -0.0004680274, -0.7208831, -1,
		-0.5640582, -0.0007124407, -0.8257347, -1,
		-0.4351445, -0.0007873638, -0.9003603, -1,
		-0.1771789, 0.0007876873, -0.9841784, -1,
		-0.157257, 0.0008104725, -0.9875574, -1,
		-0.1290115, 0.001095736, -0.9916425, -1,
		-0.08864717, 0.001346962, -0.9960622, -1,
		-0.02651644, 0.001638457, -0.999647, -1,
		0.1716904, 0.0009227035, -0.9851505, -1,
		0.08065092, 0.001046108, -0.9967418, -1,
		0.3090173, 3.110732E-08, -0.9510564, -1,
		0.01693306, 0.0009033012, -0.9998562, -1,
		0.2107895, 0.0004315939, -0.9775314, -1,
		0.4040469, -0.0004315643, -0.9147382, -1,
		0.1369695, 0.0004677931, -0.9905751, -1,
		0.3090174, -1.137078E-08, -0.9510564, -1,
		0.4714347, -0.0004679698, -0.8819009, -1,
		-0.02902196, 0.000712504, -0.9995785, -1,
		-0.09235538, 0.0003752712, -0.995726, -1,
		-0.5105559, -0.0003752442, -0.8598445, -1,
		-0.5807387, -0.0002518144, -0.81409, -1,
		-0.6466203, -0.0001125323, -0.762812, -1,
		-0.7069191, -5.124555E-05, -0.7072944, -1,
		-0.7587563, -4.312515E-05, -0.6513746, -1,
		-0.8090171, 8.902919E-08, -0.5877851, -1,
		-0.8539627, 4.296495E-05, -0.5203341, -1,
		-0.8911272, 5.097074E-05, -0.4537535, -1,
		-0.925294, 0.000112556, -0.3792506, -1,
		-0.950376, 8.468067E-05, -0.3111037, -1,
		-0.9726185, 0.0001943522, -0.2324073, -1,
		-0.7011231, -0.0001495567, -0.7130402, -1,
		-0.809017, -6.048431E-08, -0.5877852, -1,
		-0.8948008, 0.0001496327, -0.4464655, -1,
		-0.9537037, 0.0002516357, -0.3007478, -1,
		-0.6365474, -0.0002571058, -0.7712375, -1,
		-0.7557361, -9.184548E-05, -0.6548763, -1,
		-0.85636, 9.167703E-05, -0.5163793, -1,
		-0.9301947, 0.0002569691, -0.3670665, -1,
		-0.9755311, 0.0003748281, -0.2198611, -1,
		-0.987892, 0.000515473, -0.1551422, -1,
		-0.9957196, -0.0010722, -0.0924197, -1,
		-0.999862, -0.01610558, -0.004091258, -1,
		-0.9956678, -0.001007881, -0.09297621, -1,
		-0.9999104, -0.012527, -0.004717985, -1,
		-0.9996296, -0.02424306, -0.01237157, -1,
		-0.9999864, -0.005172745, -0.0006676978, -1,
		-0.9999903, -0.004397353, -0.0002289562, -1,
		-0.9877042, -3.86614E-05, -0.1563343, -1,
		0.8090172, 2.062193E-07, -0.587785, -1,
		0.3090182, 0, -0.9510561, -1,
		0.8090171, -1.780921E-07, -0.5877852, -1,
		0.809017, -4.073438E-08, -0.5877852, -1,
		0.809017, -4.545074E-08, -0.5877852, -1,
		0.8090171, 9.019961E-08, -0.5877852, -1,
		0.8090173, 2.954635E-08, -0.5877849, -1,
		0.8090174, 9.935748E-08, -0.5877846, -1,
		1, -5.833317E-08, 2.660036E-07, -1,
		1, 0, 1.594488E-07, -1,
		0.9726488, -0.00237173, 0.2322686, -1,
		0.9726489, 0.002371764, -0.2322683, -1,
		0.9425268, 0.001638388, -0.3341267, -1,
		1, -7.601726E-09, 1.502363E-08, -1,
		0.9425266, -0.001638353, 0.3341272, -1,
		0.9199181, 0.001346969, -0.3921083, -1,
		0.9899891, 0.0009227961, -0.1411408, -1,
		0.989989, -0.0009227815, 0.1411413, -1,
		0.9199176, -0.001347012, 0.3921093, -1,
		0.9032416, 0.001095796, -0.4291309, -1,
		0.9728805, 0.001046037, -0.2313061, -1,
		1, 2.207805E-07, -2.393506E-07, -1,
		0.9728803, -0.001046176, 0.2313067, -1,
		0.9032412, -0.001095834, 0.4291318, -1,
		0.8906279, 0.0008103796, -0.4547321, -1,
		0.9561525, 0.0009033502, -0.2928678, -1,
		0.9948251, 0.000431521, -0.1016015, -1,
		0.9948251, -0.0004315524, 0.1016015, -1,
		0.9561524, -0.0009035241, 0.2928682, -1,
		0.8906277, -0.000810527, 0.4547325, -1,
		0.8812581, 0.0007876905, -0.4726347, -1,
		0.9416873, 0.0007124044, -0.3364885, -1,
		0.9844188, 0.0004678318, -0.1758391, -1,
		1, -1.183324E-07, 7.313349E-08, -1,
		0.9844189, -0.000467919, 0.1758385, -1,
		0.9416873, -0.000712421, 0.3364885, -1,
		0.8812579, -0.0007874509, 0.472635, -1,
		0.9184523, -0.0003752222, 0.3955316, -1,
		0.9483376, -0.0002518243, 0.3172627, -1,
		0.986335, -0.0001494551, 0.1647517, -1,
		1, 4.267189E-08, -1.233582E-08, -1,
		0.986335, 0.0001494522, -0.1647523, -1,
		0.9483379, 0.0002518618, -0.3172619, -1,
		0.9682997, -0.0002570392, 0.2497913, -1,
		0.99633, -9.174678E-05, 0.08559572, -1,
		0.9963299, 9.140951E-05, -0.0855963, -1,
		0.9682996, 0.0002569243, -0.2497916, -1,
		0.9184524, 0.0003753042, -0.3955312, -1,
		-0.00868197, -0.0002517968, 0.9999623, -1,
		0.148106, -0.0001491384, 0.9889715, -1,
		0.3090168, 4.854959E-07, 0.9510565, -1,
		0.4614831, 0.0001490967, 0.887149, -1,
		0.5947867, 0.0002512721, 0.8038835, -1,
		-0.09235522, -0.0003752221, 0.995726, -1,
		0.06165563, -0.00025699, 0.9980974, -1,
		0.226477, -9.123258E-05, 0.9740165, -1,
		0.3892894, 9.176142E-05, 0.9211155, -1,
		0.5367866, 0.0002561842, 0.843718, -1,
		0.6599898, 0.0003752885, 0.7512744, -1,
		-0.510556, 0.0003752538, 0.8598444, -1,
		-0.580739, 0.0002519127, 0.8140898, -1,
		-0.7011231, 0.0001490391, 0.7130402, -1,
		-0.8090168, 1.202057E-07, 0.5877855, -1,
		-0.8948005, -0.0001491623, 0.4464661, -1,
		-0.8563599, -9.110189E-05, 0.5163794, -1,
		-0.7557356, 9.156175E-05, 0.6548768, -1,
		-0.6365474, 0.0002568637, 0.7712376, -1,
		-0.9996285, 0.02427618, 0.01238848, -1,
		-0.9956538, 0.0009938403, 0.09312622, -1,
		-0.9998609, 0.01616671, 0.004106789, -1,
		-0.9956932, 0.001064115, 0.09270303, -1,
		-0.9999902, 0.004409065, 0.000229566, -1,
		-0.9999086, 0.01264881, 0.004763858, -1,
		-0.999986, 0.005253922, 0.0006781761, -1
	]
};

const CloudsShader = {
	name: 'sky_clouds',
	defines: {},
	uniforms: {
		_CameraFar: 1000,
		_Rotation: 0,
		_HeightOffset: 0,

		_MoonDirSize: [0.97, -0.24, 0.0],
		_SunDirSize: [-0.97, 0.24, 0.0],
		_uSkyNightParams: [.25, 1.],

		_StepSize: 0.004, // "Step size", Range(0.001, 0.02)

		_NightZenithColor: [51 / 255., 72 / 255., 102 / 255.],
		_SkyColor: [28. / 255., 32. / 255., 40. / 255.],
		_SkyLightColor: [85 / 255, 99 / 255, 112 / 255],

		_LightColorMultiplier: 4, // "Light Color multiplier", Range(0, 10)
		_SkyColorMultiplier: 1.5, // "Sky Color multiplier", Range(0, 10)
		_ScatterMultiplier: 1.33,
		_SkyMieG: 0.76,

		_CloudSampler: null,
		_Mask: 1., // "Clouds Density", Range (0, 4)
		_AlphaSaturation: 2.0, // "Alpha saturation", Range(1, 10)
		_Attenuation: 0.6, // "Attenuation", Range(0, 5)
	},
	vertexShader: `
        attribute vec3 a_Position;
		attribute vec3 a_Normal;
		attribute vec4 a_Tangent;
		attribute vec2 a_Uv;

        uniform mat4 u_ProjectionView;
		uniform mat4 u_Model;
        uniform vec3 u_CameraPosition;

        uniform float _CameraFar;

        uniform float _Rotation;
        uniform float _HeightOffset;

        uniform vec3 _MoonDirSize, _SunDirSize;
        uniform vec2 _uSkyNightParams;

        uniform float _StepSize;

		uniform vec3 _SkyLightColor, _NightZenithColor, _SkyColor;
		uniform float _LightColorMultiplier, _SkyColorMultiplier;
		uniform float _ScatterMultiplier;
		
		uniform float _SkyMieG;
		
		varying vec2 v_Uv;
		varying vec3 v_lightDir;
        varying vec2 v_toSun;
        varying vec3 v_skyColor;
		varying vec3 v_lightColor;
		varying vec3 v_miePhase_g;
		varying vec3 v_worldPos;
		
		const float PI = 3.1415926;
		const float OuterSpaceIntensity = 0.25;
		#define GAMMA_OUT(color) pow(color, 0.454545)
		#define ColorSpaceLuminance vec4(0.22, 0.707, 0.071, 0.0)
		#define SkyMieScale vec3(0.004)

		vec3 RotateAroundYInDegrees(vec3 vertex, float degrees) {
			float alpha = degrees * (PI / 180.0);
			float sina, cosa;
			sina = sin(alpha);
			cosa = cos(alpha);
			mat2 m = mat2(cosa, -sina, sina, cosa);
			return vec3((m * vertex.xz), vertex.y).xzy;
		}

		// Converts color to luminance (grayscale)
		float Luminance(vec3 rgb) {
			return dot(rgb, ColorSpaceLuminance.rgb);
		}

		vec3 PhaseFunctionG(float g, float scale) {
			// Mie phase G function and Mie scattering scale, (compute this function in Vertex program)
			float g2 = g * g;
			return vec3(scale * 1.5 * (1.0 / (4.0 * PI)) * ((1.0 - g2) / (2.0 + g2)), 1.0 + g2, 2.0 * g);
		}

		void main() {
			vec3 t = RotateAroundYInDegrees(a_Position.xyz, _Rotation).xyz; //  animate rotation
            t = t * _CameraFar + u_CameraPosition; // scale with camera's far plane and following camera position.
			t.y += _HeightOffset;

			vec3 dir = mix(_SunDirSize.xyz, _MoonDirSize.xyz, clamp(_uSkyNightParams.y, 0., 1.)); // switching between the sun and moon direction, avoids the poping issue between lights
			dir = RotateAroundYInDegrees(dir, -_Rotation);
			v_lightDir = dir;
			vec3 binormal = cross(a_Normal.xyz, a_Tangent.xyz) * a_Tangent.w; 
			mat3 rotation = mat3(a_Tangent.x, binormal.x, a_Normal.x, a_Tangent.y, binormal.y, a_Normal.y, a_Tangent.z, binormal.z, a_Normal.z);
			v_toSun = (rotation * dir).xy * _StepSize;

			v_Uv = a_Uv;

			// fix the night sky brightness
			float brightnessScale = max(max(Luminance(_NightZenithColor.rgb) * 4., OuterSpaceIntensity), 1.0 - _uSkyNightParams.x); 

			// Shade Color
			v_skyColor = _SkyColor * (GAMMA_OUT(_SkyColorMultiplier) * brightnessScale);
			v_lightColor = max(_SkyLightColor.xyz * _LightColorMultiplier, v_skyColor);

			// scatter term (precomputed Mie-G term)
			vec3 mie = SkyMieScale;
			mie.x *= GAMMA_OUT(_ScatterMultiplier);
			v_miePhase_g = PhaseFunctionG(_SkyMieG, mie.x);

			v_worldPos.xyz = (u_Model * vec4(a_Position, 1.0)).xyz;
			gl_Position = u_ProjectionView * u_Model * vec4(t, 1.0);
		}
    `,
	fragmentShader: `
        uniform sampler2D _CloudSampler;

        uniform vec2 _uSkyNightParams;

		uniform float _Attenuation, _AlphaSaturation, _Mask, _ScatterMultiplier;
		
		varying vec2 v_Uv;
		varying vec3 v_lightDir;
        varying vec2 v_toSun;
        varying vec3 v_skyColor;
		varying vec3 v_lightColor;
		varying vec3 v_miePhase_g;
		varying vec3 v_worldPos;
		
		float PhaseFunctionR() {
			// Rayleigh phase function without multiply (1.0 + mu * mu)
			// We will multiply (1.0 + mu * mu) together with Mie phase later.
			return 3.0 / (16.0 * PI);
		}
		
		float PhaseFunctionM(float mu, vec3 miePhase_g) {
			// Mie phase function (optimized)
			// Precomputed PhaseFunctionG() with constant values in vertex program and pass them in here
			// we will multiply (1.0 + mu * mu) together with Rayleigh phase later.
			return miePhase_g.x / pow(miePhase_g.y - miePhase_g.z * mu, 1.5);
		}
		
		void main() {
			const int c_numSamples = 8;
			vec3 dir = normalize(v_worldPos.xyz);
			float nu = dot(dir, v_lightDir.xyz);
			
			// only use red channel as clouds density 
			float opacity = texture2D(_CloudSampler, v_Uv).r;
			// user define opacity level (need to clamp to 1 for HDR Camera)
			opacity = min(opacity * _Mask, 1.0); 
			// Increase the "Alpha Opacity" during the night time for better masking out the background moon and stars
			opacity = mix(opacity, min(opacity * 1.15, 1.0), _uSkyNightParams.x);
		
			float density = 0.;
			
			if(opacity > 0.01) { // bypass sampling any transparent pixels
                vec2 sampleDir = v_toSun.xy;
				for(int i = 0; i < c_numSamples; i++) {
					float i_float = float(i);
					vec2 sampleUV = v_Uv + sampleDir * i_float;
					float t = texture2D(_CloudSampler, sampleUV).r;
					density += t;
				}
			}
		
			// scatter term
			float phase = PhaseFunctionR() * _ScatterMultiplier;
			float phaseM = PhaseFunctionM(nu, v_miePhase_g);
			float scatter = (phase + phaseM) * (1.0 + nu * nu);
		
			float c = exp2(-_Attenuation * density + scatter);
			float a = pow(opacity, _AlphaSaturation);
			vec3 col = mix(v_skyColor, v_lightColor, c);
		
			gl_FragColor = vec4(col, a);
		}
    `
};

class Clouds extends t3d.Mesh {

	constructor() {
		const material = new t3d.ShaderMaterial(CloudsShader);
		material.transparent = true;
		material.depthWrite = false;

		super(geometry, material);

		this.frustumCulled = false;
	}

}

const geometry = new t3d.Geometry();
geometry.setIndex(new t3d.Attribute(new t3d.Buffer(
	(SkyDomeData.vertices.length / 3) > 65536 ? new Uint32Array(SkyDomeData.triangles) : new Uint16Array(SkyDomeData.triangles), 1
)));
geometry.addAttribute('a_Position', new t3d.Attribute(new t3d.Buffer(new Float32Array(SkyDomeData.vertices), 3)));
geometry.addAttribute('a_Normal', new t3d.Attribute(new t3d.Buffer(new Float32Array(SkyDomeData.normals), 3)));
geometry.addAttribute('a_Tangent', new t3d.Attribute(new t3d.Buffer(new Float32Array(SkyDomeData.tangents), 4)));
geometry.addAttribute('a_Uv', new t3d.Attribute(new t3d.Buffer(new Float32Array(SkyDomeData.UV0), 2)));

geometry.computeBoundingBox();
geometry.computeBoundingSphere();

const StarsShader = {
	name: 'sky_stars',
	defines: {},
	uniforms: {
		_CameraFar: 1000,
		_StarIntensity: 40,
		_StarSize: 10,
		_Time: 0,
		_StarRotationMatrix: [
			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1
		],
	},
	vertexShader: `
        attribute vec3 a_Position;
		attribute vec4 a_Color;
		attribute vec2 a_Uv;

		uniform mat4 u_ProjectionView;
		uniform mat4 u_Model;
		uniform vec3 u_CameraPosition;

		uniform float _CameraFar;
		uniform float _StarIntensity;
		uniform float _StarSize;
		uniform float _Time;
		uniform mat4 _StarRotationMatrix;

		varying vec4 vColor;

		float GetFlickerAmount(vec2 pos) {
			vec2 tab[8];

			tab[0] = vec2(0.897907815, -0.347608525);
			tab[1] = vec2(0.550299290, 0.273586675);
			tab[2] = vec2(0.823885965, 0.098853070);
			tab[3] = vec2(0.922739035, -0.122108860);
			tab[4] = vec2(0.800630175, -0.088956800);
			tab[5] = vec2(0.711673375, 0.158864420);
			tab[6] = vec2(0.870537795, 0.085484560);
			tab[7] = vec2(0.956022355, -0.058114540);
		
			vec2 hash = fract(pos.xy * 256.);
			float index = fract(hash.x + (hash.y + 1.) * _Time); // flickering
			index *= 8.;
	
			float f = fract(index) * 2.5;
			highp int i = int(index);

			return tab[i].x + f * tab[i].y;
		} 

		void main() {
			vec3 t = (_StarRotationMatrix * vec4(a_Position.xyz, 1.0)).xyz * _CameraFar + u_CameraPosition.xyz;
			vec4 transformed = vec4(t, 1.0);

			gl_Position = u_ProjectionView * u_Model * transformed;

			float appMag = 6.5 + a_Color.w * (-1.44 - 1.5);
			float brightness = GetFlickerAmount(a_Position.xy) * pow(5.0, (-appMag - 1.44) / 2.5);

			vColor = (t.y > 0.0 ? _StarIntensity : 0.0) * vec4(brightness * a_Color.xyz, brightness);
			
			gl_PointSize = _StarSize;
		}
    `,
	fragmentShader: `
        varying vec4 vColor;

        void main() {
            vec2 distCenter = 6.5 * gl_PointCoord - 6.5 * vec2(0.5, 0.5);
            float scale = exp(-dot(distCenter, distCenter));
            vec3 col = vColor.xyz * scale + 5. * vColor.w * pow(scale, 10.);

			// col = col * col * 2.;

            gl_FragColor = vec4(col, 1.);
        }
    `
};

class Stars extends t3d.Mesh {

	// Note: To improve performance, we sort stars by brightness and remove less important stars.
	// 6.225e-2f  0.06225 	 // 1024 predefined stars.
	// 3.613e-2f  0.03613	 // 2047 predefined stars.
	// 2.0344e-2f  0.020344	 // 4096 predefined stars.
	constructor(starsArray, threshold = 0.06225) {
		const material = new t3d.ShaderMaterial(StarsShader);
		material.transparent = true;
		material.blending = t3d.BLEND_TYPE.ADD;
		// material.blending = t3d.BLEND_TYPE.CUSTOM;
		// material.blendDst = t3d.BLEND_FACTOR.ONE_MINUS_DST_ALPHA;
		// material.blendSrc = t3d.BLEND_FACTOR.ONE_MINUS_SRC_ALPHA;
		material.depthWrite = false;
		material.drawMode = t3d.DRAW_MODE.POINTS;

		const starsNumber = 9110;

		const positions = [];
		const colors = [];

		for (let i = 0; i < starsNumber; i++) {
			_vec3_1$1.x = starsArray[i * 6 + 0];
			_vec3_1$1.z = starsArray[i * 6 + 1];
			_vec3_1$1.y = starsArray[i * 6 + 2]; // Z-up to Y-up

			_vec3_2$1.fromArray(starsArray, i * 6 + 3);
			const magnitude = _vec3_2$1.getLength(); // Using Vector3.getLength term to sort the brightness of star magnitude

			if (magnitude < threshold) continue;

			if (magnitude > 2.7) { // 5.7 fix an over bright star (Sirius)?
				_vec4_1$1.set(_vec3_2$1.x, _vec3_2$1.y, _vec3_2$1.z, magnitude).normalize().multiplyScalar(0.5);
			} else {
				_vec4_1$1.set(_vec3_2$1.x, _vec3_2$1.y, _vec3_2$1.z, magnitude);
			}

			positions.push(_vec3_1$1.x, _vec3_1$1.y, _vec3_1$1.z);
			colors.push(_vec4_1$1.x, _vec4_1$1.y, _vec4_1$1.z, _vec4_1$1.w);
		}

		const geometry = new t3d.Geometry();
		const positionAttribute = new t3d.Attribute(new t3d.Buffer(new Float32Array(positions), 3));
		geometry.addAttribute('a_Position', positionAttribute);
		const colorAttribute = new t3d.Attribute(new t3d.Buffer(new Float32Array(colors), 4));
		geometry.addAttribute('a_Color', colorAttribute);

		geometry.computeBoundingBox();
		geometry.computeBoundingSphere();

		super(geometry, material);

		this.frustumCulled = false;
	}

}

const _vec3_1$1 = new t3d.Vector3();
const _vec3_2$1 = new t3d.Vector3();
const _vec4_1$1 = new t3d.Vector4();

const SkyShader = {
	name: 'sky_bg',
	defines: {
		SKY_MULTISAMPLE: true,
		SKY_SUNDISK: true,
		COLORSPACE_GAMMA: true,
		SKY_HDR_MODE: false
	},
	uniforms: {
		_CameraFar: 1000,

		_SkyAltitudeScale: 1,
		_SkyGroundOffset: 0,

		_SkyMieG: 0.76,
		_SkyMieScale: 1,

		_MoonDirSize: [0, -1, 0, 8],

		_SpaceRotationMatrix: [
			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1
		],

		_SunDirSize: [0, 1, 0, 1],

		_SkyboxOcean: 0,

		_Inscatter: null,
		_Transmittance: null,

		_NightHorizonColor: [51 / 255, 74 / 255, 102 / 255, 0.5],
		_NightZenithColor: [72 / 255, 100 / 255, 128 / 255, 0.5],

		_MoonSampler: null,

		_uSkyNightParams: [0.25, 0.5, 0.5],

		_OuterSpaceCube: null,

		_MoonInnerCorona: [0 / 255, 0 / 255, 0 / 255, 0.5],
		_MoonOuterCorona: [65 / 255, 88 / 255, 128 / 255, 0.5],

		_SkyExposure: 1.0,

		betaR: [5.8e-3, 1.35e-2, 3.31e-2, 1]
	},
	vertexShader: `
        #define PI 3.14159

        attribute vec3 a_Position;

        uniform mat4 u_ProjectionView;
		uniform mat4 u_Model;
        uniform vec3 u_CameraPosition;

        uniform float _CameraFar;

        uniform float _SkyAltitudeScale;
        uniform float _SkyGroundOffset;

        uniform float _SkyMieG;
        uniform float _SkyMieScale;

        uniform vec4 _SunDirSize;
        uniform vec4 _MoonDirSize;

        uniform float _SkyExposure;

        uniform mat4 _SpaceRotationMatrix;

        varying vec4 vWorldPosAndCamY;
        varying vec3 vMiePhase_g;
        varying vec3 vSun_g;
        varying vec2 vMoonTC;
        varying vec3 vSpaceTC;

        // Mie phase G function and Mie scattering scale, (compute this function in Vertex program)
        vec3 PhaseFunctionG(float g, float scale) {
            float g2 = g * g;
            return vec3(scale * 1.5 * (1.0 / (4.0 * PI)) * ((1.0 - g2) / (2.0 + g2)), 1.0 + g2, 2.0 * g);
        }
        
        void main() {
            vWorldPosAndCamY.xyz = (u_Model * vec4(a_Position, 0.0)).xyz;
            // if the camera height is outside atmospheric precomputed buffer range, it will occur rendering artifacts
            vWorldPosAndCamY.w = max(u_CameraPosition.y * _SkyAltitudeScale + _SkyGroundOffset, 0.0); // no lower than sealevel
            vMiePhase_g = PhaseFunctionG(_SkyMieG, _SkyMieScale);

            #ifdef SKY_SUNDISK
                float scale = 8e-3;
                #ifdef COLORSPACE_GAMMA
                    scale = 4e-3;
                #endif
                vSun_g = PhaseFunctionG(.99 , _SunDirSize.w * scale * _SkyExposure);
            #else
                vSun_g = vec3(0., 0., 0.);
            #endif

            vec3 right = normalize(cross(_MoonDirSize.xyz, vec3(0., 0., 1.)));
            vec3 up = cross(_MoonDirSize.xyz, right);
            vMoonTC = vec2(dot(right, normalize(a_Position)), dot(up, normalize(a_Position))) * _MoonDirSize.w + 0.5;
            vSpaceTC = (_SpaceRotationMatrix * vec4(a_Position, 0.0)).xyz;

            gl_Position = u_ProjectionView * u_Model * vec4(a_Position * _CameraFar + u_CameraPosition.xyz, 1.0);
        }
    `,
	fragmentShader: `
        uniform vec4 _SunDirSize;

        uniform float _SkyboxOcean;

        uniform sampler2D _Inscatter;
        uniform sampler2D _Transmittance;

        uniform vec4 _NightHorizonColor;
        uniform vec4 _NightZenithColor;

        uniform sampler2D _MoonSampler;

        uniform vec3 _uSkyNightParams;

        uniform samplerCube _OuterSpaceCube;

        uniform vec4 _MoonDirSize;

        uniform vec4 _MoonInnerCorona;
        uniform vec4 _MoonOuterCorona;

        uniform float _SkyExposure;

        uniform vec4 betaR;

        varying vec4 vWorldPosAndCamY;
        varying vec3 vMiePhase_g;
        varying vec3 vSun_g;
        varying vec2 vMoonTC;
        varying vec3 vSpaceTC;

        const float Rg = 6360000.0;
        const float Rt = 6420000.0;
        const float RL = 6421000.0;

        const float RES_R = 4.; 	// 3D texture depth
        const float RES_MU = 128.; 	// height of the texture
        const float RES_MU_S = 32.; // width per table
        const float RES_NU = 8.;	// table per texture depth

        #define TRANSMITTANCE_NON_LINEAR	
        #define INSCATTER_NON_LINEAR

        vec4 Texture4D(sampler2D table, float r, float mu, float muS, float nu) {
            float H = sqrt(Rt * Rt - Rg * Rg);
            float rho = sqrt(r * r - Rg * Rg);
            #ifdef INSCATTER_NON_LINEAR
                float rmu = r * mu;
                float delta = rmu * rmu - r * r + Rg * Rg;
                vec4 cst = rmu < 0.0 && delta > 0.0 ? vec4(1.0, 0.0, 0.0, 0.5 - 0.5 / RES_MU) : vec4(-1.0, H * H, H, 0.5 + 0.5 / RES_MU);     
                float uR = 0.5 / RES_R + rho / H * (1.0 - 1.0 / RES_R);
                float uMu = cst.w + (rmu * cst.x + sqrt(delta + cst.y)) / (rho + cst.z) * (0.5 - 1.0 / float(RES_MU));

                // paper formula
                // float uMuS = 0.5 / RES_MU_S + max((1.0 - exp(-3.0 * muS - 0.6)) / (1.0 - exp(-3.6)), 0.0) * (1.0 - 1.0 / RES_MU_S);
                // better formula
                float uMuS = 0.5 / RES_MU_S + (atan(max(muS, -0.1975) * tan(1.26 * 0.75)) / 0.75 + (1.0 - 0.26)) * 0.5 * (1.0 - 1.0 / RES_MU_S);

                if (_SkyboxOcean < 0.5) {
                    uMu = rmu < 0.0 && delta > 0.0 ? 0.975 : uMu * 0.975 + 0.015 * uMuS; // 0.975 to fix the horizion seam. 0.015 to fix zenith artifact
                }
            #else
                float uR = 0.5 / RES_R + rho / H * (1.0 - 1.0 / RES_R);
                float uMu = 0.5 / RES_MU + (mu + 1.0) / 2.0 * (1.0 - 1.0 / RES_MU);
                float uMuS = 0.5 / RES_MU_S + max(muS + 0.2, 0.0) / 1.2 * (1.0 - 1.0 / RES_MU_S);
            #endif
            float lep = (nu + 1.0) / 2.0 * (RES_NU - 1.0);
            float uNu = floor(lep);
            lep = lep - uNu;

            // Original 3D lookup
            // return tex3D(table, float3((uNu + uMuS) / RES_NU, uMu, uR)) * (1.0 - lep) + tex3D(table, float3((uNu + uMuS + 1.0) / RES_NU, uMu, uR)) * lep;

            float uNu_uMuS = uNu + uMuS;

            #ifdef SKY_MULTISAMPLE  
                // new 2D lookup
                float u_0 = floor(uR * RES_R) / RES_R;
                float u_1 = floor(uR * RES_R + 1.0) / RES_R;
                float u_frac = fract(uR * RES_R);

                // pre-calculate uv
                float uv_0X = uNu_uMuS / RES_NU;
                float uv_1X = (uNu_uMuS + 1.0) / RES_NU;
                float uv_0Y = uMu / RES_R + u_0;
                float uv_1Y = uMu / RES_R + u_1;
                float OneMinusLep = 1.0 - lep;

                vec4 A = texture2D(table, vec2(uv_0X, uv_0Y)) * OneMinusLep + texture2D(table, vec2(uv_1X, uv_0Y)) * lep;	
                vec4 B = texture2D(table, vec2(uv_0X, uv_1Y)) * OneMinusLep + texture2D(table, vec2(uv_1X, uv_1Y)) * lep;	

                return A * (1.0 - u_frac) + B * u_frac;

            #else	
                return texture2D(table, vec2(uNu_uMuS / RES_NU, uMu)) * (1.0 - lep) + texture2D(table, vec2((uNu_uMuS + 1.0) / RES_NU, uMu)) * lep;	
            #endif
        }

        vec3 GetMie(vec4 rayMie) {	
            // approximated single Mie scattering (cf. approximate Cm in paragraph "Angular precision")
            // rayMie.rgb = C*, rayMie.w = Cm, r
            return rayMie.rgb * rayMie.w / max(rayMie.r, 1e-4) * (betaR.r / betaR.xyz);
        }

        float PhaseFunctionR() {
			// Rayleigh phase function without multiply (1.0 + mu * mu)
			// We will multiply (1.0 + mu * mu) together with Mie phase later.
			return 3.0 / (16.0 * PI);
		}

        float PhaseFunctionM(float mu, vec3 miePhase_g) {
			// Mie phase function (optimized)
			// Precomputed PhaseFunctionG() with constant values in vertex program and pass them in here
			// we will multiply (1.0 + mu * mu) together with Rayleigh phase later.
			return miePhase_g.x / pow(miePhase_g.y - miePhase_g.z * mu, 1.5);
		}

        vec3 Transmittance(float r, float mu) {
            float uR, uMu;
            #ifdef TRANSMITTANCE_NON_LINEAR
                uR = sqrt((r - Rg) / (Rt - Rg));
                uMu = atan((mu + 0.15) / (1.0 + 0.15) * tan(1.5)) / 1.5;
            #else
                uR = (r - Rg) / (Rt - Rg);
                uMu = (mu + 0.15) / (1.0 + 0.15);
            #endif    
            return texture2D(_Transmittance, vec2(uMu, uR)).rgb;
        }

        const vec3 EARTH_POS = vec3(0.0, 6360010.0, 0.0);
        const float SUN_BRIGHTNESS = 40.0;

        vec3 SkyRadiance(vec3 camera, vec3 viewdir, float nu, vec3 MiePhase_g, out vec3 extinction) {
            camera += EARTH_POS;

            vec3 result = vec3(0., 0., 0.);
            float r = length(camera);
            float rMu = dot(camera, viewdir);
            float mu = rMu / r;

            float deltaSq = sqrt(rMu * rMu - r * r + Rt * Rt);
            float din = max(-rMu - deltaSq, 0.0);
            
            if (din > 0.0) {
                camera += din * viewdir;
                rMu += din;
                mu = rMu / Rt;
                r = Rt;
            }
            
            // float nu = dot(viewdir, _SunDirSize.xyz); // nu value is from function input
            float muS = dot(camera, _SunDirSize.xyz) / r;

            vec4 inScatter = Texture4D(_Inscatter, r, rMu / r, muS, nu);

            extinction = Transmittance(r, mu);

            if(r <= Rt) {
                vec3 inScatterM = GetMie(inScatter);
                float phase = PhaseFunctionR();
                float phaseM = PhaseFunctionM(nu, MiePhase_g);
                result = (inScatter.rgb * phase + inScatterM * phaseM) * (1.0 + nu * nu);
            } else {
                result = vec3(0., 0., 0.);
                extinction = vec3(1., 1., 1.);
            }

            return result * SUN_BRIGHTNESS;
        }

        vec3 hdr(vec3 L) {
            L.r = mix(1.0 - exp(-L.r), pow(L.r * 0.38317, 1.0 / 2.2), step(L.r, 1.413));
            L.g = mix(1.0 - exp(-L.g), pow(L.g * 0.38317, 1.0 / 2.2), step(L.g, 1.413));
            L.b = mix(1.0 - exp(-L.b), pow(L.b * 0.38317, 1.0 / 2.2), step(L.b, 1.413));
            return L;
        }

        // switch different tonemapping methods between day and night
        vec3 hdr2(vec3 L) {
            L = mix(hdr(L), 1.0 - exp(-L), _uSkyNightParams.x);
            return L;
        }

        #if defined(COLORSPACE_GAMMA)
            #define COLOR_2_LINEAR(color) color * (0.4672 * color + 0.266)
            #define GAMMA_2_OUTPUT(color) color
            #define HDR_OUTPUT(color) pow(color * 1.265, vec3(0.735))
        #else
            #define COLOR_2_LINEAR(color) color * color
            #define GAMMA_2_OUTPUT(color) color * color
            #define HDR_OUTPUT(color) color * 0.6129
        #endif

        void main() {
            vec3 dir = normalize(vWorldPosAndCamY.xyz);
            float nu = dot(dir, _SunDirSize.xyz);

            vec3 extinction = vec3(0.0);
            vec3 col = SkyRadiance(vec3(0.0, vWorldPosAndCamY.w, 0.0), dir, nu, vMiePhase_g, extinction);

            // ------------------

            // night sky
            vec3 nightSkyColor = vec3(0., 0., 0.);
            float moonMask = 0.0;
            float gr = 1.0;

            if (_SunDirSize.y < 0.25) {
                // add horizontal night sky gradient
                gr = clamp(extinction.z * .25 / _NightHorizonColor.w, 0., 1.);
                gr *= 2. - gr;

                nightSkyColor = mix(_NightHorizonColor.xyz, _NightZenithColor.xyz, gr);
                // add moon and outer space
                vec4 moonAlbedo = texture2D(_MoonSampler, vMoonTC.xy);
		        moonMask = moonAlbedo.a * _uSkyNightParams.y;

                vec4 spaceAlbedo = textureCube(_OuterSpaceCube, vSpaceTC);
                // TODO _uSkyNightParams.x * OuterSpaceIntensity or _uSkyNightParams.z
                nightSkyColor += (moonAlbedo.rgb * _uSkyNightParams.y + spaceAlbedo.rgb * (max(1. - moonMask, gr) * _uSkyNightParams.z)) * gr;

                // moon corona
                float m = 1. - dot(dir, _MoonDirSize.xyz);
                nightSkyColor += _MoonInnerCorona.xyz * (1.0 / (1.05 + m * _MoonInnerCorona.w));
		        nightSkyColor += _MoonOuterCorona.xyz * (1.0 / (1.05 + m * _MoonOuterCorona.w));
            }

            // ------------------

            #ifndef SKY_HDR_MODE
                col += nightSkyColor;
                col = GAMMA_2_OUTPUT(hdr2(col * _SkyExposure));
            #else
                col += COLOR_2_LINEAR(nightSkyColor);
                col = HDR_OUTPUT(col * _SkyExposure);
            #endif

            #ifdef SKY_SUNDISK
                float sun = PhaseFunctionM(nu, vSun_g) * (1.0 + nu * nu); 
		        col += sun * extinction;

                // TODO new sun disk?
                // float sun = step(0.9999 - _SunDirSize.w * 1e-4, nu) * sign(_LightColor0.w);
				// col += (sun * SUN_BRIGHTNESS) * extinction ;
            #endif

            // float alpha = mix(1.0, max(1e-3, moonMask + (1. - gr)), _uSkyNightParams.x);
            // gl_FragColor = vec4(col, alpha);

            gl_FragColor = vec4(col, 1.);
        }
    `
};

class Sky extends t3d.Mesh {

	constructor() {
		const material = new t3d.ShaderMaterial(SkyShader);
		material.depthWrite = false;
		material.side = t3d.DRAW_SIDE.BACK;

		super(new t3d.SphereGeometry(1, 100, 100), material);

		this.frustumCulled = false;
	}

}

const AtmosphereCommon = `

// The radius of the planet (Rg), radius of the atmosphere (Rt),  atmosphere limit (RL)
const float Rg = 6360.0;
const float Rt = 6420.0;
const float RL = 6421.0;

// Half heights for the atmosphere air density (HR) and particle density (HM)
// This is the height in km that half the particles are found below
const float HR = 8.0;
const float HM = 1.2;

// const vec3 betaR = vec3(5.8e-3, 1.35e-2, 3.31e-2);
uniform vec4 betaR;
const vec3 betaMSca = vec3(4e-3, 4e-3, 4e-3);
const vec3 betaMEx = betaMSca / 0.9;

// ---------------------------------------------------------------------------- 
// NUMERICAL INTEGRATION PARAMETERS 
// ----------------------------------------------------------------------------

// default Transmittance sample is 500, less then 250 sample will fit in SM 3.0 for dx9,
#define TRANSMITTANCE_INTEGRAL_SAMPLES 50
//default Inscatter sample is 50
#define INSCATTER_INTEGRAL_SAMPLES 25

// ---------------------------------------------------------------------------- 
// PARAMETERIZATION OPTIONS 
// ----------------------------------------------------------------------------

#define TRANSMITTANCE_NON_LINEAR	
#define INSCATTER_NON_LINEAR

// ---------------------------------------------------------------------------- 
// UTILITY FUNCTIONS
// ---------------------------------------------------------------------------- 

// nearest intersection of ray r, mu with ground or top atmosphere boundary 
// mu = cos(ray zenith angle at ray origin) 
float Limit(float r, float mu) { 
    float dout = -r * mu + sqrt(r * r * (mu * mu - 1.0) + RL * RL); 
    float delta2 = r * r * (mu * mu - 1.0) + Rg * Rg;
    
    if (delta2 >= 0.0) { 
        float din = -r * mu - sqrt(delta2);
        if (din >= 0.0) { 
            dout = min(dout, din); 
        } 
    } 
    
    return dout; 
}

`;

const TransmittanceShader = {
	name: 'sky_transmittance',
	defines: {},
	uniforms: {
		betaR: [5.8e-3, 1.35e-2, 3.31e-2, 1],
	},
	vertexShader: `
        attribute vec3 a_Position;
        attribute vec2 a_Uv;
           
        uniform mat4 u_ProjectionView;
        uniform mat4 u_Model;

        varying vec2 v_Uv;

        void main() {
            v_Uv = a_Uv;
            gl_Position = u_ProjectionView * u_Model * vec4(a_Position, 1.0);
        }
    `,
	fragmentShader: `
        varying vec2 v_Uv;
        
        ${AtmosphereCommon}
        
        // pixel shader entry point
        // ---------------------------------------------------------------------------- 
        // TRANSMITTANCE FUNCTIONS   equ 2-6
        // ----------------------------------------------------------------------------

        float OpticalDepth(float H, float r, float mu) { 
            float result = 0.0; 
            float dx = Limit(r, mu) / float(TRANSMITTANCE_INTEGRAL_SAMPLES); 
            float xi = 0.0; 
            float yi = exp(-(r - Rg) / H); 
            
            for (int i = 1; i <= TRANSMITTANCE_INTEGRAL_SAMPLES; ++i) { 
                float i_float = float(i);
                float xj = i_float * dx; 
                float yj = exp(-(sqrt(r * r + xj * xj + 2.0 * xj * r * mu) - Rg) / H);
                result += (yi + yj) / 2.0 * dx;
                xi = xj;
                yi = yj; 
            }
            
            return mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? 1e9 : result; 
        } 
        
        void GetTransmittanceRMu(vec2 coord, out float r, out float muS) { 
            r = coord.y; 
            muS = coord.x;
            #ifdef TRANSMITTANCE_NON_LINEAR 
                r = Rg + (r * r) * (Rt - Rg); 
                muS = -0.15 + tan(1.5 * muS) / tan(1.5) * (1.0 + 0.15); 
            #else
                r = Rg + r * (Rt - Rg); 
                muS = -0.15 + muS * (1.0 + 0.15);
            #endif
        }
        
        void main() {
            float r, muS;
            GetTransmittanceRMu(v_Uv, r, muS); 
        
            vec3 depth = betaR.xyz * OpticalDepth(HR, r, muS) + betaMEx * OpticalDepth(HM, r, muS); 
            gl_FragColor = vec4(exp(-depth), 1.0); // Eq (5)
        }
    `
};

const InscatterShader = {
	name: 'sky_inscatter',
	defines: {},
	uniforms: {
		_Transmittance: null,
		betaR: [5.8e-3, 1.35e-2, 3.31e-2, 1],
	},
	vertexShader: `
        attribute vec3 a_Position;
        attribute vec2 a_Uv;
           
        uniform mat4 u_ProjectionView;
        uniform mat4 u_Model;

        varying vec2 v_Uv;

        void main() {
            v_Uv = a_Uv;
            gl_Position = u_ProjectionView * u_Model * vec4(a_Position, 1.0);
        }
    `,
	fragmentShader: `
        uniform sampler2D _Transmittance;

        varying vec2 v_Uv;

        ${AtmosphereCommon}
        
        const float RES_R = 4.; 	// 3D texture depth
        const float RES_MU = 128.; 	// height of the texture
        const float RES_MU_S = 32.; // width per table
        const float RES_NU = 8.;	// table per texture depth

        const float epsion = 0.000000001;
        
        //----------------------------------------------------------------------------------------------------
        
        void GetMuMuSNu(vec2 coord, float r, vec4 dhdH, out float mu, out float muS, out float nu) { 
            float x = coord.x * float(RES_MU_S * RES_NU) - 0.5;
            float y = coord.y * float(RES_MU) - 0.5;
        
            #ifdef INSCATTER_NON_LINEAR 
                if (y < float(RES_MU) / 2.0) { // bottom half
                    float d = 1.0 - y / (float(RES_MU) / 2.0 - 1.0); 
                    d = min(max(dhdH.z, d * dhdH.w), dhdH.w * 0.999); 
                    mu = (Rg * Rg - r * r - d * d) / (2.0 * r * d); 
                    mu = min(mu, -sqrt(1.0 - (Rg / r) * (Rg / r)) - 0.001); 
                } else { 
                    float d = (y - float(RES_MU) / 2.0) / (float(RES_MU) / 2.0 - 1.0); 
                    d = min(max(dhdH.x, d * dhdH.y), dhdH.y * 0.999); 
                    mu = (Rt * Rt - r * r - d * d) / (2.0 * r * d); 
                } 
                muS = mod(x, float(RES_MU_S)) / (float(RES_MU_S) - 1.0);
                // paper formula 
                // muS = -(0.6 + log(1.0 - muS * (1.0 -  exp(-3.6)))) / 3.0; 
                // better formula 
                muS = tan((2.0 * muS - 1.0 + 0.26) * 0.75) / tan(1.26 * 0.75); 
                nu = -1.0 + floor(x / float(RES_MU_S)) / (float(RES_NU) - 1.0) * 2.0; 
            #else 
                mu = -1.0 + 2.0 * y / (float(RES_MU) - 1.0); 
                muS = mod(x, float(RES_MU_S)) / (float(RES_MU_S) - 1.0); 
                muS = -0.2 + muS * 1.2; 
                nu = -1.0 + floor(x / float(RES_MU_S)) / (float(RES_NU) - 1.0) * 2.0;
            #endif 
        }
        
        // UE4 AtmosphereRendering.cpp
        void GetLayer(float layer, out float r, out vec4 dhdH) {
            // Assign the total depth constant for "RES_R" altitude layer setting.
            const float RES_R_TOTAL = 32.;
            
            r = float(layer) / max((RES_R_TOTAL - 1.0), 1.0);
            r = r * r;
            r = sqrt(Rg * Rg + r * (Rt * Rt - Rg * Rg)) + (abs(layer - 0.) < epsion ? 0.01 : (abs(layer - RES_R_TOTAL + 1.) < epsion ? -0.001 : 0.0));
            
            float dmin = Rt - r;
            float dmax = sqrt(r * r - Rg * Rg) + sqrt(Rt * Rt - Rg * Rg);
            float dminp = r - Rg;
            float dmaxp = sqrt(r * r - Rg * Rg);
        
            dhdH = vec4(dmin, dmax, dminp, dmaxp);	
        }

        // ---------------------------------------------------------------------------- 
        // TRANSMITTANCE FUNCTIONS
        // ---------------------------------------------------------------------------- 

        // transmittance(=transparency) of atmosphere for infinite ray (r, mu)
        // (mu = cos(view zenith angle)), intersections with ground ignored        
        vec3 Transmittance(float r, float mu) {
            float uR, uMu;
            #ifdef TRANSMITTANCE_NON_LINEAR
                uR = sqrt((r - Rg) / (Rt - Rg));
                uMu = atan((mu + 0.15) / (1.0 + 0.15) * tan(1.5)) / 1.5;
            #else
                uR = (r - Rg) / (Rt - Rg);
                uMu = (mu + 0.15) / (1.0 + 0.15);
            #endif    
            return texture2D(_Transmittance, vec2(uMu, uR)).rgb;
        }

        // transmittance(=transparency) of atmosphere between x and x0
        // assume segment x, x0 not intersecting ground 
        // d = distance between x and x0, mu = cos(zenith angle of [x,x0) ray at x) 
        vec3 Transmittance(float r, float mu, float d) { 
            vec3 result; 
            float r1 = sqrt(r * r + d * d + 2.0 * r * mu * d); 
            float mu1 = (r * mu + d) / r1;
            if (mu > 0.0) { 
                result = min(Transmittance(r, mu) / Transmittance(r1, mu1), 1.0); 
            } else { 
                result = min(Transmittance(r1, -mu1) / Transmittance(r, -mu), 1.0); 
            } 
        
            return result;
        }

        // ---------------------------------------------------------------------------- 
        // INSCATTER FUNCTIONS 
        // ---------------------------------------------------------------------------- 

        void Integrand(float r, float mu, float muS, float nu, float t, out vec3 ray, out float mie) { 
            ray = vec3(0.,0.,0.); 
            mie = 0.0; // single channel only
            float ri = sqrt(r * r + t * t + 2.0 * r * mu * t); 
            float muSi = (nu * t + muS * r) / (ri * mix(1.0, betaR.w, max(0.0, muS))); // added betaR.w to fix the Rayleigh Offset artifacts issue
            ri = max(Rg, ri);
            if (muSi >= -sqrt(1.0 - Rg * Rg / (ri * ri))) 
            { 
                vec3 ti = Transmittance(r, mu, t) * Transmittance(ri, muSi); 
                ray = exp(-(ri - Rg) / HR) * ti; 
                mie = exp(-(ri - Rg) / HM) * ti.x; // only calc the red channel
            }
        } 
        
        void Inscatter(float r, float mu, float muS, float nu, out vec3 ray, out float mie) { 
            ray = vec3(0., 0., 0.); 
            mie = 0.0; // single channel only
            float dx = Limit(r, mu) / float(INSCATTER_INTEGRAL_SAMPLES);
            float xi = 0.0;
            vec3 rayi;
            float miei;
            Integrand(r, mu, muS, nu, 0.0, rayi, miei);
        
            for (int i = 1; i <= INSCATTER_INTEGRAL_SAMPLES; ++i) { 
                float xj = float(i) * dx; 
                vec3 rayj; 
                float miej; 
                Integrand(r, mu, muS, nu, xj, rayj, miej); 
                
                ray += (rayi + rayj) / 2.0 * dx; 
                mie += (miei + miej) / 2.0 * dx; 
                xi = xj; 
                rayi = rayj; 
                miei = miej; 
            } 
            
            ray *= betaR.xyz; 
            mie *= betaMSca.x;
        } 
        
        void main() {
            vec3 ray;
            float mie; // only calc the red channel
            vec4 dhdH;
            float mu, muS, nu, r;
        
            vec2 coords = v_Uv; // range 0 ~ 1.

            vec3 uvLayer;

            if (RES_R > 3.) {
                // hard coded to split the depth to 4 layer
                // Texture size = 256 x 512
                uvLayer = coords.y > 0.75 ? vec3(coords.x, coords.y * RES_R - 3., 8.) : // 16. ? atmosphere level layer
                    coords.y > 0.5 ? vec3(coords.x, coords.y * RES_R - 2., 4.) :
                    coords.y > 0.25 ? vec3(coords.x, coords.y * RES_R - 1., 2.) :
                                    vec3(coords.x, coords.y * RES_R, 0.); // ground level layer
            } else {
                // One layer only, Texture size is 256 x 128
                uvLayer = vec3(coords, 1.); // 2. ?
            } 
        
            GetLayer(uvLayer.z, r, dhdH); 
            GetMuMuSNu(uvLayer.xy, r, dhdH, mu, muS, nu); 
        
            Inscatter(r, mu, muS, nu, ray, mie); 
            
            // store only red component of single Mie scattering (cf. 'Angular precision')
            gl_FragColor = vec4(ray, mie);
        }
    `
};

function lerp(a, b, t) {
	if (t <= 0) {
		return a;
	} else if (t >= 1) {
		return b;
	}
	return a + (b - a) * t;
}

function clamp(x, min, max) {
	if (x > max) { return max; }
	if (x < min) { return min; }
	return x;
}

class SkyPrecomputeUtil {

	constructor(capabilities) {
		const isWebGL2 = capabilities.version > 1;

		let type;

		if (isWebGL2) {
			if (capabilities.getExtension("EXT_color_buffer_float") && capabilities.getExtension("OES_texture_float_linear")) {
				type = t3d.PIXEL_TYPE.FLOAT;
			} else {
				type = t3d.PIXEL_TYPE.HALF_FLOAT;
			}
		} else {
			if (capabilities.getExtension("OES_texture_float") && capabilities.getExtension("OES_texture_float_linear")) {
				type = t3d.PIXEL_TYPE.FLOAT;
			} else if (capabilities.getExtension("OES_texture_half_float") && capabilities.getExtension("OES_texture_half_float_linear")) {
				type = t3d.PIXEL_TYPE.HALF_FLOAT;
			} else {
				type = t3d.PIXEL_TYPE.UNSIGNED_BYTE;
				console.warn('Half float texture is not supported!');
			}
		}

		// Render targets

		const transmittanceRT = new t3d.RenderTarget2D(256, 64);
		transmittanceRT.texture.minFilter = t3d.TEXTURE_FILTER.LINEAR;
		transmittanceRT.texture.magFilter = t3d.TEXTURE_FILTER.LINEAR;
		transmittanceRT.texture.type = type;
		transmittanceRT.texture.format = t3d.PIXEL_FORMAT.RGBA;
		transmittanceRT.texture.generateMipmaps = false;

		const inscatterRT = new t3d.RenderTarget2D(512, 512);
		inscatterRT.texture.minFilter = t3d.TEXTURE_FILTER.LINEAR;
		inscatterRT.texture.magFilter = t3d.TEXTURE_FILTER.LINEAR;
		inscatterRT.texture.type = type;
		inscatterRT.texture.format = t3d.PIXEL_FORMAT.RGBA;
		inscatterRT.texture.generateMipmaps = false;

		// Render Passes

		const betaR = [5.8e-3, 1.35e-2, 3.31e-2, 1]; // default betaR

		const transmittancePass = new t3d.ShaderPostPass(TransmittanceShader);
		transmittancePass.uniforms.betaR = betaR;

		const inscatterPass = new t3d.ShaderPostPass(InscatterShader);
		inscatterPass.uniforms._Transmittance = transmittanceRT.texture;
		inscatterPass.uniforms.betaR = betaR;

		//

		this._transmittanceRT = transmittanceRT;
		this._inscatterRT = inscatterRT;

		this._transmittancePass = transmittancePass;
		this._inscatterPass = inscatterPass;

		this._betaR = betaR;
	}

	get transmittanceTexture() {
		return this._transmittanceRT.texture;
	}

	get inscatterTexture() {
		return this._inscatterRT.texture;
	}

	get betaR() {
		return this._betaR;
	}

	computeTransmittance(renderer) {
		renderer.renderPass.setRenderTarget(this._transmittanceRT);
		renderer.renderPass.setClearColor(0, 0, 0, 0);
		renderer.renderPass.clear(true, true, true);
		this._transmittancePass.render(renderer);
	}

	computeInscatter(renderer) {
		renderer.renderPass.setRenderTarget(this._inscatterRT);
		renderer.renderPass.setClearColor(0, 0, 0, 0);
		renderer.renderPass.clear(true, true, true);
		this._inscatterPass.render(renderer);
	}

	setBetaRayleighDensity(Wavelengths, SkyTint, AtmosphereThickness) {
		// Sky Tint shifts the value of Wavelengths
		const variableRangeWavelengths = _vec3_1.set(
			lerp(Wavelengths.x + 150, Wavelengths.x - 150, SkyTint.r),
			lerp(Wavelengths.y + 150, Wavelengths.y - 150, SkyTint.g),
			lerp(Wavelengths.z + 150, Wavelengths.z - 150, SkyTint.b)
		);

		variableRangeWavelengths.x = clamp(variableRangeWavelengths.x, 380, 780);
		variableRangeWavelengths.y = clamp(variableRangeWavelengths.y, 380, 780);
		variableRangeWavelengths.z = clamp(variableRangeWavelengths.z, 380, 780);

		// Evaluate Beta Rayleigh function is based on A.J.Preetham

		const WL = variableRangeWavelengths.multiplyScalar(1e-9); // nano meter unit

		const n = 1.0003; // the index of refraction of air
		const N = 2.545e25; // molecular density at sea level
		const pn = 0.035; // depolatization factor for standard air

		const waveLength4 = _vec3_2.set(Math.pow(WL.x, 4), Math.pow(WL.y, 4), Math.pow(WL.z, 4));
		const delta =  waveLength4.multiplyScalar(3.0 * N * (6.0 - 7.0 * pn));
		const ray = (8 * Math.pow(Math.PI, 3) * Math.pow(n * n - 1.0, 2) * (6.0 + 3.0 * pn));
		const betaR = _vec3_1.set(ray / delta.x, ray / delta.y, ray / delta.z);

		// Atmosphere Thickness ( Rayleigh ) scale
		const Km = 1000.0; // kilo meter unit
		betaR.multiplyScalar(Km * AtmosphereThickness);

		// w channel solves the Rayleigh Offset artifact issue
		this._betaR[0] = betaR.x;
		this._betaR[1] = betaR.y;
		this._betaR[2] = betaR.z;
		this._betaR[3] = Math.max(Math.pow(AtmosphereThickness, Math.PI), 1);

		// w channel solves the Rayleigh Offset artifact issue
		return this._betaR;
	}

}

const _vec3_1 = new t3d.Vector3();
const _vec3_2 = new t3d.Vector3();

class SkyTimeline {

	constructor(options) {
		// Objects

		this._sunLight = options.sunLight || null;
		this._moonLight = options.moonLight || null;
		this._hemisphereLight = options.hemisphereLight || null;

		this._sky = options.sky || null;
		this._clouds = options.clouds || null;
		this._stars = options.stars || null;

		// Settings

		this._lightColorGradient = (new Gradient()).setColors({
			0: new t3d.Color3(85 / 255, 99 / 255, 112 / 255),
			0.49: new t3d.Color3(85 / 255, 99 / 255, 112 / 255),
			0.51: new t3d.Color3(245 / 255, 173 / 255, 84 / 255),
			0.57: new t3d.Color3(249 / 255, 208 / 255, 144 / 255),
			1: new t3d.Color3(252 / 255, 222 / 255, 186 / 255)
		});

		this._skyColorGradient = (new Gradient()).setColors({
			0: new t3d.Color3(28 / 255, 32 / 255, 40 / 255),
			0.475: new t3d.Color3(28 / 255, 32 / 255, 40 / 255),
			0.5: new t3d.Color3(55 / 255, 65 / 255, 63 / 255),
			0.55: new t3d.Color3(138 / 255, 168 / 255, 168 / 255),
			0.65: new t3d.Color3(145 / 255, 174 / 255, 210 / 255),
			1: new t3d.Color3(145 / 255, 174 / 255, 210 / 255)
		});

		this._equatorColorGradient = (new Gradient()).setColors({
			0: new t3d.Color3(17 / 255, 21 / 255, 30 / 255),
			0.475: new t3d.Color3(17 / 255, 21 / 255, 30 / 255),
			0.52: new t3d.Color3(100 / 255, 100 / 255, 78 / 255),
			0.58: new t3d.Color3(128 / 255, 150 / 255, 128 / 255),
			1: new t3d.Color3(128 / 255, 150 / 255, 128 / 255)
		});

		this._groundColorGradient = (new Gradient()).setColors({
			0: new t3d.Color3(21 / 255, 20 / 255, 19 / 255),
			0.48: new t3d.Color3(21 / 255, 20 / 255, 19 / 255),
			0.55: new t3d.Color3(94 / 255, 89 / 255, 87 / 255),
			1: new t3d.Color3(94 / 255, 89 / 255, 87 / 255)
		});

		this._lightExposure = 1;

		this._sunAndMoon = {
			sunDirection: 0,
			sunEquatorOffset: 30,
			moonPositionOffset: 0,
			distance: 50
		};

		this._sunIntensity = 1;
		this._moonIntensity = 0.6;

		this._sunSize = 1;

		this._nightSkySettings = {
			nightZenithColor: [51 / 255, 74 / 255, 102 / 255, 255 / 255],
			nightHorizonColor: [72 / 255, 100 / 255, 128 / 255, 128 / 255],
			starIntensity: 1,
			outerSpaceIntensity: 0.25,
			moonInnerCorona: [225 / 255, 225 / 255, 225 / 255, 128 / 255],
			moonOuterCorona: [65 / 255, 88 / 255, 128 / 255, 128 / 255],
			moonSize: 1
		};

		this._timeline = 0;

		// Stats

		this._stats = {
			sunQuaternion: new t3d.Quaternion(),
			moonQuaternion: new t3d.Quaternion(),
			sunDirection: new t3d.Vector3(),
			moonDirection: new t3d.Vector3(),
			dayTimeBrightness: 0,
			nightTimeBrightness: 0,
			nightFade: 0,
			moonFade: 0,
			normalizedTime: 0,
			lightColor: new t3d.Color3(),
			skyColor: new t3d.Color3(),
			equatorColor: new t3d.Color3(),
			groundColor: new t3d.Color3()
		};
	}

	set timeline(value) {
		this._timeline = value;

		this.refresh();
	}

	get timeline() {
		return this._timeline;
	}

	refresh() {
		this._updateStats();

		this._updateLights();

		this._updateSkyMaterialUniform();
		this._updateCloudsMaterialUniform();
		this._updateStarsMaterialUniforms();
	}

	_updateStats() {
		const timeline = this._timeline;
		const sunAndMoon = this._sunAndMoon;
		const lightColorGradient = this._lightColorGradient;
		const skyColorGradient = this._skyColorGradient;
		const equatorColorGradient = this._equatorColorGradient;
		const groundColorGradient = this._groundColorGradient;

		const stats = this._stats;
		const { sunQuaternion, moonQuaternion, sunDirection, moonDirection, lightColor, skyColor, equatorColor, groundColor } = stats;

		const t = timeline * 360 / 24 - 90;
		_euler_1.set(0, degreeToRadian(sunAndMoon.sunDirection - 90), degreeToRadian(sunAndMoon.sunEquatorOffset));
		sunQuaternion.setFromEuler(_euler_1);
		_euler_1.set(degreeToRadian(t), 0, 0);
		_quat_1.setFromEuler(_euler_1);
		sunQuaternion.multiply(_quat_1);

		_euler_1.set(degreeToRadian(180), degreeToRadian(sunAndMoon.moonPositionOffset), degreeToRadian(180));
		moonQuaternion.copy(sunQuaternion).multiply(_quat_1.setFromEuler(_euler_1));

		getDirectionFromQuaternion(sunDirection, sunQuaternion, -1);
		getDirectionFromQuaternion(moonDirection, moonQuaternion, -1);

		stats.dayTimeBrightness = clamp(Math.max(sunDirection.y + 0.2, 0.0) / 1.2, 0, 1);
		stats.nightTimeBrightness = 1 - stats.dayTimeBrightness;
		stats.nightFade = Math.pow(stats.nightTimeBrightness, 4);
		stats.moonFade = (moonDirection.y > 0) ? Math.max(clamp((moonDirection.y - 0.1) * Math.PI * stats.nightTimeBrightness - stats.dayTimeBrightness, 0, 1), 0) : 0;

		stats.normalizedTime = sunDirection.y * 0.5 + 0.5;

		lightColorGradient.evaluate(lightColor, stats.normalizedTime);
		skyColorGradient.evaluate(skyColor, stats.normalizedTime);
		equatorColorGradient.evaluate(equatorColor, stats.normalizedTime);
		groundColorGradient.evaluate(groundColor, stats.normalizedTime);

		const exposureScale = Math.pow(this._lightExposure, 0.4);

		colorMultiplyScaler(lightColor, exposureScale);
		colorMultiplyScaler(skyColor, exposureScale);
		colorMultiplyScaler(equatorColor, exposureScale);
		colorMultiplyScaler(groundColor, exposureScale);
	}

	_updateLights() {
		const sunLight = this._sunLight;
		const moonLight = this._moonLight;
		const hemisphereLight = this._hemisphereLight;

		const sunAndMoon = this._sunAndMoon;
		const sunIntensity = this._sunIntensity;
		const moonIntensity = this._moonIntensity;

		const stats = this._stats;
		const { sunQuaternion, moonQuaternion, dayTimeBrightness, nightTimeBrightness, normalizedTime, lightColor, skyColor, groundColor } = stats;

		const daySky = clamp(dayTimeBrightness * 4, 0, 1);
		const nightSky = nightTimeBrightness;

		if (sunLight) {
			getDirectionFromQuaternion(sunLight.position, sunQuaternion, -sunAndMoon.distance);
			sunLight.lookAt(_origin, _up);

			sunLight.color.setRGB(lightColor.r * daySky, lightColor.g * daySky, lightColor.b * daySky);
			sunLight.intensity = normalizedTime > 0.48 ? sunIntensity : 0;
		}

		if (moonLight) {
			getDirectionFromQuaternion(moonLight.position, moonQuaternion, -sunAndMoon.distance);
			moonLight.lookAt(_origin, _up);

			moonLight.color.setRGB(lightColor.r * nightSky, lightColor.g * nightSky, lightColor.b * nightSky);
			moonLight.intensity = (normalizedTime < 0.5 && moonIntensity > 0.01) ? moonIntensity : 0;
		}

		if (hemisphereLight) {
			hemisphereLight.color.copy(skyColor);
			hemisphereLight.groundColor.copy(groundColor);
		}
	}

	_updateSkyMaterialUniform() {
		const nightSkySettings = this._nightSkySettings;

		const stats = this._stats;
		const { moonQuaternion, sunDirection, moonDirection, nightTimeBrightness, nightFade, moonFade } = stats;

		const sky = this._sky;

		if (sky) {
			sunDirection.toArray(sky.material.uniforms['_SunDirSize']);
			sky.material.uniforms['_SunDirSize'][3] = this._sunSize;

			moonDirection.toArray(sky.material.uniforms['_MoonDirSize']);
			sky.material.uniforms['_MoonDirSize'][3] = 8 / nightSkySettings.moonSize;

			sky.material.uniforms['_uSkyNightParams'][0] = nightFade;
			sky.material.uniforms['_uSkyNightParams'][1] = moonFade;
			sky.material.uniforms['_uSkyNightParams'][2] = nightFade;

			_vec4_1.fromArray(nightSkySettings.nightZenithColor).multiplyScalar(nightTimeBrightness * 0.25);
			_vec4_1.toArray(sky.material.uniforms['_NightZenithColor']);

			_vec4_1.fromArray(nightSkySettings.nightHorizonColor).multiplyScalar(nightFade * 0.5);
			_vec4_1.toArray(sky.material.uniforms['_NightHorizonColor']);

			sky.material.uniforms['_MoonInnerCorona'][0] = nightSkySettings.moonInnerCorona[0] * moonFade;
			sky.material.uniforms['_MoonInnerCorona'][1] = nightSkySettings.moonInnerCorona[1] * moonFade;
			sky.material.uniforms['_MoonInnerCorona'][2] = nightSkySettings.moonInnerCorona[2] * moonFade;
			sky.material.uniforms['_MoonInnerCorona'][3] = 4e2 / nightSkySettings.moonInnerCorona[3];

			sky.material.uniforms['_MoonOuterCorona'][0] = nightSkySettings.moonOuterCorona[0] * moonFade * 0.25;
			sky.material.uniforms['_MoonOuterCorona'][1] = nightSkySettings.moonOuterCorona[1] * moonFade * 0.25;
			sky.material.uniforms['_MoonOuterCorona'][2] = nightSkySettings.moonOuterCorona[2] * moonFade * 0.25;
			sky.material.uniforms['_MoonOuterCorona'][3] = 4 / nightSkySettings.moonOuterCorona[3];

			_mat4_1.makeRotationFromQuaternion(moonQuaternion).inverse();
			_mat4_1.toArray(sky.material.uniforms['_SpaceRotationMatrix']);
		}
	}

	_updateCloudsMaterialUniform() {
		const clouds = this._clouds;

		const nightSkySettings = this._nightSkySettings;
		const sunIntensity = this._sunIntensity;
		const moonIntensity = this._moonIntensity;

		const stats = this._stats;
		const { sunDirection, moonDirection, dayTimeBrightness, nightTimeBrightness, nightFade, moonFade, lightColor } = stats;

		if (clouds) {
			sunDirection.toArray(clouds.material.uniforms['_SunDirSize']);
			moonDirection.toArray(clouds.material.uniforms['_MoonDirSize']);

			clouds.material.uniforms['_uSkyNightParams'][0] = nightFade;
			clouds.material.uniforms['_uSkyNightParams'][1] = moonFade;
			// sky.material.uniforms['_uSkyNightParams'][2] = nightFade;

			const currentLightIntensity = lerp(moonIntensity, sunIntensity, clamp(dayTimeBrightness * 1.2, 0, 1));
			clouds.material.uniforms['_SkyLightColor'][0] = lightColor.r * Math.pow(currentLightIntensity, 2.2);
			clouds.material.uniforms['_SkyLightColor'][1] = lightColor.g * Math.pow(currentLightIntensity, 2.2);
			clouds.material.uniforms['_SkyLightColor'][2] = lightColor.b * Math.pow(currentLightIntensity, 2.2);

			_vec4_1.fromArray(nightSkySettings.nightZenithColor).multiplyScalar(nightTimeBrightness * 0.25);
			clouds.material.uniforms['_NightZenithColor'][0] = _vec4_1.x;
			clouds.material.uniforms['_NightZenithColor'][1] = _vec4_1.y;
			clouds.material.uniforms['_NightZenithColor'][2] = _vec4_1.z;
		}
	}

	_updateStarsMaterialUniforms() {
		const stars = this._stars;

		const stats = this._stats;
		const { moonQuaternion, moonFade } = stats;

		if (stars) {
			_mat4_1.makeRotationFromQuaternion(moonQuaternion);
			_mat4_1.toArray(stars.material.uniforms['_StarRotationMatrix']);

			stars.material.uniforms['_StarIntensity'] = 40 * moonFade;
		}
	}

}

const _origin = new t3d.Vector3(0, 0, 0);
const _up = new t3d.Vector3(0, 1, 0);

const _vec4_1 = new t3d.Vector4();
const _mat4_1 = new t3d.Matrix4();

const _euler_1 = new t3d.Euler(0, 0, 0, 'YZX');
const _quat_1 = new t3d.Quaternion();

function degreeToRadian(degree) {
	return degree * Math.PI / 180;
}

function getDirectionFromQuaternion(out, quaternion, distance) {
	out.set(0, 0, 1);
	out.applyQuaternion(quaternion);
	out.normalize();
	return out.multiplyScalar(distance);
}

class Gradient {

	constructor() {
		this._array = [];
	}

	setColors(configure) {
		this._array.length = 0;

		for (const key in configure) {
			this._array.push({ key: +key, value: configure[key] });
		}

		this._array.sort((a, b) => a.key - b.key);

		return this;
	}

	evaluate(out, value) {
		for (let i = 0; i < this._array.length - 1; i++) {
			const e1 = this._array[i];
			const e2 = this._array[i + 1];
			if (e1.key <= value && value <= e2.key) {
				const t = (value - e1.key) / (e2.key - e1.key);
				out.lerpColors(e1.value, e2.value, t);
			}
		}

		return out;
	}

}

function colorMultiplyScaler(color, scalar) {
	color.r *= scalar;
	color.g *= scalar;
	color.b *= scalar;
	return color;
}

export { Clouds, Sky, SkyPrecomputeUtil, SkyTimeline, Stars };
