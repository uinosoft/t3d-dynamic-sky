// t3d-dynamic-sky
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("t3d")):"function"==typeof define&&define.amd?define(["exports","t3d"],n):n((t="undefined"!=typeof globalThis?globalThis:t||self).t3d=t.t3d||{},t.t3d)}(this,(function(t,n){"use strict";function e(t){var n=Object.create(null);return t&&Object.keys(t).forEach((function(e){if("default"!==e){var o=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(n,e,o.get?o:{enumerable:!0,get:function(){return t[e]}})}})),n.default=t,Object.freeze(n)}var o=e(n);const r=[-.03504532,.4964324,.04823573,-.0567045,.4964324,-.01842443,0,.5,0,-.09768943,.4893355,.03174119,-.07381047,.4839744,.1015913,-.1194278,.4839744,-.03880448,-.1414529,.4716036,.08706941,-.1656159,.4716036,.01270325,-.1145225,.4604763,.1576266,-.1853012,.4604763,-.06020803,-.1851341,.4414262,.1444586,-.2126627,.4472136,.06909828,-.2346872,.4414262,-.008050382,-.1545085,.4253255,.2126627,-.2499999,.4253255,-.08122998,-.2252235,.3992738,.1996368,-.2566878,.4099547,.1266829,-.2821271,.4099547,.04838858,-.2995532,.3992738,-.02912664,-.1908708,.380199,.262711,-.3088352,.380199,-.1003467,-.2587428,.3482778,.248505,-.2938927,.3618034,.1809016,-.3232889,.3666746,.1050429,-.3440955,.3618034,.0263932,-.3553949,.3482778,-.04895964,-.2214314,.3287566,.304774,-.3582834,.3287566,-.1164134,-.2842597,.2931641,.2885329,-.3220025,.3071692,.2279507,-.3549554,.3149689,.1574844,-.379732,.3149689,.08122992,-.3944916,.3071692,.004852206,-.3995663,.2931641,-.06634454,-.2453173,.2753395,.3376501,-.3969315,.2753395,-.128971,-.3020217,.2384906,.3192257,-.3408591,.2511477,.2659696,-.376172,.259783,.202503,-.4045085,.2628656,.1314328,-.4233578,.259783,.05727997,-.4320939,.2511477,-.0148219,-.4319769,.2384906,-.08073506,-.2628655,.2236068,.3618034,-.4253254,.2236068,-.1381966,-.3969316,.2384906,-.1885936,-.3622522,.2931641,-.1811855,-.3162982,.3482778,-.1692868,-.2594638,.3992738,-.1525091,-.1945978,.4414262,-.1314328,-.1265193,.4716036,-.1076238,-.06037536,.4893355,-.08309958,1.117587e-8,.4964324,-.05962265,0,.5,0,2.980232e-8,.4839744,-.1255738,-.06325964,.4716036,-.1535846,2.607703e-8,.4604763,-.1948372,-.1314328,.4472136,-.1809017,-.06486594,.4414262,-.2256885,2.980232e-8,.4253255,-.2628655,-.1998035,.4099547,-.2049774,-.1332023,.4099547,-.2533659,-.06486595,.3992738,-.2938926,5.960464e-8,.380199,-.3247286,-.1998035,.3666746,-.2750059,-.1314328,.3618034,-.3190983,-.06325965,.3482778,-.35313,-.2628655,.3618034,-.2236069,7.450581e-8,.3287566,-.3767215,-.3162982,.3071692,-.2358019,-.2594637,.3149689,-.2889172,-.1945978,.3149689,-.3360451,-.1265193,.3071692,-.3736843,-.06037539,.2931641,-.4005117,5.960464e-8,.2753395,-.4173586,-.3582835,.2511477,-.2419873,-.3088354,.259783,-.2951839,-.25,.2628656,-.3440955,-.1853012,.259783,-.3849366,-.1194279,.2511477,-.4155259,-.05670463,.2384906,-.435783,-.09768955,.1904473,-.4518701,-.165616,.1995454,-.4274961,-.141453,.1330303,-.4607537,-.07381051,.1255738,-.4783129,-.1145225,.06494574,-.4823553,-.1851342,.06820413,-.4594274,-.1545085,0,-.4755283,-.08017868,0,-.4935295,-.2252235,0,-.4464016,-.2566878,.0700286,-.4233289,-.2938927,-7.450581e-9,-.4045085,-.323289,.07002861,-.3749403,-.3549554,-4.097819e-8,-.3521459,-.379732,.06820408,-.3180439,-.4045085,0,-.2938926,-.4233578,.06494573,-.2579733,-.4445979,4.097819e-8,-.2287635,-.4577511,.06651513,-.1898409,-.4320939,.1255738,-.2180047,-.4599417,.1269649,-.1494441,-.431977,.1788679,-.1772067,-.4536361,.178868,-.1105464,-.4777113,.1255738,-.07760882,-.4819142,.06651513,-.1154748,-.4941365,.06494574,-.04013863,-.4941511,0,-.07625456,-.4755282,7.450581e-9,-.1545085,-.5,0,0,-.4941511,.06820413,.03410213,-.4941511,0,.07625456,-.4819306,.0700286,.1133088,-.4755282,-7.450581e-9,.1545085,-.4564913,.07002861,.1916031,-.4445978,-4.097819e-8,.2287635,-.4198212,.06820408,.2628655,-.4045085,0,.2938926,-.3761719,.06494573,.322919,-.3549554,4.097819e-8,.3521459,-.3220024,.06651513,.3766831,-.3408592,.1255738,.3435786,-.2842597,.1269649,.3912497,-.3020218,.1788679,.3560746,-.2453171,.178868,.3972729,-.2214313,.1255738,.430348,-.2587428,.06651513,.4226439,-.1908707,.06494574,.4575483,-.2252235,0,.4464017,-.2938927,7.450581e-9,.4045085,-.1545085,0,.4755282,-.120268,.06820413,.4805037,-.08017866,0,.4935295,-.04116167,.0700286,.4933576,4.470348e-8,-7.450581e-9,.4999999,.04116186,.07002861,.4933577,.08017875,-4.097819e-8,.4935295,.1202681,.06820408,.4805037,.1545085,0,.4755283,.1908708,.06494573,.4575482,.2252235,4.097819e-8,.4464016,.2587427,.06651513,.422644,.2214314,.1255738,.430348,.2842596,.1269649,.3912497,.2453172,.1788679,.3972729,.3020218,.178868,.3560745,.2628655,.2236068,.3618034,.3408592,.1255738,.3435785,.3220024,.06651513,.3766832,.376172,.06494574,.322919,.3549553,0,.3521459,.2938926,7.450581e-9,.4045085,.4045085,0,.2938927,.4198214,.06820413,.2628655,.4445979,0,.2287634,.4564914,.0700286,.191603,.4755283,-7.450581e-9,.1545085,.4819306,.07002861,.1133086,.4941511,-4.097819e-8,.07625447,.4941511,.06820408,.03410202,.5000001,0,-1.490116e-8,.4941365,.06494573,-.04013865,.4941511,4.097819e-8,-.07625453,.4819142,.06651513,-.1154748,.4777113,.1255738,-.07760891,.4599417,.1269649,-.1494441,.4536361,.1788679,-.1105465,.4319769,.178868,-.1772067,.4253254,.2236068,-.1381966,.4320938,.1255738,-.2180047,.4577512,.06651513,-.1898409,.4233577,.06494574,-.2579733,.4445979,0,-.2287634,.4755282,7.450581e-9,-.1545085,.4045085,0,-.2938926,.4819142,.1330303,-.007851079,.4755283,.1381966,.06909825,.4564912,.1400572,.1483229,.4253255,.1381966,.2236067,.3852621,.1330303,.2896136,.3446351,.1904473,.3081501,.3852621,.1995454,.248505,.4198213,.2046123,.1785606,.4445979,.2046123,.1023061,.4577512,.1995454,.02540648,.3020218,.2384906,.3192257,.3408592,.2511477,.2659696,.2842596,.2931641,.2885331,.3220024,.3071692,.2279508,.2587427,.3482778,.2485051,.2938926,.3618034,.1809017,.2252234,.3992738,.1996369,.2566877,.4099547,.126683,.185134,.4414262,.1444586,.2126627,.4472136,.06909832,.1414529,.4716036,.08706944,.1656159,.4716036,.01270329,.09768942,.4893355,.03174124,.1194278,.4839744,-.03880444,.05670452,.4964324,-.0184244,.06037539,.4893355,-.08309957,1.117587e-8,.4964324,-.05962265,0,.5,0,2.980232e-8,.4839744,-.1255738,.06325969,.4716036,-.1535846,.1265193,.4716036,-.1076237,2.607703e-8,.4604763,-.1948372,.1853012,.4604763,-.06020798,.06486601,.4414262,-.2256885,.1314328,.4472136,-.1809017,.1945978,.4414262,-.1314328,2.980232e-8,.4253255,-.2628655,.25,.4253255,-.0812299,.06486606,.3992738,-.2938926,.1332024,.4099547,-.2533659,.1998035,.4099547,-.2049773,.2594638,.3992738,-.152509,5.960464e-8,.380199,-.3247286,.3088353,.380199,-.1003466,.06325974,.3482778,-.35313,.1314328,.3618034,-.3190983,.1998035,.3666746,-.2750059,.2628655,.3618034,-.2236068,.3162983,.3482778,-.1692867,7.450581e-8,.3287566,-.3767215,.3582835,.3287566,-.1164133,.06037552,.2931641,-.4005117,.1265194,.3071692,-.3736843,.1945979,.3149689,-.3360451,.2594638,.3149689,-.2889172,.3162983,.3071692,-.2358018,.3622523,.2931641,-.1811853,5.960464e-8,.2753395,-.4173586,.3969316,.2753395,-.1289708,.05670461,.2384906,-.435783,.1194279,.2511477,-.4155259,.1853012,.259783,-.3849367,.2499999,.2628656,-.3440955,.3088353,.259783,-.295184,.3582835,.2511477,-.2419872,.3969315,.2384906,-.1885936,.4319769,.2384906,-.08073507,.3995663,.2931641,-.0663444,.3553949,.3482778,-.04895957,.2995532,.3992738,-.02912654,.2346872,.4414262,-.008050337,.2821271,.4099547,.04838863,.3440955,.3618034,.02639326,.3232889,.3666746,.1050429,.3944916,.3071692,.004852302,.3797319,.3149689,.08123002,.3549553,.3149689,.1574845,.4233578,.259783,.05727994,.4045085,.2628656,.1314328,.3761719,.259783,.202503,.4320939,.2511477,-.01482192,.4599417,.1904473,-.0467274,.3995663,.1904473,-.2325438,.3944915,.1330303,-.2769105,.3797319,.06820413,-.3180439,.3549553,0,-.352146,.3232889,.0700286,-.3749404,.2938926,-7.450581e-9,-.4045085,.2566877,.07002861,-.423329,.2252234,-4.097819e-8,-.4464017,.1851341,.06820408,-.4594275,.1545085,0,-.4755283,.1145225,.06494573,-.4823553,.3440955,.1381966,-.3354103,.2821271,.1400572,-.3883147,.2126627,.1381966,-.4309017,.1414529,.1330303,-.4607537,.3553948,.1995454,-.2896138,.2995531,.2046123,-.3440955,.2346872,.2046123,-.3912234,.1656159,.1995454,-.4274963,.09768943,.1904473,-.4518701,.07381047,.1255738,-.4783128,.03909664,.06651513,-.4940113,2.980232e-8,.1269649,-.4836114,.03504534,.1788679,-.4655943,-.0001689643,.178868,-.4655943,0,.2236068,-.4472136,-.0003032982,.06651513,-.4940113,1.490116e-8,7.450581e-9,-.5,.08017874,4.097819e-8,-.4935295,.03504531,.4964324,.04823574,0,.5,0,.07381043,.4839744,.1015914,.1145224,.4604763,.1576266,.1545084,.4253255,.2126627,.1908707,.380199,.262711,.2214313,.3287566,.3047741,.2453172,.2753395,.3376502,-2.235174e-8,.4893355,.1027167,0,.5,0,-.03909664,.4716036,.1614356,.03909659,.4716036,.1614356,.08017866,.4414262,.2207131,-3.72529e-8,.4472136,.2236068,-.08017873,.4414262,.2207131,.120268,.3992738,.2758915,.04116175,.4099547,.2832717,-.04116186,.4099547,.2832717,-.1202681,.3992738,.2758913,.1563864,.3482778,.3228713,.08122984,.3618034,.3354101,-5.960464e-8,.3666746,.339926,-.08122993,.3618034,.3354102,-.1563865,.3482778,.3228713,.18657,.2931641,.3595086,.1172897,.3071692,.3766831,.04008927,.3149689,.3862479,-.04008941,.3149689,.3862479,-.1172899,.3071692,.3766831,-.1865702,.2931641,.3595085,.2102718,.2384906,.3858859,.1476209,.2511477,.4063655,.0763483,.259783,.4203376,-1.490116e-8,.2628656,.4253254,-.07634826,.259783,.4203376,-.1476209,.2511477,.4063655,-.2102718,.2384906,.385886,-.18657,.1904473,.422991,-.1563863,.1330303,.4559016,-.08122984,.1381966,.4736069,7.450581e-8,.1400572,.4799833,.08122994,.1381966,.4736067,.1563865,.1330303,.4559015,-.1172897,.1995454,.4431984,-.04008928,.2046123,.4544521,.04008942,.2046123,.4544521,.1172899,.1995454,.4431983,.1865701,.1904473,.422991,-.4819142,.1330303,-.007850945,-.4755282,.1381966,.06909838,-.4564912,.1400572,.148323,-.4253254,.1381966,.2236068,-.385262,.1330303,.2896137,-.4599417,.1904473,-.04672723,-.4577512,.1995454,.02540663,-.4445978,.2046123,.1023062,-.4198212,.2046123,.1785607,-.385262,.1995454,.2485051,-.344635,.1904473,.3081503,-.3995663,.1904473,-.2325437,-.3944916,.1330303,-.2769104,-.3440955,.1381966,-.3354101,-.2821271,.1400572,-.3883146,-.2126628,.1381966,-.4309016,-.2346873,.2046123,-.3912234,-.2995532,.2046123,-.3440955,-.355395,.1995454,-.2896137,0,.2236068,-.4472136,-.0350454,.178868,-.4655943,2.980232e-8,.1269649,-.4836114,-.03909657,.06651513,-.4940113,1.490116e-8,7.450581e-9,-.5,-.0001689643,.178868,-.4655943,-.0003032982,.06651513,-.4940113],a=[.3999997,.9239051,.2,.9239051,.3,1,.2999999,.8682792,.3999997,.8383842,.2,.8383842,.337816,.7844151,.2621837,.7844151,.3999997,.7451752,.2,.7451752,.3554571,.68876,.3,.7048329,.2445426,.68876,.3999998,.6475838,.2,.6475838,.3654265,.5887959,.3229657,.6119527,.2770341,.6119527,.2345732,.588796,.3999998,.5499923,.2,.5499923,.371788,.4905702,.337816,.5150341,.2999999,.524088,.2621837,.5150343,.2282117,.4905702,.3999997,.4567834,.2,.4567834,.3761872,.3988542,.3480423,.4211541,.3164599,.4338392,.2835399,.4338393,.2519574,.4211541,.2238126,.3988542,.3999998,.3712624,.2,.3712624,.3794061,.3165382,.3554571,.3350221,.3285963,.3478128,.3,.3524165,.2714034,.3478128,.2445427,.3350221,.2205937,.3165382,.3999998,.2951673,.2,.2951673,.1794063,.3165382,.1761873,.3988542,.1717882,.4905702,.1654267,.5887959,.1554573,.68876,.1378161,.7844151,.09999996,.8682793,1.192093e-7,.9239051,.1,1,0,.8383842,.06218386,.7844151,0,.7451752,.09999996,.7048329,.04454279,.68876,0,.6475838,.1229658,.6119525,.07703424,.6119527,.03457332,.588796,0,.5499924,.09999996,.524088,.06218386,.5150343,.02821183,.4905702,.1378161,.5150341,0,.4567834,.1480424,.4211541,.1164601,.4338393,.08353996,.4338393,.05195755,.4211541,.02381265,.3988542,0,.3712624,.1554573,.3350221,.1285965,.3478128,.09999996,.3524165,.07140356,.3478128,.04454279,.3350221,.02059376,.3165382,.03388619,.248768,.05882466,.2613485,.04740751,.1714443,.02436781,.161616,.03710026,.08292592,.06096619,.08711183,.05000007,5.960464e-8,.02563244,5.960464e-8,.0743677,5.960464e-8,.08675212,.08945736,.1,5.960464e-8,.1132479,.08945736,.1256323,0,.1390339,.08711183,.15,5.960464e-8,.1628998,.08292592,.1743676,5.960464e-8,.1874304,.08494151,.1756323,.161616,.2,.1634465,.1880429,.2329024,.211957,.2329025,.2243676,.161616,.2125695,.08494151,.2371001,.08292592,.2256323,5.960464e-8,.2,5.960464e-8,.2499999,5.960464e-8,.2609661,.08711183,.2743676,5.960464e-8,.286752,.08945736,.3,5.960464e-8,.3132478,.08945736,.3256322,0,.3390338,.08711183,.3499998,5.960464e-8,.3628997,.08292592,.3743675,5.960464e-8,.3874304,.08494151,.3756322,.161616,.3999998,.1634465,.3880428,.2329024,.4119569,.2329025,.4243675,.161616,.4125693,.08494151,.4370999,.08292592,.4256321,5.960464e-8,.3999998,5.960464e-8,.4499997,5.960464e-8,.4609659,.08711183,.4743674,5.960464e-8,.4867519,.08945736,.4999998,5.960464e-8,.5132477,.08945736,.5256321,0,.5390337,.08711183,.5499997,5.960464e-8,.5628995,.08292592,.5743674,5.960464e-8,.5874302,.08494151,.5756321,.161616,.5999997,.1634465,.5880426,.2329025,.6119568,.2329025,.5999997,.2951673,.6243674,.161616,.6125692,.08494151,.6370999,.08292592,.625632,5.960464e-8,.5999997,5.960464e-8,.6499997,5.960464e-8,.6609658,.08711183,.6743673,5.960464e-8,.6867517,.08945736,.6999996,5.960464e-8,.7132476,.08945736,.725632,0,.7390335,.08711183,.7499996,5.960464e-8,.7628994,.08292592,.7743673,5.960464e-8,.7874301,.08494151,.775632,.161616,.7999996,.1634465,.7880425,.2329025,.8119566,.2329025,.7999996,.2951673,.8243673,.161616,.8125691,.08494151,.8370998,.08292592,.8256319,5.960464e-8,.7999996,5.960464e-8,.8499996,5.960464e-8,.7525922,.1714442,.7270338,.1782785,.6999997,.1807449,.6729655,.1782785,.6474071,.1714443,.6338857,.248768,.6588242,.2613485,.6859961,.2684016,.7140032,.2684016,.7411751,.2613485,.6205934,.3165382,.6445423,.3350221,.6238123,.3988542,.6519572,.4211541,.6282114,.4905702,.6621835,.5150343,.634573,.588796,.6770338,.6119527,.6445423,.68876,.6999996,.7048329,.6621835,.7844151,.7378157,.7844151,.6999996,.8682793,.7999996,.8383842,.7999996,.9239052,.8999995,.8682793,.9999995,.9239051,.9,1,.9999995,.8383842,.9378157,.7844151,.8621834,.7844151,.9999995,.7451752,.7999996,.7451752,.9554567,.68876,.8999995,.7048329,.8445423,.68876,.9999995,.6475838,.7999996,.6475838,.9654262,.588796,.9229653,.6119527,.8770337,.6119527,.8345729,.588796,.9999995,.5499924,.7999996,.5499924,.9717877,.4905702,.9378157,.5150343,.8999995,.524088,.8621834,.5150343,.8282113,.4905702,.9999994,.4567834,.7999995,.4567834,.9761868,.3988542,.948042,.4211541,.9164596,.4338393,.8835395,.4338393,.851957,.4211541,.8238122,.3988542,.9999995,.3712624,.7999996,.3712624,.9794058,.3165382,.9554568,.3350221,.928596,.3478128,.8999995,.3524165,.8714031,.3478128,.8445423,.3350221,.8205933,.3165382,.7794059,.3165382,.7761869,.3988542,.7717878,.4905702,.7654263,.588796,.7554569,.68876,.7229654,.6119527,.7378158,.5150343,.6999996,.524088,.7480421,.4211541,.7164596,.4338393,.6835396,.4338393,.7285961,.3478128,.6999996,.3524165,.6714032,.3478128,.7554569,.3350221,.7661135,.248768,.8338857,.248768,.847407,.1714443,.8609657,.08711183,.8743672,5.960464e-8,.8867517,.08945736,.8999995,5.960464e-8,.9132475,.08945736,.9256318,0,.9390334,.08711183,.9499995,5.960464e-8,.9628993,.08292592,.8729655,.1782785,.8999995,.1807449,.9270337,.1782785,.9525921,.1714442,.8588241,.2613485,.885996,.2684016,.9140031,.2684016,.941175,.2613484,.9661134,.248768,.9756318,.161616,.98743,.08494151,.9999994,.1634465,.9880424,.2329025,.9999994,.2335038,.9999994,.2951673,.9999994,.08520389,.9999994,5.960464e-8,.9743671,5.960464e-8,.5999995,.9239051,.7,1,.5999997,.8383842,.5999997,.7451752,.5999997,.6475838,.5999997,.5499924,.5999997,.4567834,.5999997,.3712624,.4999997,.8682793,.5,1,.4621836,.7844151,.5378159,.7844151,.555457,.68876,.4999997,.7048329,.4445425,.68876,.5654263,.588796,.5229656,.6119527,.4770339,.6119527,.4345731,.588796,.571788,.4905702,.5378159,.5150343,.4999997,.524088,.4621837,.5150343,.4282115,.4905702,.576187,.3988542,.5480422,.4211541,.5164598,.4338393,.4835397,.4338393,.4519573,.4211541,.4238124,.3988542,.579406,.3165382,.555457,.3350221,.5285962,.3478128,.4999998,.3524165,.4714033,.3478128,.4445425,.3350221,.4205936,.3165382,.4338859,.248768,.4474072,.1714443,.4729656,.1782785,.4999998,.1807449,.5270339,.1782785,.5525923,.1714442,.4588243,.2613485,.4859962,.2684016,.5140033,.2684016,.5411752,.2613485,.5661136,.248768,.2474073,.1714443,.2729658,.1782785,.3,.1807448,.327034,.1782784,.3525925,.1714442,.2338861,.248768,.2588244,.2613485,.2859964,.2684016,.3140035,.2684014,.3411754,.2613484,.3661138,.248768,.1661139,.2487679,.1525926,.1714442,.1270342,.1782785,.1,.1807448,.07296592,.1782785,.08599645,.2684016,.1140036,.2684014,.1411755,.2613484,0,.2951673,.01195723,.2329025,0,.1634465,.01256955,.08494151,0,5.960464e-8,5781651e-11,.2335038,9781122e-11,.08520389],i=[0,1,2,3,1,0,4,3,0,3,5,1,6,3,4,7,5,3,6,7,3,8,6,4,7,9,5,10,6,8,11,7,6,10,11,6,12,9,7,11,12,7,13,10,8,12,14,9,15,10,13,16,11,10,15,16,10,17,12,11,16,17,11,18,14,12,17,18,12,19,15,13,18,20,14,21,15,19,22,16,15,21,22,15,23,17,16,22,23,16,24,18,17,23,24,17,25,20,18,24,25,18,26,21,19,25,27,20,28,21,26,29,22,21,28,29,21,30,23,22,29,30,22,31,24,23,30,31,23,32,25,24,31,32,24,33,27,25,32,33,25,34,28,26,33,35,27,36,28,34,37,29,28,36,37,28,38,30,29,37,38,29,39,31,30,38,39,30,40,32,31,39,40,31,41,33,32,40,41,32,42,35,33,41,42,33,43,36,34,42,44,35,44,45,35,45,46,35,35,46,27,46,47,27,27,47,20,47,48,20,20,48,14,48,49,14,14,49,9,49,50,9,9,50,5,50,51,5,5,51,1,51,52,1,1,52,53,51,54,52,55,54,51,50,55,51,55,56,54,57,55,50,49,57,50,58,56,55,57,58,55,58,59,56,60,57,49,61,58,57,60,61,57,62,59,58,61,62,58,62,63,59,64,61,60,65,62,61,64,65,61,66,63,62,65,66,62,67,64,60,67,60,48,48,60,49,47,67,48,66,68,63,69,67,47,70,64,67,69,70,67,71,65,64,70,71,64,72,66,65,71,72,65,73,68,66,72,73,66,46,69,47,73,74,68,75,69,46,76,70,69,75,76,69,77,71,70,76,77,70,78,72,71,77,78,71,79,73,72,78,79,72,80,74,73,79,80,73,45,75,46,80,79,81,79,82,81,79,78,82,81,82,83,81,83,84,84,83,85,83,86,85,85,86,87,87,88,85,86,89,87,86,90,89,90,91,89,90,92,91,92,93,91,92,94,93,94,95,93,94,96,95,97,95,96,97,96,98,98,96,99,98,99,100,100,99,101,100,101,102,102,101,44,103,100,102,104,100,103,104,98,100,105,104,103,106,104,105,107,98,104,106,107,104,107,97,98,108,106,105,105,109,108,109,110,108,109,111,110,111,112,110,111,113,112,113,114,112,113,115,114,115,116,114,115,117,116,118,116,117,118,117,119,119,117,120,119,120,121,121,120,122,121,122,123,123,122,43,124,121,123,125,121,124,125,119,121,126,125,124,127,125,126,128,119,125,127,128,125,128,118,119,129,127,126,126,130,129,130,131,129,130,132,131,132,133,131,132,134,133,134,135,133,134,136,135,136,137,135,136,138,137,139,137,138,139,138,140,140,138,141,140,141,142,142,141,143,142,143,144,144,143,145,146,142,144,147,142,146,147,140,142,148,147,146,149,147,148,150,140,147,149,150,147,150,139,140,151,149,148,148,152,151,152,153,151,152,154,153,154,155,153,154,156,155,156,157,155,156,158,157,158,159,157,158,160,159,161,159,160,161,160,162,162,160,163,162,163,164,164,163,165,164,165,166,166,165,167,168,164,166,169,164,168,169,162,164,170,169,168,171,169,170,172,162,169,171,172,169,172,161,162,173,171,170,174,160,158,174,163,160,175,174,158,175,158,156,176,175,156,176,156,154,177,176,154,177,154,152,178,177,152,178,152,148,146,178,148,179,178,146,180,177,178,179,180,178,181,176,177,180,181,177,182,175,176,181,182,176,183,174,175,182,183,175,144,179,146,184,179,144,185,180,179,184,185,179,185,184,186,185,186,187,187,186,188,187,188,189,189,188,190,189,190,191,191,190,192,191,192,193,193,192,194,193,194,195,195,194,196,195,196,197,197,196,198,199,197,198,199,198,200,200,198,201,202,199,200,203,199,202,204,197,199,203,204,199,205,203,202,204,206,197,206,195,197,207,203,205,208,204,203,207,208,203,209,206,204,208,209,204,210,207,205,209,211,206,212,207,210,213,208,207,212,213,207,214,209,208,213,214,208,215,211,209,214,215,209,216,212,210,215,217,211,218,212,216,219,213,212,218,219,212,220,214,213,219,220,213,221,215,214,220,221,214,222,217,215,221,222,215,223,218,216,222,224,217,225,218,223,226,219,218,225,226,218,227,220,219,226,227,219,228,221,220,227,228,220,229,222,221,228,229,221,230,224,222,229,230,222,231,225,223,230,232,224,233,225,231,234,226,225,233,234,225,235,227,226,234,235,226,236,228,227,235,236,227,237,229,228,236,237,228,238,230,229,237,238,229,239,232,230,238,239,230,239,167,232,167,240,232,240,241,232,232,241,224,241,242,224,224,242,217,242,243,217,217,243,211,243,244,211,211,244,206,244,195,206,244,193,195,245,193,244,243,245,244,245,191,193,246,245,243,242,246,243,247,191,245,246,247,245,247,189,191,248,246,242,241,248,242,249,247,246,248,249,246,250,189,247,249,250,247,250,187,189,251,249,248,252,250,249,251,252,249,253,187,250,252,253,250,254,251,248,254,248,241,240,254,241,253,185,187,185,253,180,253,181,180,253,252,181,252,182,181,252,251,182,251,183,182,251,254,183,254,255,183,254,240,255,183,255,174,255,163,174,255,165,163,240,165,255,240,167,165,167,239,166,239,256,166,166,256,168,256,257,168,168,257,170,257,258,170,170,258,173,258,259,173,258,260,259,260,261,259,260,262,261,262,263,261,262,264,263,264,265,263,264,266,265,267,260,258,257,267,258,268,262,260,267,268,260,269,264,262,268,269,262,270,266,264,269,270,264,271,267,257,272,268,267,271,272,267,273,269,268,272,273,268,274,270,269,273,274,269,256,271,257,274,275,270,238,271,256,237,272,271,238,237,271,236,273,272,237,236,272,235,274,273,236,235,273,234,275,274,235,234,274,239,238,256,234,233,275,275,276,270,270,276,266,277,266,276,277,276,278,278,276,279,275,279,276,233,279,275,280,278,279,281,280,279,233,281,279,281,233,231,278,282,277,282,283,277,284,266,277,283,284,277,284,265,266,198,285,286,196,285,198,196,287,285,194,287,196,194,288,287,192,288,194,192,289,288,190,289,192,190,290,289,188,290,190,188,291,290,186,291,188,186,292,291,184,292,186,184,145,292,287,293,285,293,0,285,285,0,294,293,4,0,295,4,293,296,295,293,296,293,287,288,296,287,295,8,4,297,296,288,298,295,296,297,298,296,299,8,295,298,299,295,289,297,288,299,13,8,300,297,289,301,298,297,300,301,297,302,299,298,301,302,298,303,13,299,302,303,299,290,300,289,303,19,13,304,300,290,305,301,300,304,305,300,306,302,301,305,306,301,307,303,302,306,307,302,308,19,303,307,308,303,291,304,290,308,26,19,309,304,291,310,305,304,309,310,304,311,306,305,310,311,305,312,307,306,311,312,306,313,308,307,312,313,307,314,26,308,313,314,308,292,309,291,314,34,26,315,309,292,316,310,309,315,316,309,317,311,310,316,317,310,318,312,311,317,318,311,319,313,312,318,319,312,320,314,313,319,320,313,321,34,314,320,321,314,145,315,292,321,43,34,43,321,123,321,322,123,321,320,322,123,322,124,322,323,124,124,323,126,323,130,126,323,324,130,324,132,130,324,325,132,325,134,132,325,326,134,326,136,134,326,327,136,327,138,136,327,141,138,328,324,323,322,328,323,329,325,324,328,329,324,330,326,325,329,330,325,331,327,326,330,331,326,332,141,327,331,332,327,332,143,141,319,329,328,318,330,329,319,318,329,317,331,330,318,317,330,316,332,331,317,316,331,315,143,332,316,315,332,320,319,328,320,328,322,315,145,143,145,184,144,333,109,105,103,333,105,333,334,109,334,111,109,334,335,111,335,113,111,335,336,113,336,115,113,336,337,115,337,117,115,337,120,117,338,333,103,339,334,333,338,339,333,340,335,334,339,340,334,341,336,335,340,341,335,342,337,336,341,342,336,343,120,337,342,343,337,102,338,103,343,122,120,42,338,102,41,339,338,42,41,338,40,340,339,41,40,339,39,341,340,40,39,340,38,342,341,39,38,341,37,343,342,38,37,342,36,122,343,37,36,343,44,42,102,36,43,122,45,44,101,45,101,344,344,101,99,344,99,345,345,99,96,345,96,94,346,345,94,346,94,92,347,346,92,347,92,90,348,347,90,348,90,86,83,348,86,82,348,83,349,347,348,82,349,348,350,346,347,349,350,347,351,345,346,350,351,346,351,344,345,78,349,82,77,350,349,78,77,349,76,351,350,77,76,350,76,75,351,75,344,351,75,45,344,80,352,74,352,80,353,80,81,353,353,81,84,84,354,353,355,354,84,85,355,84,88,355,85,88,356,355,357,352,353,354,357,353,358,354,355,356,358,355],l=[.07383534,-.9920789,-.1016258,.1194681,-.992079,.03881736,0,-1,0,.2037204,-.9767888,-.06619292,.1504572,-.966684,-.2070859,.2434447,-.9666839,.0791003,.2900958,-.9409217,-.1746732,.3373627,-.9409217,-.02920019,.2305321,-.919878,-.3173001,.3730088,-.919878,.1211979,.3756484,-.8813244,-.2866278,.4293835,-.8922809,-.1395151,.4723814,-.8813245,.01108592,.3090169,-.850651,-.4253252,.4999999,-.8506509,.1624597,.4539095,-.7990363,-.3943441,.5151172,-.8193403,-.2516658,.5646641,-.8193403,-.09917583,.5990102,-.7990361,.05223009,.3805115,-.7621806,-.5237287,.6156803,-.7621804,.2000468,.5195113,-.6997002,-.4904362,.5877785,-.7257348,-.3575267,.6448326,-.7350462,-.2095186,.6856718,-.7257349,-.05624226,.7085645,-.6997002,.09141054,.4409293,-.6612632,-.6068874,.7134386,-.6612635,.2318105,.5698355,-.5918328,-.5701066,.6432576,-.6192846,-.4502289,.7071597,-.6344642,-.312058,.7555274,-.6344643,-.1631975,.7850443,-.6192847,-.01385426,.7961066,-.5918329,.1262858,.4885464,-.5560256,-.6724269,.790485,-.5560258,.2568438,.6080147,-.4783907,-.633609,.6843741,-.5030631,-.5277874,.7535205,-.5197842,-.4025312,.8090176,-.5257301,-.2628656,.8462127,-.5197841,-.1172539,.8638958,-.5030633,.02472432,.86432,-.4783912,.1552182,.5257309,-.4472135,-.7236069,.8506507,-.4472141,.2763926,.7904849,-.4783909,.3824601,.7182924,-.5918331,.3657726,.6269704,-.6997002,.3425314,.5153098,-.799036,.3098342,.3886807,-.8813245,.26869,.2557685,-.9409218,.2219202,.1259061,-.9767888,.1732951,0,-.9920789,.1256161,0,-1,0,0,-.966684,.255973,.1320221,-.9409218,.3118274,0,-.9198779,.3922047,.2653735,-.8922809,.3652555,.1354306,-.8813244,.4526872,0,-.8506508,.5257311,.3985283,-.8193403,.4121366,.2688128,-.8193404,.5063803,.1354305,-.7990362,.5858325,0,-.7621806,.6473644,.3985285,-.7350458,.5485277,.2653741,-.7257347,.6347328,.132022,-.6997001,.7021324,.5216618,-.7257344,.4485293,0,-.6612634,.7501538,.6269701,-.6192849,.4726465,.5153089,-.6344645,.5761176,.3886809,-.6344643,.6681184,.2557688,-.6192848,.74234,.1259061,-.5918331,.7961667,0,-.5560257,.8311651,.7134389,-.5030631,.4877832,.61568,-.5197847,.5922515,.4999999,-.5257314,.6881908,.3730086,-.5197847,.7685626,.2434453,-.5030632,.8292537,.1194682,-.4783905,.8699827,.2037207,-.3776288,.9032687,.3373629,-.3946754,.8546447,.2900963,-.2645607,.9197021,.1504574,-.2470904,.9572402,.2305323,-.1275797,.9646649,.3756488,-.1377726,.9164642,.3105723,-.05870957,.948735,.1560722,-.05762485,.9860633,.4528624,-.06275863,.889369,.5151171,-.1413235,.8453887,.5865949,-.06361663,.807378,.6448326,-.1413234,.7511449,.7058983,-.06275776,.7055275,.7555274,-.1377726,.6404662,.8063285,-.05870892,.5885471,.8462126,-.1275803,.5173464,.8895732,-.05762486,.4531434,.9170663,-.1257444,.3783884,.8638959,-.2470903,.4388966,.9220127,-.2452428,.2995803,.8643205,-.3527738,.3584701,.909953,-.3527749,.218026,.9568835,-.2470904,.1527098,.9643334,-.1257441,.2329155,.9886892,-.12758,.07884855,.986031,-.0576253,.1562763,.9494396,-.05828413,.3084921,.9982727,-.05870948,-.002196348,.9876912,-.1377726,-.07405968,.9857823,-.06275877,-.1558674,.9631924,-.1413234,-.2286658,.9491301,-.06361575,-.3083912,.9136453,-.141323,-.3811562,.8891309,-.06275786,-.4533295,.84259,-.1377723,-.520635,.8089109,-.05871004,-.5849926,.7535205,-.1275803,-.6449265,.7058588,-.05762572,-.7060047,.6432578,-.1257444,-.7552534,.6843743,-.2470902,-.6859871,.5698351,-.2452432,-.784311,.6080144,-.3527747,-.7112444,.4885461,-.3527746,-.7980431,.4409297,-.2470906,-.8628599,.5195113,-.1257445,-.8451605,.380511,-.1275799,-.9159338,.453328,-.0576251,-.889479,.5867859,-.05828448,-.8076417,.3063933,-.05870904,-.9500929,.2347779,-.137772,-.962236,.1563848,-.06275778,-.9857004,.0801688,-.1413228,-.9867122,0,-.06361541,-.9979745,-.08016872,-.1413235,-.986712,-.156385,-.06275786,-.9857004,-.2347783,-.137773,-.9622357,-.3063947,-.05870939,-.9500924,-.3805109,-.1275798,-.9159339,-.4533277,-.05762381,-.8894793,-.5195113,-.1257442,-.8451605,-.4409293,-.247091,-.86286,-.5698356,-.2452437,-.7843105,-.4885466,-.3527746,-.7980428,-.6080146,-.352774,-.7112445,-.525731,-.4472135,-.7236069,-.6843736,-.2470907,-.6859876,-.643258,-.1257447,-.7552533,-.75352,-.1275801,-.6449271,-.7058586,-.05762467,-.706005,-.5867863,-.05828337,-.8076416,-.8089109,-.05870899,-.5849926,-.8425904,-.1377725,-.5206344,-.8891312,-.06275763,-.4533289,-.9136457,-.1413233,-.3811553,-.9491302,-.06361639,-.3083909,-.9631924,-.1413236,-.2286656,-.9857823,-.06275856,-.1558676,-.9876911,-.1377729,-.07405999,-.9982727,-.0587093,-.002196471,-.9886891,-.12758,.07884901,-.9860309,-.05762414,.1562771,-.9643332,-.1257444,.2329157,-.9568834,-.2470905,.1527106,-.9220126,-.2452434,.2995803,-.9099531,-.3527742,.2180271,-.8643204,-.3527742,.3584699,-.8506508,-.4472132,.2763937,-.8638959,-.2470903,.4388966,-.9170662,-.1257447,.3783885,-.8462127,-.1275797,.5173466,-.8895729,-.05762456,.453144,-.9494397,-.05828345,.3084919,-.8063288,-.05870874,.5885466,-.9643334,-.2645605,.00830608,-.9510455,-.2742542,-.1424676,-.9136455,-.2777144,-.2968613,-.8531526,-.2742543,-.4437513,-.7752798,-.2645606,-.5735407,-.6957413,-.3776284,-.6110162,-.7752802,-.3946756,-.4931246,-.8425907,-.4040553,-.3560621,-.8909584,-.404055,-.2072019,-.9170664,-.3946752,-.05675122,-.6080144,-.4783906,-.6336095,-.6843741,-.5030635,-.5277871,-.569835,-.591833,-.5701069,-.6432578,-.6192848,-.4502285,-.5195112,-.6997002,-.4904361,-.5877786,-.7257348,-.3575267,-.4539092,-.7990363,-.3943442,-.515117,-.8193403,-.2516661,-.3756483,-.8813245,-.2866277,-.4293834,-.8922811,-.1395151,-.2900958,-.9409217,-.1746734,-.3373627,-.9409217,-.02920049,-.2037204,-.9767889,-.06619295,-.2434447,-.966684,.07910019,-.1194681,-.992079,.03881734,-.1259061,-.9767889,.1732947,0,-.9920789,.1256161,0,-1,0,0,-.966684,.255973,-.1320222,-.9409218,.3118273,-.2557686,-.9409217,.2219205,0,-.9198779,.3922047,-.3730087,-.9198781,.1211977,-.1354306,-.8813245,.4526872,-.2653737,-.8922809,.3652555,-.3886806,-.8813245,.2686903,0,-.8506508,.5257311,-.4999997,-.8506509,.1624599,-.1354305,-.7990363,.5858324,-.2688131,-.8193404,.5063801,-.3985286,-.8193404,.4121362,-.5153093,-.7990363,.3098344,0,-.7621806,.6473644,-.6156805,-.7621804,.2000465,-.1320222,-.6997002,.7021322,-.265374,-.7257347,.6347328,-.3985288,-.7350459,.5485274,-.5216618,-.7257347,.448529,-.6269705,-.6997002,.3425312,0,-.6612634,.7501538,-.7134389,-.6612632,.2318101,-.1259064,-.5918328,.7961668,-.255769,-.6192845,.7423401,-.3886814,-.6344642,.6681182,-.5153095,-.6344643,.5761173,-.6269702,-.619285,.4726461,-.7182927,-.5918326,.3657728,0,-.5560257,.8311651,-.7904851,-.5560254,.2568441,-.1194686,-.4783902,.8699828,-.2434446,-.5030632,.8292539,-.3730088,-.5197845,.7685626,-.5,-.5257309,.6881911,-.6156801,-.5197845,.5922518,-.7134389,-.5030633,.4877831,-.7904852,-.4783903,.3824602,-.8643205,-.4783902,.1552184,-.7961067,-.5918329,.126285,-.7085648,-.6997001,.0914103,-.5990103,-.7990361,.05222997,-.4723813,-.8813246,.01108577,-.564664,-.8193404,-.09917613,-.685672,-.7257346,-.05624252,-.6448327,-.7350459,-.2095191,-.7850443,-.6192848,-.0138546,-.7555272,-.6344644,-.1631979,-.7071595,-.6344644,-.3120585,-.8462128,-.519784,-.1172536,-.809017,-.5257309,-.262866,-.7535204,-.5197844,-.4025309,-.8638961,-.503063,.02472395,-.9220127,-.3776288,.08537602,-.7961069,-.3776287,.4728748,-.7850446,-.2645605,.5601007,-.7555277,-.1377725,.6404659,-.7058978,-.06275869,.7055278,-.6448325,-.1413231,.751145,-.5865945,-.06361668,.8073783,-.515117,-.1413231,.8453888,-.4528619,-.06275808,.8893692,-.3756483,-.1377727,.9164644,-.3105718,-.05870966,.9487351,-.2305323,-.1275802,.9646648,-.6856716,-.2742544,.6742694,-.5646639,-.2777148,.7771932,-.4293835,-.2742541,.8604734,-.2900954,-.2645603,.9197024,-.7085644,-.3946753,.5849513,-.5990097,-.404056,.691322,-.4723816,-.404056,.7833227,-.3373626,-.3946755,.8546448,-.20372,-.3776286,.903269,-.1504575,-.2470907,.9572402,-.09155693,-.1253532,.9878784,0,-.246208,.9692171,-.08664479,-.3527703,.9316897,0,-.3524564,.9358283,0,-.4545479,.8907223,0,-.1280179,.9917719,0,-.05199641,.9986473,-.1560723,-.05762475,.9860633,-.07383531,-.9920789,-.101626,0,-1,0,-.1504571,-.966684,-.2070862,-.2305321,-.919878,-.3173001,-.3090168,-.8506511,-.4253251,-.3805113,-.7621805,-.523729,-.4409291,-.6612633,-.6068875,-.488546,-.5560257,-.6724271,0,-.9767888,-.2142046,0,-1,0,.0764796,-.9409218,-.3298741,-.07647949,-.9409218,-.3298743,-.1565172,-.8813246,-.4458356,0,-.892281,-.4514804,.1565174,-.8813246,-.4458354,-.2347777,-.7990362,-.5535526,-.08016851,-.8193405,-.5676744,.08016878,-.8193405,-.5676743,.2347782,-.7990363,-.5535522,-.3058945,-.6996999,-.6456382,-.1583942,-.7257345,-.6694928,0,-.735046,-.6780173,.1583945,-.7257347,-.6694927,.305895,-.6997,-.6456379,-.3661147,-.5918328,-.7181184,-.2294151,-.6192848,-.7509028,-.07826076,-.6344644,-.76898,.07826071,-.6344644,-.76898,.2294153,-.6192849,-.7509028,.3661148,-.5918329,-.7181182,-.4147108,-.4783907,-.7740525,-.2904726,-.5030632,-.8139736,-.1499795,-.5197846,-.8410292,0,-.5257313,-.8506507,.149979,-.5197849,-.8410292,.2904725,-.5030635,-.8139734,.4147112,-.4783907,-.7740523,.3661152,-.3776287,-.8505036,.3058952,-.2645605,-.9145687,.1583943,-.2742537,-.9485232,0,-.2777145,-.9606637,-.1583948,-.2742542,-.9485229,-.3058944,-.2645607,-.9145689,.2294151,-.3946754,-.8897191,.07826041,-.4040557,-.9113804,-.07826109,-.4040554,-.9113805,-.2294156,-.394675,-.8897191,-.3661148,-.3776291,-.8505036,.9643334,-.2645604,.008306011,.9510456,-.2742538,-.1424677,.9136453,-.2777153,-.2968611,.8531522,-.2742542,-.4437523,.7752801,-.26456,-.5735406,.9220126,-.3776291,.08537588,.9170663,-.3946753,-.0567517,.890958,-.4040557,-.2072022,.8425903,-.404056,-.3560622,.7752799,-.3946752,-.4931253,.6957415,-.3776286,-.6110159,.7961069,-.3776283,.4728749,.7850443,-.2645608,.560101,.6856716,-.2742541,.6742693,.5646642,-.2777142,.7771931,.4293841,-.274254,.8604732,.4723815,-.4040556,.7833229,.5990105,-.4040555,.6913217,.7085645,-.3946751,.5849512,0,-.4545479,.8907223,.08679011,-.3527701,.9316763,0,-.246208,.9692171,.09183914,-.1253453,.9878533,0,-.05199641,.9986473,0,-.3524564,.9358283,0,-.1280179,.9917719],u=[.8090167,-1.772035e-7,.5877857,-1,-.309017,-1.598021e-7,.9510565,-1,.3090168,0,.9510566,-1,.3090168,-2.054037e-7,.9510566,-1,.8090166,2.194861e-7,.5877857,-1,-.3090171,2.844524e-7,.9510565,-1,.5214649,.002371611,.8532694,-1,.07966477,-.002371477,.9968189,-1,.809017,4.180679e-8,.5877852,-1,-.3090171,-5.213506e-8,.9510565,-1,.6090305,.001638359,.7931451,-1,.3090166,-1.33309e-7,.9510567,-1,-.02651667,-.001638416,.999647,-1,.8090168,-1.576775e-7,.5877855,-1,-.3090173,-2.887304e-7,.9510564,-1,.6571877,.00134717,.7537258,-1,.4401566,.0009230899,.8979205,-1,.17169,-.0009226262,.9851506,-1,-.08864778,-.001347263,.9960621,-1,.8090167,-1.241591e-7,.5877857,-1,-.3090175,-2.781455e-7,.9510564,-1,.6872451,.001095545,.7264248,-1,.5206223,.001046075,.8537865,-1,.3090171,3.413262e-7,.9510565,-1,.08065062,-.00104605,.9967419,-1,-.129012,-.001095892,.9916424,-1,.8090171,-7.390614e-8,.5877851,-1,-.3090173,-9.977684e-9,.9510564,-1,.7076952,.0008103058,.7065174,-1,.5740014,.0009028488,.8188538,-1,.4040465,.0004318513,.9147383,-1,.2107892,-.0004313958,.9775314,-1,.01693263,-.0009033067,.9998562,-1,-.1572579,-.0008103165,.9875572,-1,.8090172,-2.816926e-9,.5877849,-1,-.3090167,-1.162015e-7,.9510566,-1,.7218264,.0007878023,.6920738,-1,.6110167,.0007123207,.7916174,-1,.4714346,.0004675435,.8819009,-1,.309017,2.646714e-7,.9510565,-1,.1369698,-.0004678827,.9905751,-1,-.02902235,-.0007124201,.9995785,-1,-.1771787,-.0007873942,.9841784,-1,.8090171,-1.833069e-7,.5877851,-1,-.3090165,-1.955647e-7,.9510567,-1,-.4351445,.0007875568,.9003603,-1,-.4532475,.0008105151,.8913843,-1,-.4785004,.001095655,.8780866,-1,-.5137534,.001346674,.8579369,-1,-.5661255,.001638269,.8243175,-1,-.6503657,.002371577,.7596176,-1,-.8090171,1.105686e-7,.5877852,-1,-.8599924,.06410277,.5062646,-1,-.8090171,0,.5877851,-1,-.9672929,.06493065,.2452111,-1,-.9234133,-.002371895,.3837996,-1,-.9875819,.06161731,.1445174,-1,-.809017,1.607895e-7,.5877853,-1,-.9589149,-.001638537,.2836889,-1,-.9941782,.05664644,.09165588,-1,-.7179574,.0009230545,.6960864,-1,-.8838785,-.0009226151,.4677156,-1,-.974705,-.001346963,.2234914,-1,-.9970434,.04974377,.05856629,-1,-.8090169,3.717521e-7,.5877854,-1,-.9230353,-.001046067,.3847138,-1,-.9829748,-.001095724,.1837369,-1,-.6511182,.001046263,.7589756,-1,-.9984644,.04155652,.03663223,-1,-.6014005,.0009034062,.7989472,-1,-.7451108,.0004317168,.6669405,-1,-.8645502,-.0004315363,.5025462,-1,-.9456871,-903391e-9,.3250772,-1,-.987818,-810309e-9,.1556115,-1,-.9992066,.03310233,.02214452,-1,-.5640584,712347e-9,.8257346,-1,-.6930565,.0004676504,.7208831,-1,-.8090169,1.520382e-7,.5877854,-1,-.8997672,-.0004678831,.4363701,-1,-.9596238,-.0007125275,.281286,-1,-.9907605,-.0007873037,.1356208,-1,-.975531,-.0003751622,.2198617,-1,-.9301946,-.0002570875,.3670668,-1,-.9537034,-.0002518377,.3007486,-1,-.987892,-515704e-9,.1551421,-1,-.9726185,-.0001941664,.2324073,-1,-.9252938,-.0001125285,.379251,-1,-.9503758,-843643e-10,.3111042,-1,-.9877042,3867977e-11,.1563342,-1,-.891127,-5124163e-11,.4537539,-1,-.8539627,-4293762e-11,.5203343,-1,-.8090168,8.52706e-8,.5877856,-1,-.7587562,4277971e-11,.6513747,-1,-.7069187,5097046e-11,.7072948,-1,-.6466206,.0001125343,.7628117,-1,-.58956,8469694e-11,.8077246,-1,-.5215876,.0001943524,.8531977,-1,-.4538997,-3863412e-11,.8910528,-1,-.3814186,-2386664e-11,.9244024,-1,-.452824,.0005155603,.8915998,-1,-.3090172,-2.417923e-8,.9510565,-1,-.3827485,.001009116,.923852,-1,-.2333764,-.001009395,.9723859,-1,-.1577263,-.0005156379,.9874827,-1,-.2347761,2392456e-11,.9720495,-1,-.07952308,-.0001941465,.996833,-1,-.1565342,3867892e-11,.9876725,-1,-.3090174,-1.430976e-7,.9510564,-1,.002195181,-8436573e-11,.9999976,-1,.07475711,-.0001125325,.9972017,-1,.1561721,-512331e-10,.9877298,-1,.2309781,-4292931e-11,.9729589,-1,.3090172,9.234374e-8,.9510565,-1,.3850261,4297249e-11,.9229057,-1,.4542277,50991e-9,.8908857,-1,.5256609,.0001123482,.8506942,-1,.5860074,8471196e-11,.8103057,-1,.6502591,.0001943574,.7597125,-1,.7071783,-3866211e-11,.7070352,-1,.7612941,-2390673e-11,.6484067,-1,.7080312,.0005156869,.7061809,-1,.8090171,3.433978e-8,.5877851,-1,.7603602,.001009566,.6495008,-1,.8526767,-.001009368,.5224379,-1,.8904114,-.0005155559,.4551564,-1,.8519241,2394572e-11,.5236652,-1,.9234706,-.0001941807,.3836691,-1,.8909606,3866481e-11,.4540806,-1,.8090171,-1.429941e-7,.5877851,-1,.9517329,-8437348e-11,.3069274,-1,.9714966,-.0001125346,.2370535,-1,.9876468,-512263e-10,.1566969,-1,.9967151,-4309916e-11,.08098769,-1,1,7.012397e-8,-4.470045e-9,-1,.9967151,4296394e-11,-.08098761,-1,.9876467,5097192e-11,-.1566971,-1,.9714965,.0001125075,-.237054,-1,.9517325,8467354e-11,-.3069288,-1,.9234707,.0001943713,-.383669,-1,.8909608,-3862768e-11,-.4540803,-1,.8519241,-2387499e-11,-.5236652,-1,.8904116,.0005154741,-.455156,-1,.8090166,2.446626e-7,-.5877858,-1,.8526764,.001009572,-.5224385,-1,.76036,-.001009028,-.6495011,-1,.8090171,1.539653e-7,-.5877852,-1,.7080318,-515586e-9,-.7061803,-1,.7612939,2389718e-11,-.6484069,-1,.6502597,-.0001941357,-.759712,-1,.7071785,3866815e-11,-.7070351,-1,.8090168,-1.323969e-7,-.5877855,-1,.5860074,-8436578e-11,-.8103057,-1,.5256603,-.0001125172,-.8506945,-1,.4542272,-512398e-10,-.8908859,-1,.3850252,-4311812e-11,-.922906,-1,.3090168,9.449892e-8,-.9510566,-1,.2309779,4293818e-11,-.972959,-1,.1561723,5098818e-11,-.9877298,-1,.07475743,.0001125454,-.9972017,-1,.002195284,8470789e-11,-.9999976,-1,-.07952357,.0001943485,-.996833,-1,-.156535,-3863925e-11,-.9876724,-1,-.2347763,-238911e-10,-.9720494,-1,-.1577271,.0005154738,-.9874826,-1,-.3090173,2.329734e-7,-.9510564,-1,-.2333775,.001009521,-.9723857,-1,-.3827483,-.001008986,-.9238521,-1,-.3090175,1.328172e-7,-.9510564,-1,-.4528239,-.0005156593,-.8915998,-1,-.3814188,2393875e-11,-.9244024,-1,-.5215877,-.0001941625,-.8531976,-1,-.4539002,3867687e-11,-.8910525,-1,-.3090172,-1.393415e-7,-.9510564,-1,-.5895595,-8437037e-11,-.807725,-1,-.008682054,.0002518443,-.9999623,-1,.1481059,.0001494472,-.9889715,-1,.3090169,-1.162989e-7,-.9510565,-1,.4614822,-.0001495196,-.8871495,-1,.5947871,-.0002518047,-.8038832,-1,.6599901,-.0003751829,-.7512742,-1,.5367862,-.0002570914,-.8437183,-1,.3892892,-9184163e-11,-.9211156,-1,.2264765,9141333e-11,-.9740166,-1,.06165513,.0002569306,-.9980975,-1,.7218266,-787347e-9,-.6920735,-1,.6110165,-.0007123564,-.7916175,-1,.7076957,-.0008103602,-.7065169,-1,.5740013,-.0009033754,-.8188539,-1,.6872452,-.001095762,-.7264246,-1,.5206224,-.001046134,-.8537864,-1,.6571879,-.001347014,-.7537256,-1,.4401568,-.0009228487,-.8979204,-1,.6090305,-.001638384,-.7931451,-1,.3090171,-3.414422e-8,-.9510565,-1,.5214655,-.002371628,-.8532691,-1,.07966485,.002371774,-.9968189,-1,.3090177,2.594789e-8,-.9510563,-1,-.3090169,-2.481009e-7,-.9510565,-1,-.3090167,1.456801e-7,-.9510566,-1,-.8090172,1.9219e-7,-.587785,-1,-.8599928,-.0641027,-.506264,-1,-.8090175,0,-.5877845,-1,-.9672928,-.06493073,-.2452114,-1,-.9234132,.002371873,-.3838,-1,-.6503656,-.002371781,-.7596176,-1,-.9875818,-.06161742,-.1445177,-1,-.3090168,4.744629e-8,-.9510566,-1,-.9589149,.001638475,-.2836891,-1,-.8090168,-1.289034e-7,-.5877855,-1,-.5661255,-.001638499,-.8243174,-1,-.9941782,-.05664657,-.09165609,-1,-.3090171,-1.151727e-7,-.9510565,-1,-.9747049,.001346903,-.2234915,-1,-.8838785,.0009228633,-.4677158,-1,-.7179572,-922675e-9,-.6960866,-1,-.5137537,-.001346893,-.8579367,-1,-.9970434,-.04974392,-.05856647,-1,-.3090168,2.212302e-8,-.9510566,-1,-.9829748,.001095794,-.1837372,-1,-.9230353,.00104598,-.3847139,-1,-.8090168,8.032119e-8,-.5877855,-1,-.6511181,-.001046106,-.7589757,-1,-.4785003,-.001095573,-.8780867,-1,-.9984644,-.04155654,-.03663225,-1,-.3090167,-4.628924e-8,-.9510566,-1,-.9878179,.0008104551,-.1556118,-1,-.945687,.0009033507,-.3250773,-1,-.8645499,.0004317216,-.5025467,-1,-.7451103,-.0004315524,-.666941,-1,-.6014002,-.0009033678,-.7989475,-1,-.4532478,-.0008103373,-.8913842,-1,-.9992066,-.03310243,-.02214459,-1,-.3090169,-2.639655e-9,-.9510565,-1,-.9907605,.0007876734,-.135621,-1,-.9596239,.0007121411,-.2812854,-1,-.8997671,.0004679198,-.4363703,-1,-.8090171,4.224801e-8,-.5877851,-1,-.6930565,-.0004680274,-.7208831,-1,-.5640582,-.0007124407,-.8257347,-1,-.4351445,-.0007873638,-.9003603,-1,-.1771789,.0007876873,-.9841784,-1,-.157257,.0008104725,-.9875574,-1,-.1290115,.001095736,-.9916425,-1,-.08864717,.001346962,-.9960622,-1,-.02651644,.001638457,-.999647,-1,.1716904,.0009227035,-.9851505,-1,.08065092,.001046108,-.9967418,-1,.3090173,3.110732e-8,-.9510564,-1,.01693306,.0009033012,-.9998562,-1,.2107895,.0004315939,-.9775314,-1,.4040469,-.0004315643,-.9147382,-1,.1369695,.0004677931,-.9905751,-1,.3090174,-1.137078e-8,-.9510564,-1,.4714347,-.0004679698,-.8819009,-1,-.02902196,712504e-9,-.9995785,-1,-.09235538,.0003752712,-.995726,-1,-.5105559,-.0003752442,-.8598445,-1,-.5807387,-.0002518144,-.81409,-1,-.6466203,-.0001125323,-.762812,-1,-.7069191,-5124555e-11,-.7072944,-1,-.7587563,-4312515e-11,-.6513746,-1,-.8090171,8.902919e-8,-.5877851,-1,-.8539627,4296495e-11,-.5203341,-1,-.8911272,5097074e-11,-.4537535,-1,-.925294,112556e-9,-.3792506,-1,-.950376,8468067e-11,-.3111037,-1,-.9726185,.0001943522,-.2324073,-1,-.7011231,-.0001495567,-.7130402,-1,-.809017,-6.048431e-8,-.5877852,-1,-.8948008,.0001496327,-.4464655,-1,-.9537037,.0002516357,-.3007478,-1,-.6365474,-.0002571058,-.7712375,-1,-.7557361,-9184548e-11,-.6548763,-1,-.85636,9167703e-11,-.5163793,-1,-.9301947,.0002569691,-.3670665,-1,-.9755311,.0003748281,-.2198611,-1,-.987892,515473e-9,-.1551422,-1,-.9957196,-.0010722,-.0924197,-1,-.999862,-.01610558,-.004091258,-1,-.9956678,-.001007881,-.09297621,-1,-.9999104,-.012527,-.004717985,-1,-.9996296,-.02424306,-.01237157,-1,-.9999864,-.005172745,-.0006676978,-1,-.9999903,-.004397353,-.0002289562,-1,-.9877042,-386614e-10,-.1563343,-1,.8090172,2.062193e-7,-.587785,-1,.3090182,0,-.9510561,-1,.8090171,-1.780921e-7,-.5877852,-1,.809017,-4.073438e-8,-.5877852,-1,.809017,-4.545074e-8,-.5877852,-1,.8090171,9.019961e-8,-.5877852,-1,.8090173,2.954635e-8,-.5877849,-1,.8090174,9.935748e-8,-.5877846,-1,1,-5.833317e-8,2.660036e-7,-1,1,0,1.594488e-7,-1,.9726488,-.00237173,.2322686,-1,.9726489,.002371764,-.2322683,-1,.9425268,.001638388,-.3341267,-1,1,-7.601726e-9,1.502363e-8,-1,.9425266,-.001638353,.3341272,-1,.9199181,.001346969,-.3921083,-1,.9899891,.0009227961,-.1411408,-1,.989989,-.0009227815,.1411413,-1,.9199176,-.001347012,.3921093,-1,.9032416,.001095796,-.4291309,-1,.9728805,.001046037,-.2313061,-1,1,2.207805e-7,-2.393506e-7,-1,.9728803,-.001046176,.2313067,-1,.9032412,-.001095834,.4291318,-1,.8906279,.0008103796,-.4547321,-1,.9561525,.0009033502,-.2928678,-1,.9948251,431521e-9,-.1016015,-1,.9948251,-.0004315524,.1016015,-1,.9561524,-.0009035241,.2928682,-1,.8906277,-810527e-9,.4547325,-1,.8812581,.0007876905,-.4726347,-1,.9416873,.0007124044,-.3364885,-1,.9844188,.0004678318,-.1758391,-1,1,-1.183324e-7,7.313349e-8,-1,.9844189,-467919e-9,.1758385,-1,.9416873,-712421e-9,.3364885,-1,.8812579,-.0007874509,.472635,-1,.9184523,-.0003752222,.3955316,-1,.9483376,-.0002518243,.3172627,-1,.986335,-.0001494551,.1647517,-1,1,4.267189e-8,-1.233582e-8,-1,.986335,.0001494522,-.1647523,-1,.9483379,.0002518618,-.3172619,-1,.9682997,-.0002570392,.2497913,-1,.99633,-9174678e-11,.08559572,-1,.9963299,9140951e-11,-.0855963,-1,.9682996,.0002569243,-.2497916,-1,.9184524,.0003753042,-.3955312,-1,-.00868197,-.0002517968,.9999623,-1,.148106,-.0001491384,.9889715,-1,.3090168,4.854959e-7,.9510565,-1,.4614831,.0001490967,.887149,-1,.5947867,.0002512721,.8038835,-1,-.09235522,-.0003752221,.995726,-1,.06165563,-25699e-8,.9980974,-1,.226477,-9123258e-11,.9740165,-1,.3892894,9176142e-11,.9211155,-1,.5367866,.0002561842,.843718,-1,.6599898,.0003752885,.7512744,-1,-.510556,.0003752538,.8598444,-1,-.580739,.0002519127,.8140898,-1,-.7011231,.0001490391,.7130402,-1,-.8090168,1.202057e-7,.5877855,-1,-.8948005,-.0001491623,.4464661,-1,-.8563599,-9110189e-11,.5163794,-1,-.7557356,9156175e-11,.6548768,-1,-.6365474,.0002568637,.7712376,-1,-.9996285,.02427618,.01238848,-1,-.9956538,.0009938403,.09312622,-1,-.9998609,.01616671,.004106789,-1,-.9956932,.001064115,.09270303,-1,-.9999902,.004409065,229566e-9,-1,-.9999086,.01264881,.004763858,-1,-.999986,.005253922,.0006781761,-1],s={name:"sky_clouds",defines:{},uniforms:{_CameraFar:1e3,_Rotation:0,_HeightOffset:0,_MoonDirSize:[.97,-.24,0],_SunDirSize:[-.97,.24,0],_uSkyNightParams:[.25,1],_StepSize:.004,_NightZenithColor:[.2,72/255,.4],_SkyColor:[28/255,32/255,40/255],_SkyLightColor:[85/255,99/255,112/255],_LightColorMultiplier:4,_SkyColorMultiplier:1.5,_ScatterMultiplier:1.33,_SkyMieG:.76,_CloudSampler:null,_Mask:1,_AlphaSaturation:2,_Attenuation:.6},vertexShader:"\n\t\t\t\tattribute vec3 a_Position;\n\t\tattribute vec3 a_Normal;\n\t\tattribute vec4 a_Tangent;\n\t\tattribute vec2 a_Uv;\n\n\t\t\t\tuniform mat4 u_ProjectionView;\n\t\tuniform mat4 u_Model;\n\t\t\t\tuniform vec3 u_CameraPosition;\n\n\t\t\t\tuniform float _CameraFar;\n\n\t\t\t\tuniform float _Rotation;\n\t\t\t\tuniform float _HeightOffset;\n\n\t\t\t\tuniform vec3 _MoonDirSize, _SunDirSize;\n\t\t\t\tuniform vec2 _uSkyNightParams;\n\n\t\t\t\tuniform float _StepSize;\n\n\t\tuniform vec3 _SkyLightColor, _NightZenithColor, _SkyColor;\n\t\tuniform float _LightColorMultiplier, _SkyColorMultiplier;\n\t\tuniform float _ScatterMultiplier;\n\t\t\n\t\tuniform float _SkyMieG;\n\t\t\n\t\tvarying vec2 v_Uv;\n\t\tvarying vec3 v_lightDir;\n\t\t\t\tvarying vec2 v_toSun;\n\t\t\t\tvarying vec3 v_skyColor;\n\t\tvarying vec3 v_lightColor;\n\t\tvarying vec3 v_miePhase_g;\n\t\tvarying vec3 v_worldPos;\n\t\t\n\t\tconst float PI = 3.1415926;\n\t\tconst float OuterSpaceIntensity = 0.25;\n\t\t#define GAMMA_OUT(color) pow(color, 0.454545)\n\t\t#define ColorSpaceLuminance vec4(0.22, 0.707, 0.071, 0.0)\n\t\t#define SkyMieScale vec3(0.004)\n\n\t\tvec3 RotateAroundYInDegrees(vec3 vertex, float degrees) {\n\t\t\tfloat alpha = degrees * (PI / 180.0);\n\t\t\tfloat sina, cosa;\n\t\t\tsina = sin(alpha);\n\t\t\tcosa = cos(alpha);\n\t\t\tmat2 m = mat2(cosa, -sina, sina, cosa);\n\t\t\treturn vec3((m * vertex.xz), vertex.y).xzy;\n\t\t}\n\n\t\t// Converts color to luminance (grayscale)\n\t\tfloat Luminance(vec3 rgb) {\n\t\t\treturn dot(rgb, ColorSpaceLuminance.rgb);\n\t\t}\n\n\t\tvec3 PhaseFunctionG(float g, float scale) {\n\t\t\t// Mie phase G function and Mie scattering scale, (compute this function in Vertex program)\n\t\t\tfloat g2 = g * g;\n\t\t\treturn vec3(scale * 1.5 * (1.0 / (4.0 * PI)) * ((1.0 - g2) / (2.0 + g2)), 1.0 + g2, 2.0 * g);\n\t\t}\n\n\t\tvoid main() {\n\t\t\tvec3 t = RotateAroundYInDegrees(a_Position.xyz, _Rotation).xyz; //\tanimate rotation\n\t\t\t\t\t\tt = t * _CameraFar + u_CameraPosition; // scale with camera's far plane and following camera position.\n\t\t\tt.y += _HeightOffset;\n\n\t\t\tvec3 dir = mix(_SunDirSize.xyz, _MoonDirSize.xyz, clamp(_uSkyNightParams.y, 0., 1.)); // switching between the sun and moon direction, avoids the poping issue between lights\n\t\t\tdir = RotateAroundYInDegrees(dir, -_Rotation);\n\t\t\tv_lightDir = dir;\n\t\t\tvec3 binormal = cross(a_Normal.xyz, a_Tangent.xyz) * a_Tangent.w; \n\t\t\tmat3 rotation = mat3(a_Tangent.x, binormal.x, a_Normal.x, a_Tangent.y, binormal.y, a_Normal.y, a_Tangent.z, binormal.z, a_Normal.z);\n\t\t\tv_toSun = (rotation * dir).xy * _StepSize;\n\n\t\t\tv_Uv = a_Uv;\n\n\t\t\t// fix the night sky brightness\n\t\t\tfloat brightnessScale = max(max(Luminance(_NightZenithColor.rgb) * 4., OuterSpaceIntensity), 1.0 - _uSkyNightParams.x); \n\n\t\t\t// Shade Color\n\t\t\tv_skyColor = _SkyColor * (GAMMA_OUT(_SkyColorMultiplier) * brightnessScale);\n\t\t\tv_lightColor = max(_SkyLightColor.xyz * _LightColorMultiplier, v_skyColor);\n\n\t\t\t// scatter term (precomputed Mie-G term)\n\t\t\tvec3 mie = SkyMieScale;\n\t\t\tmie.x *= GAMMA_OUT(_ScatterMultiplier);\n\t\t\tv_miePhase_g = PhaseFunctionG(_SkyMieG, mie.x);\n\n\t\t\tv_worldPos.xyz = (u_Model * vec4(a_Position, 1.0)).xyz;\n\t\t\tgl_Position = u_ProjectionView * u_Model * vec4(t, 1.0);\n\t\t}\n\t\t",fragmentShader:'\n\t\t\t\tuniform sampler2D _CloudSampler;\n\n\t\t\t\tuniform vec2 _uSkyNightParams;\n\n\t\tuniform float _Attenuation, _AlphaSaturation, _Mask, _ScatterMultiplier;\n\t\t\n\t\tvarying vec2 v_Uv;\n\t\tvarying vec3 v_lightDir;\n\t\t\t\tvarying vec2 v_toSun;\n\t\t\t\tvarying vec3 v_skyColor;\n\t\tvarying vec3 v_lightColor;\n\t\tvarying vec3 v_miePhase_g;\n\t\tvarying vec3 v_worldPos;\n\t\t\n\t\tfloat PhaseFunctionR() {\n\t\t\t// Rayleigh phase function without multiply (1.0 + mu * mu)\n\t\t\t// We will multiply (1.0 + mu * mu) together with Mie phase later.\n\t\t\treturn 3.0 / (16.0 * PI);\n\t\t}\n\t\t\n\t\tfloat PhaseFunctionM(float mu, vec3 miePhase_g) {\n\t\t\t// Mie phase function (optimized)\n\t\t\t// Precomputed PhaseFunctionG() with constant values in vertex program and pass them in here\n\t\t\t// we will multiply (1.0 + mu * mu) together with Rayleigh phase later.\n\t\t\treturn miePhase_g.x / pow(miePhase_g.y - miePhase_g.z * mu, 1.5);\n\t\t}\n\t\t\n\t\tvoid main() {\n\t\t\tconst int c_numSamples = 8;\n\t\t\tvec3 dir = normalize(v_worldPos.xyz);\n\t\t\tfloat nu = dot(dir, v_lightDir.xyz);\n\t\t\t\n\t\t\t// only use red channel as clouds density \n\t\t\tfloat opacity = texture2D(_CloudSampler, v_Uv).r;\n\t\t\t// user define opacity level (need to clamp to 1 for HDR Camera)\n\t\t\topacity = min(opacity * _Mask, 1.0); \n\t\t\t// Increase the "Alpha Opacity" during the night time for better masking out the background moon and stars\n\t\t\topacity = mix(opacity, min(opacity * 1.15, 1.0), _uSkyNightParams.x);\n\t\t\n\t\t\tfloat density = 0.;\n\t\t\t\n\t\t\tif(opacity > 0.01) { // bypass sampling any transparent pixels\n\t\t\t\t\t\t\t\tvec2 sampleDir = v_toSun.xy;\n\t\t\t\tfor(int i = 0; i < c_numSamples; i++) {\n\t\t\t\t\tfloat i_float = float(i);\n\t\t\t\t\tvec2 sampleUV = v_Uv + sampleDir * i_float;\n\t\t\t\t\tfloat t = texture2D(_CloudSampler, sampleUV).r;\n\t\t\t\t\tdensity += t;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\t// scatter term\n\t\t\tfloat phase = PhaseFunctionR() * _ScatterMultiplier;\n\t\t\tfloat phaseM = PhaseFunctionM(nu, v_miePhase_g);\n\t\t\tfloat scatter = (phase + phaseM) * (1.0 + nu * nu);\n\t\t\n\t\t\tfloat c = exp2(-_Attenuation * density + scatter);\n\t\t\tfloat a = pow(opacity, _AlphaSaturation);\n\t\t\tvec3 col = mix(v_skyColor, v_lightColor, c);\n\t\t\n\t\t\tgl_FragColor = vec4(col, a);\n\t\t}\n\t\t'};class m extends o.Mesh{constructor(){const t=new o.ShaderMaterial(s);t.transparent=!0,t.depthWrite=!1,super(c,t),this.frustumCulled=!1}}const c=new o.Geometry;c.setIndex(new o.Attribute(new o.Buffer(r.length/3>65536?new Uint32Array(i):new Uint16Array(i),1))),c.addAttribute("a_Position",new o.Attribute(new o.Buffer(new Float32Array(r),3))),c.addAttribute("a_Normal",new o.Attribute(new o.Buffer(new Float32Array(l),3))),c.addAttribute("a_Tangent",new o.Attribute(new o.Buffer(new Float32Array(u),4))),c.addAttribute("a_Uv",new o.Attribute(new o.Buffer(new Float32Array(a),2))),c.computeBoundingBox(),c.computeBoundingSphere();const _={name:"sky_stars",defines:{},uniforms:{_CameraFar:1e3,_StarIntensity:40,_StarSize:10,_Time:0,_StarRotationMatrix:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},vertexShader:"\n\t\t\t\tattribute vec3 a_Position;\n\t\tattribute vec4 a_Color;\n\t\tattribute vec2 a_Uv;\n\n\t\tuniform mat4 u_ProjectionView;\n\t\tuniform mat4 u_Model;\n\t\tuniform vec3 u_CameraPosition;\n\n\t\tuniform float _CameraFar;\n\t\tuniform float _StarIntensity;\n\t\tuniform float _StarSize;\n\t\tuniform float _Time;\n\t\tuniform mat4 _StarRotationMatrix;\n\n\t\tvarying vec4 vColor;\n\n\t\tfloat GetFlickerAmount(vec2 pos) {\n\t\t\tvec2 tab[8];\n\n\t\t\ttab[0] = vec2(0.897907815, -0.347608525);\n\t\t\ttab[1] = vec2(0.550299290, 0.273586675);\n\t\t\ttab[2] = vec2(0.823885965, 0.098853070);\n\t\t\ttab[3] = vec2(0.922739035, -0.122108860);\n\t\t\ttab[4] = vec2(0.800630175, -0.088956800);\n\t\t\ttab[5] = vec2(0.711673375, 0.158864420);\n\t\t\ttab[6] = vec2(0.870537795, 0.085484560);\n\t\t\ttab[7] = vec2(0.956022355, -0.058114540);\n\t\t\n\t\t\tvec2 hash = fract(pos.xy * 256.);\n\t\t\tfloat index = fract(hash.x + (hash.y + 1.) * _Time); // flickering\n\t\t\tindex *= 8.;\n\t\n\t\t\tfloat f = fract(index) * 2.5;\n\t\t\thighp int i = int(index);\n\n\t\t\treturn tab[i].x + f * tab[i].y;\n\t\t} \n\n\t\tvoid main() {\n\t\t\tvec3 t = (_StarRotationMatrix * vec4(a_Position.xyz, 1.0)).xyz * _CameraFar + u_CameraPosition.xyz;\n\t\t\tvec4 transformed = vec4(t, 1.0);\n\n\t\t\tgl_Position = u_ProjectionView * u_Model * transformed;\n\n\t\t\tfloat appMag = 6.5 + a_Color.w * (-1.44 - 1.5);\n\t\t\tfloat brightness = GetFlickerAmount(a_Position.xy) * pow(5.0, (-appMag - 1.44) / 2.5);\n\n\t\t\tvColor = (t.y > 0.0 ? _StarIntensity : 0.0) * vec4(brightness * a_Color.xyz, brightness);\n\t\t\t\n\t\t\tgl_PointSize = _StarSize;\n\t\t}\n\t\t",fragmentShader:"\n\t\t\t\tvarying vec4 vColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\t\tvec2 distCenter = 6.5 * gl_PointCoord - 6.5 * vec2(0.5, 0.5);\n\t\t\t\t\t\tfloat scale = exp(-dot(distCenter, distCenter));\n\t\t\t\t\t\tvec3 col = vColor.xyz * scale + 5. * vColor.w * pow(scale, 10.);\n\n\t\t\t// col = col * col * 2.;\n\n\t\t\t\t\t\tgl_FragColor = vec4(col, 1.);\n\t\t\t\t}\n\t\t"};class f extends o.Mesh{constructor(t,n=.06225){const e=new o.ShaderMaterial(_);e.transparent=!0,e.blending=o.BLEND_TYPE.ADD,e.depthWrite=!1,e.drawMode=o.DRAW_MODE.POINTS;const r=[],a=[];for(let e=0;e<9110;e++){h.x=t[6*e+0],h.z=t[6*e+1],h.y=t[6*e+2],d.fromArray(t,6*e+3);const o=d.getLength();o<n||(o>2.7?S.set(d.x,d.y,d.z,o).normalize().multiplyScalar(.5):S.set(d.x,d.y,d.z,o),r.push(h.x,h.y,h.z),a.push(S.x,S.y,S.z,S.w))}const i=new o.Geometry,l=new o.Attribute(new o.Buffer(new Float32Array(r),3));i.addAttribute("a_Position",l);const u=new o.Attribute(new o.Buffer(new Float32Array(a),4));i.addAttribute("a_Color",u),i.computeBoundingBox(),i.computeBoundingSphere(),super(i,e),this.frustumCulled=!1}}const h=new o.Vector3,d=new o.Vector3,S=new o.Vector4,g={name:"sky_bg",defines:{SKY_MULTISAMPLE:!0,SKY_SUNDISK:!0,COLORSPACE_GAMMA:!1,SKY_HDR_MODE:!1},uniforms:{_CameraFar:1e3,_SkyAltitudeScale:1,_SkyGroundOffset:0,_SkyMieG:.76,_SkyMieScale:1,_MoonDirSize:[0,-1,0,8],_SpaceRotationMatrix:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],_SunDirSize:[0,1,0,1],_SkyboxOcean:0,_Inscatter:null,_Transmittance:null,_NightHorizonColor:[.2,74/255,.4,.5],_NightZenithColor:[72/255,100/255,128/255,.5],_MoonSampler:null,_uSkyNightParams:[.25,.5,.5],_OuterSpaceCube:null,_MoonInnerCorona:[0,0,0,.5],_MoonOuterCorona:[65/255,88/255,128/255,.5],_SkyExposure:1,betaR:[.0058,.0135,.0331,1]},vertexShader:"\n\t\t\t\t#define PI 3.14159\n\n\t\t\t\tattribute vec3 a_Position;\n\n\t\t\t\tuniform mat4 u_ProjectionView;\n\t\tuniform mat4 u_Model;\n\t\t\t\tuniform vec3 u_CameraPosition;\n\n\t\t\t\tuniform float _CameraFar;\n\n\t\t\t\tuniform float _SkyAltitudeScale;\n\t\t\t\tuniform float _SkyGroundOffset;\n\n\t\t\t\tuniform float _SkyMieG;\n\t\t\t\tuniform float _SkyMieScale;\n\n\t\t\t\tuniform vec4 _SunDirSize;\n\t\t\t\tuniform vec4 _MoonDirSize;\n\n\t\t\t\tuniform float _SkyExposure;\n\n\t\t\t\tuniform mat4 _SpaceRotationMatrix;\n\n\t\t\t\tvarying vec4 vWorldPosAndCamY;\n\t\t\t\tvarying vec3 vMiePhase_g;\n\t\t\t\tvarying vec3 vSun_g;\n\t\t\t\tvarying vec2 vMoonTC;\n\t\t\t\tvarying vec3 vSpaceTC;\n\n\t\t\t\t// Mie phase G function and Mie scattering scale, (compute this function in Vertex program)\n\t\t\t\tvec3 PhaseFunctionG(float g, float scale) {\n\t\t\t\t\t\tfloat g2 = g * g;\n\t\t\t\t\t\treturn vec3(scale * 1.5 * (1.0 / (4.0 * PI)) * ((1.0 - g2) / (2.0 + g2)), 1.0 + g2, 2.0 * g);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid main() {\n\t\t\t\t\t\tvWorldPosAndCamY.xyz = (u_Model * vec4(a_Position, 0.0)).xyz;\n\t\t\t\t\t\t// if the camera height is outside atmospheric precomputed buffer range, it will occur rendering artifacts\n\t\t\t\t\t\tvWorldPosAndCamY.w = max(u_CameraPosition.y * _SkyAltitudeScale + _SkyGroundOffset, 0.0); // no lower than sealevel\n\t\t\t\t\t\tvMiePhase_g = PhaseFunctionG(_SkyMieG, _SkyMieScale);\n\n\t\t\t\t\t\t#ifdef SKY_SUNDISK\n\t\t\t\t\t\t\t\tfloat scale = 8e-3;\n\t\t\t\t\t\t\t\t#ifdef COLORSPACE_GAMMA\n\t\t\t\t\t\t\t\t\t\tscale = 4e-3;\n\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\tvSun_g = PhaseFunctionG(.99 , _SunDirSize.w * scale * _SkyExposure);\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tvSun_g = vec3(0., 0., 0.);\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\tvec3 right = normalize(cross(_MoonDirSize.xyz, vec3(0., 0., 1.)));\n\t\t\t\t\t\tvec3 up = cross(_MoonDirSize.xyz, right);\n\t\t\t\t\t\tvMoonTC = vec2(dot(right, normalize(a_Position)), dot(up, normalize(a_Position))) * _MoonDirSize.w + 0.5;\n\t\t\t\t\t\tvSpaceTC = (_SpaceRotationMatrix * vec4(a_Position, 0.0)).xyz;\n\n\t\t\t\t\t\tgl_Position = u_ProjectionView * u_Model * vec4(a_Position * _CameraFar + u_CameraPosition.xyz, 1.0);\n\t\t\t\t}\n\t\t",fragmentShader:'\n\t\t\t\tuniform vec4 _SunDirSize;\n\n\t\t\t\tuniform float _SkyboxOcean;\n\n\t\t\t\tuniform sampler2D _Inscatter;\n\t\t\t\tuniform sampler2D _Transmittance;\n\n\t\t\t\tuniform vec4 _NightHorizonColor;\n\t\t\t\tuniform vec4 _NightZenithColor;\n\n\t\t\t\tuniform sampler2D _MoonSampler;\n\n\t\t\t\tuniform vec3 _uSkyNightParams;\n\n\t\t\t\tuniform samplerCube _OuterSpaceCube;\n\n\t\t\t\tuniform vec4 _MoonDirSize;\n\n\t\t\t\tuniform vec4 _MoonInnerCorona;\n\t\t\t\tuniform vec4 _MoonOuterCorona;\n\n\t\t\t\tuniform float _SkyExposure;\n\n\t\t\t\tuniform vec4 betaR;\n\n\t\t\t\tvarying vec4 vWorldPosAndCamY;\n\t\t\t\tvarying vec3 vMiePhase_g;\n\t\t\t\tvarying vec3 vSun_g;\n\t\t\t\tvarying vec2 vMoonTC;\n\t\t\t\tvarying vec3 vSpaceTC;\n\n\t\t\t\tconst float Rg = 6360000.0;\n\t\t\t\tconst float Rt = 6420000.0;\n\t\t\t\tconst float RL = 6421000.0;\n\n\t\t\t\tconst float RES_R = 4.; \t// 3D texture depth\n\t\t\t\tconst float RES_MU = 128.; \t// height of the texture\n\t\t\t\tconst float RES_MU_S = 32.; // width per table\n\t\t\t\tconst float RES_NU = 8.;\t// table per texture depth\n\n\t\t\t\t#define TRANSMITTANCE_NON_LINEAR\t\n\t\t\t\t#define INSCATTER_NON_LINEAR\n\n\t\t\t\tvec4 Texture4D(sampler2D table, float r, float mu, float muS, float nu) {\n\t\t\t\t\t\tfloat H = sqrt(Rt * Rt - Rg * Rg);\n\t\t\t\t\t\tfloat rho = sqrt(r * r - Rg * Rg);\n\t\t\t\t\t\t#ifdef INSCATTER_NON_LINEAR\n\t\t\t\t\t\t\t\tfloat rmu = r * mu;\n\t\t\t\t\t\t\t\tfloat delta = rmu * rmu - r * r + Rg * Rg;\n\t\t\t\t\t\t\t\tvec4 cst = rmu < 0.0 && delta > 0.0 ? vec4(1.0, 0.0, 0.0, 0.5 - 0.5 / RES_MU) : vec4(-1.0, H * H, H, 0.5 + 0.5 / RES_MU);\t\t \n\t\t\t\t\t\t\t\tfloat uR = 0.5 / RES_R + rho / H * (1.0 - 1.0 / RES_R);\n\t\t\t\t\t\t\t\tfloat uMu = cst.w + (rmu * cst.x + sqrt(delta + cst.y)) / (rho + cst.z) * (0.5 - 1.0 / float(RES_MU));\n\n\t\t\t\t\t\t\t\t// paper formula\n\t\t\t\t\t\t\t\t// float uMuS = 0.5 / RES_MU_S + max((1.0 - exp(-3.0 * muS - 0.6)) / (1.0 - exp(-3.6)), 0.0) * (1.0 - 1.0 / RES_MU_S);\n\t\t\t\t\t\t\t\t// better formula\n\t\t\t\t\t\t\t\tfloat uMuS = 0.5 / RES_MU_S + (atan(max(muS, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5 * (1.0 - 1.0 / RES_MU_S);\n\n\t\t\t\t\t\t\t\tif (_SkyboxOcean < 0.5) {\n\t\t\t\t\t\t\t\t\t\tuMu = rmu < 0.0 && delta > 0.0 ? 0.975 : uMu * 0.975 + 0.015 * uMuS; // 0.975 to fix the horizion seam. 0.015 to fix zenith artifact\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tfloat uR = 0.5 / RES_R + rho / H * (1.0 - 1.0 / RES_R);\n\t\t\t\t\t\t\t\tfloat uMu = 0.5 / RES_MU + (mu + 1.0) / 2.0 * (1.0 - 1.0 / RES_MU);\n\t\t\t\t\t\t\t\tfloat uMuS = 0.5 / RES_MU_S + max(muS + 0.2, 0.0) / 1.2 * (1.0 - 1.0 / RES_MU_S);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tfloat lep = (nu + 1.0) / 2.0 * (RES_NU - 1.0);\n\t\t\t\t\t\tfloat uNu = floor(lep);\n\t\t\t\t\t\tlep = lep - uNu;\n\n\t\t\t\t\t\t// Original 3D lookup\n\t\t\t\t\t\t// return tex3D(table, float3((uNu + uMuS) / RES_NU, uMu, uR)) * (1.0 - lep) + tex3D(table, float3((uNu + uMuS + 1.0) / RES_NU, uMu, uR)) * lep;\n\n\t\t\t\t\t\tfloat uNu_uMuS = uNu + uMuS;\n\n\t\t\t\t\t\t#ifdef SKY_MULTISAMPLE\t\n\t\t\t\t\t\t\t\t// new 2D lookup\n\t\t\t\t\t\t\t\tfloat u_0 = floor(uR * RES_R) / RES_R;\n\t\t\t\t\t\t\t\tfloat u_1 = floor(uR * RES_R + 1.0) / RES_R;\n\t\t\t\t\t\t\t\tfloat u_frac = fract(uR * RES_R);\n\n\t\t\t\t\t\t\t\t// pre-calculate uv\n\t\t\t\t\t\t\t\tfloat uv_0X = uNu_uMuS / RES_NU;\n\t\t\t\t\t\t\t\tfloat uv_1X = (uNu_uMuS + 1.0) / RES_NU;\n\t\t\t\t\t\t\t\tfloat uv_0Y = uMu / RES_R + u_0;\n\t\t\t\t\t\t\t\tfloat uv_1Y = uMu / RES_R + u_1;\n\t\t\t\t\t\t\t\tfloat OneMinusLep = 1.0 - lep;\n\n\t\t\t\t\t\t\t\tvec4 A = texture2D(table, vec2(uv_0X, uv_0Y)) * OneMinusLep + texture2D(table, vec2(uv_1X, uv_0Y)) * lep;\t\n\t\t\t\t\t\t\t\tvec4 B = texture2D(table, vec2(uv_0X, uv_1Y)) * OneMinusLep + texture2D(table, vec2(uv_1X, uv_1Y)) * lep;\t\n\n\t\t\t\t\t\t\t\treturn A * (1.0 - u_frac) + B * u_frac;\n\n\t\t\t\t\t\t#else\t\n\t\t\t\t\t\t\t\treturn texture2D(table, vec2(uNu_uMuS / RES_NU, uMu)) * (1.0 - lep) + texture2D(table, vec2((uNu_uMuS + 1.0) / RES_NU, uMu)) * lep;\t\n\t\t\t\t\t\t#endif\n\t\t\t\t}\n\n\t\t\t\tvec3 GetMie(vec4 rayMie) {\t\n\t\t\t\t\t\t// approximated single Mie scattering (cf. approximate Cm in paragraph "Angular precision")\n\t\t\t\t\t\t// rayMie.rgb = C*, rayMie.w = Cm, r\n\t\t\t\t\t\treturn rayMie.rgb * rayMie.w / max(rayMie.r, 1e-4) * (betaR.r / betaR.xyz);\n\t\t\t\t}\n\n\t\t\t\tfloat PhaseFunctionR() {\n\t\t\t// Rayleigh phase function without multiply (1.0 + mu * mu)\n\t\t\t// We will multiply (1.0 + mu * mu) together with Mie phase later.\n\t\t\treturn 3.0 / (16.0 * PI);\n\t\t}\n\n\t\t\t\tfloat PhaseFunctionM(float mu, vec3 miePhase_g) {\n\t\t\t// Mie phase function (optimized)\n\t\t\t// Precomputed PhaseFunctionG() with constant values in vertex program and pass them in here\n\t\t\t// we will multiply (1.0 + mu * mu) together with Rayleigh phase later.\n\t\t\treturn miePhase_g.x / pow(miePhase_g.y - miePhase_g.z * mu, 1.5);\n\t\t}\n\n\t\t\t\tvec3 Transmittance(float r, float mu) {\n\t\t\t\t\t\tfloat uR, uMu;\n\t\t\t\t\t\t#ifdef TRANSMITTANCE_NON_LINEAR\n\t\t\t\t\t\t\t\tuR = sqrt((r - Rg) / (Rt - Rg));\n\t\t\t\t\t\t\t\tuMu = atan((mu + 0.15) / (1.0 + 0.15) * tan(1.5)) / 1.5;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tuR = (r - Rg) / (Rt - Rg);\n\t\t\t\t\t\t\t\tuMu = (mu + 0.15) / (1.0 + 0.15);\n\t\t\t\t\t\t#endif\t\t\n\t\t\t\t\t\treturn texture2D(_Transmittance, vec2(uMu, uR)).rgb;\n\t\t\t\t}\n\n\t\t\t\tconst vec3 EARTH_POS = vec3(0.0, 6360010.0, 0.0);\n\t\t\t\tconst float SUN_BRIGHTNESS = 40.0;\n\n\t\t\t\tvec3 SkyRadiance(vec3 camera, vec3 viewdir, float nu, vec3 MiePhase_g, out vec3 extinction) {\n\t\t\t\t\t\tcamera += EARTH_POS;\n\n\t\t\t\t\t\tvec3 result = vec3(0., 0., 0.);\n\t\t\t\t\t\tfloat r = length(camera);\n\t\t\t\t\t\tfloat rMu = dot(camera, viewdir);\n\t\t\t\t\t\tfloat mu = rMu / r;\n\n\t\t\t\t\t\tfloat deltaSq = sqrt(rMu * rMu - r * r + Rt * Rt);\n\t\t\t\t\t\tfloat din = max(-rMu - deltaSq, 0.0);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (din > 0.0) {\n\t\t\t\t\t\t\t\tcamera += din * viewdir;\n\t\t\t\t\t\t\t\trMu += din;\n\t\t\t\t\t\t\t\tmu = rMu / Rt;\n\t\t\t\t\t\t\t\tr = Rt;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// float nu = dot(viewdir, _SunDirSize.xyz); // nu value is from function input\n\t\t\t\t\t\tfloat muS = dot(camera, _SunDirSize.xyz) / r;\n\n\t\t\t\t\t\tvec4 inScatter = Texture4D(_Inscatter, r, rMu / r, muS, nu);\n\n\t\t\t\t\t\textinction = Transmittance(r, mu);\n\n\t\t\t\t\t\tif(r <= Rt) {\n\t\t\t\t\t\t\t\tvec3 inScatterM = GetMie(inScatter);\n\t\t\t\t\t\t\t\tfloat phase = PhaseFunctionR();\n\t\t\t\t\t\t\t\tfloat phaseM = PhaseFunctionM(nu, MiePhase_g);\n\t\t\t\t\t\t\t\tresult = (inScatter.rgb * phase + inScatterM * phaseM) * (1.0 + nu * nu);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult = vec3(0., 0., 0.);\n\t\t\t\t\t\t\t\textinction = vec3(1., 1., 1.);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result * SUN_BRIGHTNESS;\n\t\t\t\t}\n\n\t\t\t\tvec3 hdr(vec3 L) {\n\t\t\t\t\t\tL.r = L.r < 1.413 ? pow(L.r * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.r);\n\t\t\t\t\t\tL.g = L.g < 1.413 ? pow(L.g * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.g);\n\t\t\t\t\t\tL.b = L.b < 1.413 ? pow(L.b * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.b);\n\t\t\t\t\t\treturn L;\n\t\t\t\t}\n\n\t\t\t\t// switch different tonemapping methods between day and night\n\t\t\t\tvec3 hdr2(vec3 L) {\n\t\t\t\t\t\tL = mix(hdr(L), 1.0 - exp(-L), _uSkyNightParams.x);\n\t\t\t\t\t\treturn L;\n\t\t\t\t}\n\n\t\t\t\t#if defined(COLORSPACE_GAMMA)\n\t\t\t\t\t\t#define COLOR_2_LINEAR(color) color * (0.4672 * color + 0.266)\n\t\t\t\t\t\t#define GAMMA_2_OUTPUT(color) color\n\t\t\t\t\t\t#define HDR_OUTPUT(color)\tpow(color * 1.265, 0.735)\n\t\t\t\t#else\n\t\t\t\t\t\t#define COLOR_2_LINEAR(color) color * color\n\t\t\t\t\t\t#define GAMMA_2_OUTPUT(color) color * color\n\t\t\t\t\t\t#define HDR_OUTPUT(color) color * 0.6129\n\t\t\t\t#endif\n\n\t\t\t\tvoid main() {\n\t\t\t\t\t\tvec3 dir = normalize(vWorldPosAndCamY.xyz);\n\t\t\t\t\t\tfloat nu = dot(dir, _SunDirSize.xyz);\n\n\t\t\t\t\t\tvec3 extinction = vec3(0.0);\n\t\t\t\t\t\tvec3 col = SkyRadiance(vec3(0.0, vWorldPosAndCamY.w, 0.0), dir, nu, vMiePhase_g, extinction);\n\n\t\t\t\t\t\t// ------------------\n\n\t\t\t\t\t\t// night sky\n\t\t\t\t\t\tvec3 nightSkyColor = vec3(0., 0., 0.);\n\t\t\t\t\t\tfloat moonMask = 0.0;\n\t\t\t\t\t\tfloat gr = 1.0;\n\n\t\t\t\t\t\tif (_SunDirSize.y < 0.25) {\n\t\t\t\t\t\t\t\t// add horizontal night sky gradient\n\t\t\t\t\t\t\t\tgr = clamp(extinction.z * .25 / _NightHorizonColor.w, 0., 1.);\n\t\t\t\t\t\t\t\tgr *= 2. - gr;\n\n\t\t\t\t\t\t\t\tnightSkyColor = mix(_NightHorizonColor.xyz, _NightZenithColor.xyz, gr);\n\t\t\t\t\t\t\t\t// add moon and outer space\n\t\t\t\t\t\t\t\tvec4 moonAlbedo = texture2D(_MoonSampler, vMoonTC.xy);\n\t\t\t\t\t\tmoonMask = moonAlbedo.a * _uSkyNightParams.y;\n\n\t\t\t\t\t\t\t\tvec4 spaceAlbedo = textureCube(_OuterSpaceCube, vSpaceTC);\n\t\t\t\t\t\t\t\t// TODO _uSkyNightParams.x * OuterSpaceIntensity or _uSkyNightParams.z\n\t\t\t\t\t\t\t\tnightSkyColor += (moonAlbedo.rgb * _uSkyNightParams.y + spaceAlbedo.rgb * (max(1. - moonMask, gr) * _uSkyNightParams.z)) * gr;\n\n\t\t\t\t\t\t\t\t// moon corona\n\t\t\t\t\t\t\t\tfloat m = 1. - dot(dir, _MoonDirSize.xyz);\n\t\t\t\t\t\t\t\tnightSkyColor += _MoonInnerCorona.xyz * (1.0 / (1.05 + m * _MoonInnerCorona.w));\n\t\t\t\t\t\tnightSkyColor += _MoonOuterCorona.xyz * (1.0 / (1.05 + m * _MoonOuterCorona.w));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// ------------------\n\n\t\t\t\t\t\t#ifndef SKY_HDR_MODE\n\t\t\t\t\t\t\t\tcol += nightSkyColor;\n\t\t\t\t\t\t\t\tcol = GAMMA_2_OUTPUT(hdr2(col * _SkyExposure));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tcol += COLOR_2_LINEAR(nightSkyColor);\n\t\t\t\t\t\t\t\tcol = HDR_OUTPUT(col * _SkyExposure);\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t#ifdef SKY_SUNDISK\n\t\t\t\t\t\t\t\tfloat sun = PhaseFunctionM(nu, vSun_g) * (1.0 + nu * nu); \n\t\t\t\t\t\tcol += sun * extinction;\n\n\t\t\t\t\t\t\t\t// TODO new sun disk?\n\t\t\t\t\t\t\t\t// float sun = step(0.9999 - _SunDirSize.w * 1e-4, nu) * sign(_LightColor0.w);\n\t\t\t\t// col += (sun * SUN_BRIGHTNESS) * extinction ;\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\tfloat alpha = mix(1.0, max(1e-3, moonMask + (1. - gr)), _uSkyNightParams.x);\n\n\t\t\t\t\t\tgl_FragColor = vec4(col, alpha);\n\t\t\t\t\t\t// gl_FragColor = vec4(col, 1.);\n\t\t\t\t}\n\t\t'};class y extends o.Mesh{constructor(){const t=new o.ShaderMaterial(g);t.depthWrite=!1,t.side=o.DRAW_SIDE.BACK,super(new o.SphereGeometry(1,100,100),t),this.frustumCulled=!1}}const v="\n\n// The radius of the planet (Rg), radius of the atmosphere (Rt),\tatmosphere limit (RL)\nconst float Rg = 6360.0;\nconst float Rt = 6420.0;\nconst float RL = 6421.0;\n\n// Half heights for the atmosphere air density (HR) and particle density (HM)\n// This is the height in km that half the particles are found below\nconst float HR = 8.0;\nconst float HM = 1.2;\n\n// const vec3 betaR = vec3(5.8e-3, 1.35e-2, 3.31e-2);\nuniform vec4 betaR;\nconst vec3 betaMSca = vec3(4e-3, 4e-3, 4e-3);\nconst vec3 betaMEx = betaMSca / 0.9;\n\n// ---------------------------------------------------------------------------- \n// NUMERICAL INTEGRATION PARAMETERS \n// ----------------------------------------------------------------------------\n\n// default Transmittance sample is 500, less then 250 sample will fit in SM 3.0 for dx9,\n#define TRANSMITTANCE_INTEGRAL_SAMPLES 50\n//default Inscatter sample is 50\n#define INSCATTER_INTEGRAL_SAMPLES 25\n\n// ---------------------------------------------------------------------------- \n// PARAMETERIZATION OPTIONS \n// ----------------------------------------------------------------------------\n\n#define TRANSMITTANCE_NON_LINEAR\t\n#define INSCATTER_NON_LINEAR\n\n// ---------------------------------------------------------------------------- \n// UTILITY FUNCTIONS\n// ---------------------------------------------------------------------------- \n\n// nearest intersection of ray r, mu with ground or top atmosphere boundary \n// mu = cos(ray zenith angle at ray origin) \nfloat Limit(float r, float mu) { \n\t\tfloat dout = -r * mu + sqrt(r * r * (mu * mu - 1.0) + RL * RL); \n\t\tfloat delta2 = r * r * (mu * mu - 1.0) + Rg * Rg;\n\t\t\n\t\tif (delta2 >= 0.0) { \n\t\t\t\tfloat din = -r * mu - sqrt(delta2);\n\t\t\t\tif (din >= 0.0) { \n\t\t\t\t\t\tdout = min(dout, din); \n\t\t\t\t} \n\t\t} \n\t\t\n\t\treturn dout; \n}\n\n",p={name:"sky_transmittance",defines:{},uniforms:{betaR:[.0058,.0135,.0331,1]},vertexShader:"\n\t\t\t\tattribute vec3 a_Position;\n\t\t\t\tattribute vec2 a_Uv;\n\t\t\t\t\t \n\t\t\t\tuniform mat4 u_ProjectionView;\n\t\t\t\tuniform mat4 u_Model;\n\n\t\t\t\tvarying vec2 v_Uv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\t\tv_Uv = a_Uv;\n\t\t\t\t\t\tgl_Position = u_ProjectionView * u_Model * vec4(a_Position, 1.0);\n\t\t\t\t}\n\t\t",fragmentShader:`\n\t\t\t\tvarying vec2 v_Uv;\n\t\t\t\t\n\t\t\t\t${v}\n\t\t\t\t\n\t\t\t\t// pixel shader entry point\n\t\t\t\t// ---------------------------------------------------------------------------- \n\t\t\t\t// TRANSMITTANCE FUNCTIONS\t equ 2-6\n\t\t\t\t// ----------------------------------------------------------------------------\n\n\t\t\t\tfloat OpticalDepth(float H, float r, float mu) { \n\t\t\t\t\t\tfloat result = 0.0; \n\t\t\t\t\t\tfloat dx = Limit(r, mu) / float(TRANSMITTANCE_INTEGRAL_SAMPLES); \n\t\t\t\t\t\tfloat xi = 0.0; \n\t\t\t\t\t\tfloat yi = exp(-(r - Rg) / H); \n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (int i = 1; i <= TRANSMITTANCE_INTEGRAL_SAMPLES; ++i) { \n\t\t\t\t\t\t\t\tfloat i_float = float(i);\n\t\t\t\t\t\t\t\tfloat xj = i_float * dx; \n\t\t\t\t\t\t\t\tfloat yj = exp(-(sqrt(r * r + xj * xj + 2.0 * xj * r * mu) - Rg) / H);\n\t\t\t\t\t\t\t\tresult += (yi + yj) / 2.0 * dx;\n\t\t\t\t\t\t\t\txi = xj;\n\t\t\t\t\t\t\t\tyi = yj; \n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? 1e9 : result; \n\t\t\t\t} \n\t\t\t\t\n\t\t\t\tvoid GetTransmittanceRMu(vec2 coord, out float r, out float muS) { \n\t\t\t\t\t\tr = coord.y; \n\t\t\t\t\t\tmuS = coord.x;\n\t\t\t\t\t\t#ifdef TRANSMITTANCE_NON_LINEAR \n\t\t\t\t\t\t\t\tr = Rg + (r * r) * (Rt - Rg); \n\t\t\t\t\t\t\t\tmuS = -0.15 + tan(1.5 * muS) / tan(1.5) * (1.0 + 0.15); \n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tr = Rg + r * (Rt - Rg); \n\t\t\t\t\t\t\t\tmuS = -0.15 + muS * (1.0 + 0.15);\n\t\t\t\t\t\t#endif\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid main() {\n\t\t\t\t\t\tfloat r, muS;\n\t\t\t\t\t\tGetTransmittanceRMu(v_Uv, r, muS); \n\t\t\t\t\n\t\t\t\t\t\tvec3 depth = betaR.xyz * OpticalDepth(HR, r, muS) + betaMEx * OpticalDepth(HM, r, muS); \n\t\t\t\t\t\tgl_FragColor = vec4(exp(-depth), 1.0); // Eq (5)\n\t\t\t\t}\n\t\t`},R={name:"sky_inscatter",defines:{},uniforms:{_Transmittance:null,betaR:[.0058,.0135,.0331,1]},vertexShader:"\n\t\t\t\tattribute vec3 a_Position;\n\t\t\t\tattribute vec2 a_Uv;\n\t\t\t\t\t \n\t\t\t\tuniform mat4 u_ProjectionView;\n\t\t\t\tuniform mat4 u_Model;\n\n\t\t\t\tvarying vec2 v_Uv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\t\tv_Uv = a_Uv;\n\t\t\t\t\t\tgl_Position = u_ProjectionView * u_Model * vec4(a_Position, 1.0);\n\t\t\t\t}\n\t\t",fragmentShader:`\n\t\t\t\tuniform sampler2D _Transmittance;\n\n\t\t\t\tvarying vec2 v_Uv;\n\n\t\t\t\t${v}\n\t\t\t\t\n\t\t\t\tconst float RES_R = 4.; \t// 3D texture depth\n\t\t\t\tconst float RES_MU = 128.; \t// height of the texture\n\t\t\t\tconst float RES_MU_S = 32.; // width per table\n\t\t\t\tconst float RES_NU = 8.;\t// table per texture depth\n\n\t\t\t\tconst float epsion = 0.000000001;\n\t\t\t\t\n\t\t\t\t//----------------------------------------------------------------------------------------------------\n\t\t\t\t\n\t\t\t\tvoid GetMuMuSNu(vec2 coord, float r, vec4 dhdH, out float mu, out float muS, out float nu) { \n\t\t\t\t\t\tfloat x = coord.x * float(RES_MU_S * RES_NU) - 0.5;\n\t\t\t\t\t\tfloat y = coord.y * float(RES_MU) - 0.5;\n\t\t\t\t\n\t\t\t\t\t\t#ifdef INSCATTER_NON_LINEAR \n\t\t\t\t\t\t\t\tif (y < float(RES_MU) / 2.0) { // bottom half\n\t\t\t\t\t\t\t\t\t\tfloat d = 1.0 - y / (float(RES_MU) / 2.0 - 1.0); \n\t\t\t\t\t\t\t\t\t\td = min(max(dhdH.z, d * dhdH.w), dhdH.w * 0.999); \n\t\t\t\t\t\t\t\t\t\tmu = (Rg * Rg - r * r - d * d) / (2.0 * r * d); \n\t\t\t\t\t\t\t\t\t\tmu = min(mu, -sqrt(1.0 - (Rg / r) * (Rg / r)) - 0.001); \n\t\t\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\t\t\t\tfloat d = (y - float(RES_MU) / 2.0) / (float(RES_MU) / 2.0 - 1.0); \n\t\t\t\t\t\t\t\t\t\td = min(max(dhdH.x, d * dhdH.y), dhdH.y * 0.999); \n\t\t\t\t\t\t\t\t\t\tmu = (Rt * Rt - r * r - d * d) / (2.0 * r * d); \n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\tmuS = mod(x, float(RES_MU_S)) / (float(RES_MU_S) - 1.0);\n\t\t\t\t\t\t\t\t// paper formula \n\t\t\t\t\t\t\t\t// muS = -(0.6 + log(1.0 - muS * (1.0 -\texp(-3.6)))) / 3.0; \n\t\t\t\t\t\t\t\t// better formula \n\t\t\t\t\t\t\t\tmuS = tan((2.0 * muS - 1.0 + 0.26) * 1.1) / tan(1.26 * 1.1); \n\t\t\t\t\t\t\t\tnu = -1.0 + floor(x / float(RES_MU_S)) / (float(RES_NU) - 1.0) * 2.0; \n\t\t\t\t\t\t#else \n\t\t\t\t\t\t\t\tmu = -1.0 + 2.0 * y / (float(RES_MU) - 1.0); \n\t\t\t\t\t\t\t\tmuS = mod(x, float(RES_MU_S)) / (float(RES_MU_S) - 1.0); \n\t\t\t\t\t\t\t\tmuS = -0.2 + muS * 1.2; \n\t\t\t\t\t\t\t\tnu = -1.0 + floor(x / float(RES_MU_S)) / (float(RES_NU) - 1.0) * 2.0;\n\t\t\t\t\t\t#endif \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// UE4 AtmosphereRendering.cpp\n\t\t\t\tvoid GetLayer(float layer, out float r, out vec4 dhdH) {\n\t\t\t\t\t\t// Assign the total depth constant for "RES_R" altitude layer setting.\n\t\t\t\t\t\tconst float RES_R_TOTAL = 32.;\n\t\t\t\t\t\t\n\t\t\t\t\t\tr = float(layer) / max((RES_R_TOTAL - 1.0), 1.0);\n\t\t\t\t\t\tr = r * r;\n\t\t\t\t\t\tr = sqrt(Rg * Rg + r * (Rt * Rt - Rg * Rg)) + (abs(layer - 0.) < epsion ? 0.01 : (abs(layer - RES_R_TOTAL + 1.) < epsion ? -0.001 : 0.0));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfloat dmin = Rt - r;\n\t\t\t\t\t\tfloat dmax = sqrt(r * r - Rg * Rg) + sqrt(Rt * Rt - Rg * Rg);\n\t\t\t\t\t\tfloat dminp = r - Rg;\n\t\t\t\t\t\tfloat dmaxp = sqrt(r * r - Rg * Rg);\n\t\t\t\t\n\t\t\t\t\t\tdhdH = vec4(dmin, dmax, dminp, dmaxp);\t\n\t\t\t\t}\n\n\t\t\t\t// ---------------------------------------------------------------------------- \n\t\t\t\t// TRANSMITTANCE FUNCTIONS\n\t\t\t\t// ---------------------------------------------------------------------------- \n\n\t\t\t\t// transmittance(=transparency) of atmosphere for infinite ray (r, mu)\n\t\t\t\t// (mu = cos(view zenith angle)), intersections with ground ignored\t\t\t\t\n\t\t\t\tvec3 Transmittance(float r, float mu) {\n\t\t\t\t\t\tfloat uR, uMu;\n\t\t\t\t\t\t#ifdef TRANSMITTANCE_NON_LINEAR\n\t\t\t\t\t\t\t\tuR = sqrt((r - Rg) / (Rt - Rg));\n\t\t\t\t\t\t\t\tuMu = atan((mu + 0.15) / (1.0 + 0.15) * tan(1.5)) / 1.5;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tuR = (r - Rg) / (Rt - Rg);\n\t\t\t\t\t\t\t\tuMu = (mu + 0.15) / (1.0 + 0.15);\n\t\t\t\t\t\t#endif\t\t\n\t\t\t\t\t\treturn texture2D(_Transmittance, vec2(uMu, uR)).rgb;\n\t\t\t\t}\n\n\t\t\t\t// transmittance(=transparency) of atmosphere between x and x0\n\t\t\t\t// assume segment x, x0 not intersecting ground \n\t\t\t\t// d = distance between x and x0, mu = cos(zenith angle of [x,x0) ray at x) \n\t\t\t\tvec3 Transmittance(float r, float mu, float d) { \n\t\t\t\t\t\tvec3 result; \n\t\t\t\t\t\tfloat r1 = sqrt(r * r + d * d + 2.0 * r * mu * d); \n\t\t\t\t\t\tfloat mu1 = (r * mu + d) / r1;\n\t\t\t\t\t\tif (mu > 0.0) { \n\t\t\t\t\t\t\t\tresult = min(Transmittance(r, mu) / Transmittance(r1, mu1), 1.0); \n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\t\tresult = min(Transmittance(r1, -mu1) / Transmittance(r, -mu), 1.0); \n\t\t\t\t\t\t} \n\t\t\t\t\n\t\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// ---------------------------------------------------------------------------- \n\t\t\t\t// INSCATTER FUNCTIONS \n\t\t\t\t// ---------------------------------------------------------------------------- \n\n\t\t\t\tvoid Integrand(float r, float mu, float muS, float nu, float t, out vec3 ray, out float mie) { \n\t\t\t\t\t\tray = vec3(0.,0.,0.); \n\t\t\t\t\t\tmie = 0.0; // single channel only\n\t\t\t\t\t\tfloat ri = sqrt(r * r + t * t + 2.0 * r * mu * t); \n\t\t\t\t\t\tfloat muSi = (nu * t + muS * r) / (ri * mix(1.0, betaR.w, max(0.0, muS))); // added betaR.w to fix the Rayleigh Offset artifacts issue\n\t\t\t\t\t\tri = max(Rg, ri);\n\t\t\t\t\t\tif (muSi >= -sqrt(1.0 - Rg * Rg / (ri * ri))) \n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\tvec3 ti = Transmittance(r, mu, t) * Transmittance(ri, muSi); \n\t\t\t\t\t\t\t\tray = exp(-(ri - Rg) / HR) * ti; \n\t\t\t\t\t\t\t\tmie = exp(-(ri - Rg) / HM) * ti.x; // only calc the red channel\n\t\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\tvoid Inscatter(float r, float mu, float muS, float nu, out vec3 ray, out float mie) { \n\t\t\t\t\t\tray = vec3(0., 0., 0.); \n\t\t\t\t\t\tmie = 0.0; // single channel only\n\t\t\t\t\t\tfloat dx = Limit(r, mu) / float(INSCATTER_INTEGRAL_SAMPLES);\n\t\t\t\t\t\tfloat xi = 0.0;\n\t\t\t\t\t\tvec3 rayi;\n\t\t\t\t\t\tfloat miei;\n\t\t\t\t\t\tIntegrand(r, mu, muS, nu, 0.0, rayi, miei);\n\t\t\t\t\n\t\t\t\t\t\tfor (int i = 1; i <= INSCATTER_INTEGRAL_SAMPLES; ++i) { \n\t\t\t\t\t\t\t\tfloat xj = float(i) * dx; \n\t\t\t\t\t\t\t\tvec3 rayj; \n\t\t\t\t\t\t\t\tfloat miej; \n\t\t\t\t\t\t\t\tIntegrand(r, mu, muS, nu, xj, rayj, miej); \n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tray += (rayi + rayj) / 2.0 * dx; \n\t\t\t\t\t\t\t\tmie += (miei + miej) / 2.0 * dx; \n\t\t\t\t\t\t\t\txi = xj; \n\t\t\t\t\t\t\t\trayi = rayj; \n\t\t\t\t\t\t\t\tmiei = miej; \n\t\t\t\t\t\t} \n\t\t\t\t\t\t\n\t\t\t\t\t\tray *= betaR.xyz; \n\t\t\t\t\t\tmie *= betaMSca.x;\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\tvoid main() {\n\t\t\t\t\t\tvec3 ray;\n\t\t\t\t\t\tfloat mie; // only calc the red channel\n\t\t\t\t\t\tvec4 dhdH;\n\t\t\t\t\t\tfloat mu, muS, nu, r;\n\t\t\t\t\n\t\t\t\t\t\tvec2 coords = v_Uv; // range 0 ~ 1.\n\n\t\t\t\t\t\tvec3 uvLayer;\n\n\t\t\t\t\t\tif (RES_R > 3.) {\n\t\t\t\t\t\t\t\t// hard coded to split the depth to 4 layer\n\t\t\t\t\t\t\t\t// Texture size = 256 x 512\n\t\t\t\t\t\t\t\tuvLayer = coords.y > 0.75 ? vec3(coords.x, coords.y * RES_R - 3., 8.) : // 16. ? atmosphere level layer\n\t\t\t\t\t\t\t\t\t\tcoords.y > 0.5 ? vec3(coords.x, coords.y * RES_R - 2., 4.) :\n\t\t\t\t\t\t\t\t\t\tcoords.y > 0.25 ? vec3(coords.x, coords.y * RES_R - 1., 2.) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvec3(coords.x, coords.y * RES_R, 0.); // ground level layer\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// One layer only, Texture size is 256 x 128\n\t\t\t\t\t\t\t\tuvLayer = vec3(coords, 1.); // 2. ?\n\t\t\t\t\t\t} \n\t\t\t\t\n\t\t\t\t\t\tGetLayer(uvLayer.z, r, dhdH); \n\t\t\t\t\t\tGetMuMuSNu(uvLayer.xy, r, dhdH, mu, muS, nu); \n\t\t\t\t\n\t\t\t\t\t\tInscatter(r, mu, muS, nu, ray, mie); \n\t\t\t\t\t\t\n\t\t\t\t\t\t// store only red component of single Mie scattering (cf. 'Angular precision')\n\t\t\t\t\t\tgl_FragColor = vec4(ray, mie);\n\t\t\t\t}\n\t\t`};function M(t,n,e){return e<=0?t:e>=1?n:t+(n-t)*e}function x(t,n,e){return t>e?e:t<n?n:t}const C=new o.Vector3,T=new o.Vector3;const E=new o.Vector3(0,0,0),A=new o.Vector3(0,1,0),P=new o.Vector4,w=new o.Matrix4,N=new o.Euler(0,0,0,"YZX"),b=new o.Quaternion;function z(t){return t*Math.PI/180}function I(t,n,e){return t.set(0,0,1),t.applyQuaternion(n),t.normalize(),t.multiplyScalar(e)}class k{constructor(){this._array=[]}setColors(t){this._array.length=0;for(const n in t)this._array.push({key:+n,value:t[n]});return this._array.sort(((t,n)=>t.key-n.key)),this}evaluate(t,n){for(let e=0;e<this._array.length-1;e++){const o=this._array[e],r=this._array[e+1];if(o.key<=n&&n<=r.key){const e=(n-o.key)/(r.key-o.key);t.lerpColors(o.value,r.value,e)}}return t}}function L(t,n){return t.r*=n,t.g*=n,t.b*=n,t}t.Clouds=m,t.Sky=y,t.SkyPrecomputeUtil=class{constructor(t){let n;t.version>1?n=t.getExtension("EXT_color_buffer_float")&&t.getExtension("OES_texture_float_linear")?o.PIXEL_TYPE.FLOAT:o.PIXEL_TYPE.HALF_FLOAT:t.getExtension("OES_texture_float")&&t.getExtension("OES_texture_float_linear")?n=o.PIXEL_TYPE.FLOAT:t.getExtension("OES_texture_half_float")&&t.getExtension("OES_texture_half_float_linear")?n=o.PIXEL_TYPE.HALF_FLOAT:(n=o.PIXEL_TYPE.UNSIGNED_BYTE,console.warn("Half float texture is not supported!"));const e=new o.RenderTarget2D(256,64);e.texture.minFilter=o.TEXTURE_FILTER.LINEAR,e.texture.magFilter=o.TEXTURE_FILTER.LINEAR,e.texture.type=n,e.texture.format=o.PIXEL_FORMAT.RGBA,e.texture.generateMipmaps=!1;const r=new o.RenderTarget2D(512,512);r.texture.minFilter=o.TEXTURE_FILTER.LINEAR,r.texture.magFilter=o.TEXTURE_FILTER.LINEAR,r.texture.type=n,r.texture.format=o.PIXEL_FORMAT.RGBA,r.texture.generateMipmaps=!1;const a=[.0058,.0135,.0331,1],i=new o.ShaderPostPass(p);i.uniforms.betaR=a;const l=new o.ShaderPostPass(R);l.uniforms._Transmittance=e.texture,l.uniforms.betaR=a,this._transmittanceRT=e,this._inscatterRT=r,this._transmittancePass=i,this._inscatterPass=l,this._betaR=a}get transmittanceTexture(){return this._transmittanceRT.texture}get inscatterTexture(){return this._inscatterRT.texture}get betaR(){return this._betaR}computeTransmittance(t){t.renderPass.setRenderTarget(this._transmittanceRT),t.renderPass.setClearColor(0,0,0,0),t.renderPass.clear(!0,!0,!0),this._transmittancePass.render(t)}computeInscatter(t){t.renderPass.setRenderTarget(this._inscatterRT),t.renderPass.setClearColor(0,0,0,0),t.renderPass.clear(!0,!0,!0),this._inscatterPass.render(t)}setBetaRayleighDensity(t,n,e){const o=C.set(M(t.x+150,t.x-150,n.r),M(t.y+150,t.y-150,n.g),M(t.z+150,t.z-150,n.b));o.x=x(o.x,380,780),o.y=x(o.y,380,780),o.z=x(o.z,380,780);const r=o.multiplyScalar(1e-9),a=1.0003,i=T.set(Math.pow(r.x,4),Math.pow(r.y,4),Math.pow(r.z,4)).multiplyScalar(43939424999999996e10),l=8*Math.pow(Math.PI,3)*Math.pow(a*a-1,2)*6.105,u=C.set(l/i.x,l/i.y,l/i.z);return u.multiplyScalar(1e3*e),this._betaR[0]=u.x,this._betaR[1]=u.y,this._betaR[2]=u.z,this._betaR[3]=Math.max(Math.pow(e,Math.PI),1),this._betaR}},t.SkyTimeline=class{constructor(t){this._sunLight=t.sunLight||null,this._moonLight=t.moonLight||null,this._hemisphereLight=t.hemisphereLight||null,this._sky=t.sky||null,this._clouds=t.clouds||null,this._stars=t.stars||null,this._lightColorGradient=(new k).setColors({0:new o.Color3(85/255,99/255,112/255),.49:new o.Color3(85/255,99/255,112/255),.51:new o.Color3(245/255,173/255,84/255),.57:new o.Color3(249/255,208/255,144/255),1:new o.Color3(252/255,222/255,186/255)}),this._skyColorGradient=(new k).setColors({0:new o.Color3(28/255,32/255,40/255),.475:new o.Color3(28/255,32/255,40/255),.5:new o.Color3(55/255,65/255,63/255),.55:new o.Color3(138/255,168/255,168/255),.65:new o.Color3(145/255,174/255,210/255),1:new o.Color3(145/255,174/255,210/255)}),this._equatorColorGradient=(new k).setColors({0:new o.Color3(17/255,21/255,30/255),.475:new o.Color3(17/255,21/255,30/255),.52:new o.Color3(100/255,100/255,78/255),.58:new o.Color3(128/255,150/255,128/255),1:new o.Color3(128/255,150/255,128/255)}),this._groundColorGradient=(new k).setColors({0:new o.Color3(21/255,20/255,19/255),.48:new o.Color3(21/255,20/255,19/255),.55:new o.Color3(94/255,89/255,87/255),1:new o.Color3(94/255,89/255,87/255)}),this._lightExposure=1,this._sunAndMoon={sunDirection:0,sunEquatorOffset:30,moonPositionOffset:0,distance:50},this._sunIntensity=1,this._moonIntensity=.6,this._sunSize=1,this._nightSkySettings={nightZenithColor:[.2,74/255,.4,1],nightHorizonColor:[72/255,100/255,128/255,128/255],starIntensity:1,outerSpaceIntensity:.25,moonInnerCorona:[225/255,225/255,225/255,128/255],moonOuterCorona:[65/255,88/255,128/255,128/255],moonSize:1},this._timeline=0,this._stats={sunQuaternion:new o.Quaternion,moonQuaternion:new o.Quaternion,sunDirection:new o.Vector3,moonDirection:new o.Vector3,dayTimeBrightness:0,nightTimeBrightness:0,nightFade:0,moonFade:0,normalizedTime:0,lightColor:new o.Color3,skyColor:new o.Color3,equatorColor:new o.Color3,groundColor:new o.Color3}}set timeline(t){this._timeline=t,this.refresh()}get timeline(){return this._timeline}refresh(){this._updateStats(),this._updateLights(),this._updateSkyMaterialUniform(),this._updateCloudsMaterialUniform(),this._updateStarsMaterialUniforms()}_updateStats(){const t=this._timeline,n=this._sunAndMoon,e=this._lightColorGradient,o=this._skyColorGradient,r=this._equatorColorGradient,a=this._groundColorGradient,i=this._stats,{sunQuaternion:l,moonQuaternion:u,sunDirection:s,moonDirection:m,lightColor:c,skyColor:_,equatorColor:f,groundColor:h}=i,d=360*t/24-90;N.set(0,z(n.sunDirection-90),z(n.sunEquatorOffset)),l.setFromEuler(N),N.set(z(d),0,0),b.setFromEuler(N),l.multiply(b),N.set(z(180),z(n.moonPositionOffset),z(180)),u.copy(l).multiply(b.setFromEuler(N)),I(s,l,-1),I(m,u,-1),i.dayTimeBrightness=x(Math.max(s.y+.2,0)/1.2,0,1),i.nightTimeBrightness=1-i.dayTimeBrightness,i.nightFade=Math.pow(i.nightTimeBrightness,4),i.moonFade=m.y>0?Math.max(x((m.y-.1)*Math.PI*i.nightTimeBrightness-i.dayTimeBrightness,0,1),0):0,i.normalizedTime=.5*s.y+.5,e.evaluate(c,i.normalizedTime),o.evaluate(_,i.normalizedTime),r.evaluate(f,i.normalizedTime),a.evaluate(h,i.normalizedTime);const S=Math.pow(this._lightExposure,.4);L(c,S),L(_,S),L(f,S),L(h,S)}_updateLights(){const t=this._sunLight,n=this._moonLight,e=this._hemisphereLight,o=this._sunAndMoon,r=this._sunIntensity,a=this._moonIntensity,i=this._stats,{sunQuaternion:l,moonQuaternion:u,dayTimeBrightness:s,nightTimeBrightness:m,normalizedTime:c,lightColor:_,skyColor:f,groundColor:h}=i,d=x(4*s,0,1),S=m;t&&(I(t.position,l,-o.distance),t.lookAt(E,A),t.color.setRGB(_.r*d,_.g*d,_.b*d),t.intensity=c>.48?r:0),n&&(I(n.position,u,-o.distance),n.lookAt(E,A),n.color.setRGB(_.r*S,_.g*S,_.b*S),n.intensity=c<.5&&a>.01?a:0),e&&(e.color.copy(f),e.groundColor.copy(h))}_updateSkyMaterialUniform(){const t=this._nightSkySettings,n=this._stats,{moonQuaternion:e,sunDirection:o,moonDirection:r,nightTimeBrightness:a,nightFade:i,moonFade:l}=n,u=this._sky;u&&(o.toArray(u.material.uniforms._SunDirSize),u.material.uniforms._SunDirSize[3]=this._sunSize,r.toArray(u.material.uniforms._MoonDirSize),u.material.uniforms._MoonDirSize[3]=8/t.moonSize,u.material.uniforms._uSkyNightParams[0]=i,u.material.uniforms._uSkyNightParams[1]=l,u.material.uniforms._uSkyNightParams[2]=i,P.fromArray(t.nightZenithColor).multiplyScalar(.25*a),P.toArray(u.material.uniforms._NightZenithColor),P.fromArray(t.nightHorizonColor).multiplyScalar(.5*i),P.toArray(u.material.uniforms._NightHorizonColor),u.material.uniforms._MoonInnerCorona[0]=t.moonInnerCorona[0]*l,u.material.uniforms._MoonInnerCorona[1]=t.moonInnerCorona[1]*l,u.material.uniforms._MoonInnerCorona[2]=t.moonInnerCorona[2]*l,u.material.uniforms._MoonInnerCorona[3]=400/t.moonInnerCorona[3],u.material.uniforms._MoonOuterCorona[0]=t.moonOuterCorona[0]*l*.25,u.material.uniforms._MoonOuterCorona[1]=t.moonOuterCorona[1]*l*.25,u.material.uniforms._MoonOuterCorona[2]=t.moonOuterCorona[2]*l*.25,u.material.uniforms._MoonOuterCorona[3]=4/t.moonOuterCorona[3],w.makeRotationFromQuaternion(e).inverse(),w.toArray(u.material.uniforms._SpaceRotationMatrix))}_updateCloudsMaterialUniform(){const t=this._clouds,n=this._nightSkySettings,e=this._sunIntensity,o=this._moonIntensity,r=this._stats,{sunDirection:a,moonDirection:i,dayTimeBrightness:l,nightTimeBrightness:u,nightFade:s,moonFade:m,lightColor:c}=r;if(t){a.toArray(t.material.uniforms._SunDirSize),i.toArray(t.material.uniforms._MoonDirSize),t.material.uniforms._uSkyNightParams[0]=s,t.material.uniforms._uSkyNightParams[1]=m;const r=M(o,e,x(1.2*l,0,1));t.material.uniforms._SkyLightColor[0]=c.r*Math.pow(r,2.2),t.material.uniforms._SkyLightColor[1]=c.g*Math.pow(r,2.2),t.material.uniforms._SkyLightColor[2]=c.b*Math.pow(r,2.2),P.fromArray(n.nightZenithColor).multiplyScalar(.25*u),t.material.uniforms._NightZenithColor[0]=P.x,t.material.uniforms._NightZenithColor[1]=P.y,t.material.uniforms._NightZenithColor[2]=P.z}}_updateStarsMaterialUniforms(){const t=this._stars,n=this._stats,{moonQuaternion:e,moonFade:o}=n;t&&(w.makeRotationFromQuaternion(e),w.toArray(t.material.uniforms._StarRotationMatrix),t.material.uniforms._StarIntensity=40*o)}},t.Stars=f}));
